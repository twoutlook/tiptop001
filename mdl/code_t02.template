{<section id="${app_id}.global" >}
#應用 t02 樣板自動產生(Version:46)
#add-point:填寫註解說明 name="global.memo"
{<point name="global.memo" edit="s"/>}
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"
{<point name="global.memo_customerization" edit="c"/>}
#end add-point

IMPORT os
IMPORT util
#add-point:增加匯入項目 name="global.import"
{<point name="global.import"/>}
#end add-point
    
SCHEMA ds
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"
{<point name="global.inc" mark="Y"/>}
#end add-point
 
#單身 type 宣告
PRIVATE TYPE type_${detail_var_title} RECORD
       ${detail_fields_define}
       END RECORD
#pages - Start -
PRIVATE TYPE type_${detail_var_title${page}} RECORD
       ${detail_fields_define${page}}
       END RECORD
#pages -  End  -
 
${detail_multi_table_define}
 
#add-point:自定義模組變數(Module Variable)(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
{<point name="global.variable"/>}
#end add-point
 
#模組變數(Module Variables)
DEFINE g_master                     type_${detail_var_title}
DEFINE g_master_t                   type_${detail_var_title}
DEFINE ${detail_var_title}          DYNAMIC ARRAY OF type_${detail_var_title}
DEFINE ${detail_var_title}_t        type_${detail_var_title}
DEFINE ${detail_var_title}_o        type_${detail_var_title}
DEFINE ${detail_var_title}_mask_o   DYNAMIC ARRAY OF type_${detail_var_title} #轉換遮罩前資料
DEFINE ${detail_var_title}_mask_n   DYNAMIC ARRAY OF type_${detail_var_title} #轉換遮罩後資料
#pages - Start -
DEFINE ${detail_var_title${page}}          DYNAMIC ARRAY OF type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_t        type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_o        type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_mask_o   DYNAMIC ARRAY OF type_${detail_var_title${page}} #轉換遮罩前資料
DEFINE ${detail_var_title${page}}_mask_n   DYNAMIC ARRAY OF type_${detail_var_title${page}} #轉換遮罩後資料
#pages -  End  -
      
DEFINE g_wc                 STRING
DEFINE g_wc2                STRING
DEFINE g_sql                STRING
DEFINE g_forupd_sql         STRING                        #SELECT ... FOR UPDATE SQL
DEFINE g_before_input_done  LIKE type_t.num5
DEFINE g_cnt                LIKE type_t.num10    
DEFINE l_ac                 LIKE type_t.num10             
DEFINE g_ac_last            LIKE type_t.num10             
DEFINE g_curr_diag          ui.Dialog                     #Current Dialog
DEFINE gwin_curr            ui.Window                     #Current Window
DEFINE gfrm_curr            ui.Form                       #Current Form
DEFINE g_detail_idx         LIKE type_t.num10             #單身所在筆數(第一階單身)
DEFINE g_detail_idx2        LIKE type_t.num10             #單身所在筆數(第二階單身)
DEFINE g_detail_cnt         LIKE type_t.num10             #單身總筆數 (第一階單身)
DEFINE g_detail_cnt2        LIKE type_t.num10             #單身總筆數 (第二階單身)
DEFINE g_ref_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields         DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars           DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys              DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak          DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_insert             LIKE type_t.chr5              #是否導到其他page
DEFINE g_error_show         LIKE type_t.num5
DEFINE g_aw                 STRING                        #確定當下點擊的單身
DEFINE g_current_page       LIKE type_t.num10             #判斷單身筆數用
DEFINE g_loc                LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_log1               STRING                        #log用
DEFINE g_log2               STRING                        #log用
 
#多table用wc
DEFINE g_wc_table           STRING
#tables - Start -
DEFINE g_wc_table${table}   STRING
#tables -  End  -
#tables_d2 - Start -
DEFINE g_wc2_table${table}   STRING
#tables -  End  -
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"
{<point name="global.argv"/>}
#end add-point
{</section>}
 
{<section id="${app_id}.main" >}
${general_main_function}
{</section>}
 
{<section id="${app_id}.init" >}
#+ 畫面資料初始化
PRIVATE FUNCTION ${general_prefix}_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   {<point name="init.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   {<point name="init.define"/>}
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   {<point name="init.pre_function"/>}
   #end add-point
   
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_error_show  = 1
   ${general_define_combo_stus}
   ${general_define_combo}
   LET l_ac = 1
   ${detail_multi_table_bak}
   #pages - Start -
   ${detail_multi_table_bak${page}}
   #pages -  End  -
   #避免USER直接進入第二單身時無資料
   IF ${detail_var_title}.getLength() > 0 THEN
      LET g_master_t.* = ${detail_var_title}[1].*
      LET g_master.* = ${detail_var_title}[1].*
   END IF
 
   #add-point:畫面資料初始化 name="init.init"
   {<point name="init.init" />}
   #end add-point
   
   CALL ${general_prefix}_default_search()
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.ui_dialog" >}
#+ 功能選單 
PRIVATE FUNCTION ${general_prefix}_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   {<point name="ui_dialog.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   DEFINE la_param  RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
                    END RECORD
   DEFINE ls_js     STRING
   DEFINE li_idx   LIKE type_t.num10
   DEFINE l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   {<point name="ui_dialog.define"/>}
   #end add-point 
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   {<point name="ui_dialog.pre_function"/>}
   #end add-point
   
   LET g_action_choice = " "  
   LET gwin_curr = ui.Window.getCurrent()
   LET gfrm_curr = gwin_curr.getForm() 
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL ${detail_var_title}.clear()
         #pages - Start -
         CALL ${detail_var_title${page}}.clear()
         #pages -  End  -
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL ${general_prefix}_init()
      END IF
   
      #add-point:ui_dialog段before while name="ui_dialog.before_while"
      {<point name="ui_dialog.before_while"/>}
      #end add-point
   
      CALL ${general_prefix}_b_fill(g_wc)
   
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
         DISPLAY ARRAY ${detail_var_title} TO ${sr_name}.* ATTRIBUTE(COUNT=g_detail_cnt) 
      
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx)
               END IF
               LET g_loc = 'm'
               LET g_current_page = 1
      
            BEFORE ROW
               LET g_curr_diag = ui.DIALOG.getCurrent()
               LET g_detail_idx = DIALOG.getCurrentRow("${sr_name}")
               LET l_ac = g_detail_idx
               LET g_master.* = ${detail_var_title}[g_detail_idx].*
               CALL cl_show_fld_cont()
               LET g_action_choice = "fetch"
               CALL ${general_prefix}_fetch()
               CALL ${general_prefix}_idx_chk('m')
               #顯示followup圖示
               ${detail_related_document_show}
               
            #自訂ACTION(detail_show,page_1)
            ${detail_saction_choice1}
               
         END DISPLAY
      
         #pages_m - Start -
         DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.*
            ATTRIBUTES(COUNT=g_detail_cnt)  
         
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx${general_page_idx${page}})
               END IF
               LET g_loc = 'm'
               LET g_current_page = ${page}
               
            BEFORE ROW
               LET g_curr_diag = ui.DIALOG.getCurrent()
               LET g_detail_idx${general_page_idx${page}} = DIALOG.getCurrentRow("${sr_name${page}}")
               LET l_ac = g_detail_idx${general_page_idx${page}}
               LET g_master.* = ${detail_var_title}[g_detail_idx].*
               CALL cl_show_fld_cont() 
               LET g_action_choice = "fetch"
               CALL ${general_prefix}_fetch()
               CALL ${general_prefix}_idx_chk('m')
               #顯示followup圖示
               ${detail_related_document_show}
               
            #自訂ACTION(detail_show,page_${page})
            ${detail_saction_choice${page}}
               
         END DISPLAY
         #pages -  End  -
         
         #pages_d - Start -
         DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.*
            ATTRIBUTES(COUNT=g_detail_cnt)  
         
            BEFORE DISPLAY 
               #如果一直都在單頭則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_detail_idx${general_page_idx${page}})
               END IF
               LET g_loc = 'd'
               LET g_current_page = ${page}
         
            BEFORE ROW
               LET g_curr_diag = ui.DIALOG.getCurrent()
               LET g_detail_idx${general_page_idx${page}} = DIALOG.getCurrentRow("${sr_name${page}}")
               LET l_ac = g_detail_idx${general_page_idx${page}}
               CALL ${general_prefix}_idx_chk('d')
               LET g_master.* = ${detail_var_title}[g_detail_idx].*
               CALL cl_show_fld_cont() 
               
            #自訂ACTION(detail_show,page_${page})
            ${detail_saction_choice${page}}
               
         END DISPLAY
         #pages -  End  -
      
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
    
         BEFORE DIALOG
            LET g_curr_diag = ui.DIALOG.getCurrent()         
            CALL DIALOG.setSelectionMode("${sr_name}", 1)
            IF g_detail_idx > 0 THEN
               IF g_detail_idx > ${detail_var_title}.getLength() THEN
                  LET g_detail_idx = ${detail_var_title}.getLength()
               END IF
               CALL DIALOG.setCurrentRow("${sr_name}", g_detail_idx)
               LET l_ac = g_detail_idx
            END IF 
            LET g_detail_idx = l_ac
            #add-point:ui_dialog段before name="ui_dialog.b_dialog"
            {<point name="ui_dialog.b_dialog"/>}
            #end add-point  
            NEXT FIELD CURRENT
        
         AFTER DIALOG
            #add-point:ui_dialog段after dialog name="ui_dialog.after_dialog"
            {<point name="ui_dialog.after_dialog"/>}
            #end add-point
         
      ON ACTION exporttoexcel
         LET g_action_choice="exporttoexcel"
         IF cl_auth_chk_act("exporttoexcel") THEN
            CALL g_export_node.clear()
            LET g_export_node[1] = base.typeInfo.create(${detail_var_title})
            LET g_export_id[1]   = "${sr_name}"
            #pages - Start - 
            LET g_export_node[${page}] = base.typeInfo.create(${detail_var_title${page}})
            LET g_export_id[${page}]   = "${sr_name${page}}"
            #pages -  End  -
            #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
            {<point name="menu.exporttoexcel" />}
            #END add-point
            CALL cl_export_to_excel_getpage()
            CALL cl_export_to_excel()
         END IF
         
         ${general_action_call}
      
         ON ACTION close
            LET INT_FLAG=FALSE         
            LET g_action_choice="exit"
            CANCEL DIALOG
      
         ON ACTION exit
            LET g_action_choice="exit"
            CANCEL DIALOG
           
         ${general_menu_signature}
         
         ${detail_related_document}
      
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
         #交談指令共用ACTION
         &include "common_action.4gl"
            CONTINUE DIALOG
      END DIALOG
      
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         EXIT WHILE
      END IF
      
   END WHILE
 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.query" >}
#+ QBE資料查詢
PRIVATE FUNCTION ${general_prefix}_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   {<point name="query.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   DEFINE ls_wc      STRING
   DEFINE ls_return  STRING
   DEFINE ls_result  STRING 
   #add-point:query段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   {<point name="query.define"/>}
   #end add-point 
   
   #add-point:Function前置處理  name="query.pre_function"
   {<point name="query.pre_function"/>}
   #end add-point
   
   LET INT_FLAG = 0
   CLEAR FORM
   CALL ${detail_var_title}.clear()
   #pages - Start -
   CALL ${detail_var_title${page}}.clear()
   #pages -  End  -
   
   LET g_qryparam.state = "c"
   
   #wc備份
   LET ls_wc = g_wc
   LET g_detail_idx = l_ac
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #單身根據table分拆construct
      CONSTRUCT g_wc_table ON ${detail_tbl_fields_qbe}
           FROM ${detail_tbl_srfield_all}
                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct name="cs.head.before_construct"
            {<point name="cs.head.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       ${detail_commons_ctrlp}
         
       #單身一般欄位開窗相關處理
       ${detail_tbl_fields_ctrlp}   
       
      END CONSTRUCT
      
      #tables - Start - 
      CONSTRUCT g_wc_table${table} ON ${detail_tbl_fields_qbe${table}}
           FROM ${detail_tbl_srfield_all${table}}
                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct name="cs.head${table}.before_construct"
            {<point name="cs.head${table}.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table ${table})
       ${detail_commons_ctrlp${table}}
       
       #單身一般欄位開窗相關處理       
       ${detail_tbl_fields_ctrlp${table}}   
       
      END CONSTRUCT
      #tables -  End  -
      
      #tables_d2 - Start - 
      CONSTRUCT g_wc2_table${table} ON ${detail_tbl_fields_qbe${table}}
           FROM ${detail_tbl_srfield_all${table}}
                      
         BEFORE CONSTRUCT
            #add-point:cs段more_construct name="cs.body${table}.before_construct"
            {<point name="cs.body${table}.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table ${table})
       ${detail_commons_ctrlp${table}}
       
       #單身一般欄位開窗相關處理       
       ${detail_tbl_fields_ctrlp${table}}   
       
      END CONSTRUCT
      #tables -  End  -
  
      #add-point:query段more_construct name="query.more_construct"
      {<point name="query.more_construct"/>}
      #end add-point 
      
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="query.b_dialog"
         {<point name="query.b_dialog"/>}
         #end add-point  
 
      ON ACTION qbe_select     #條件查詢
         CALL cl_qbe_list('m') RETURNING ls_wc
 
      ON ACTION qbe_save       #條件儲存
         CALL cl_qbe_save()
      
      ON ACTION accept
         ACCEPT DIALOG
         
      ON ACTION cancel
         LET INT_FLAG = 1
         CANCEL DIALOG
      
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE DIALOG 
   END DIALOG
 
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      #還原
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      LET g_wc2 = " 1=2"
      RETURN
   ELSE
      #資料導回第一筆
      LET g_detail_idx  = 1
      LET g_detail_idx2 = 1
   END IF
   
   LET g_wc = g_wc_table 
              #tables - Start - 
              , " AND ", g_wc_table${table}
              #tables -  End  - 
              #tables_d2 - Start - 
              , " AND ", g_wc2_table${table}
              #tables -  End  - 
        
   LET g_wc2 = " 1=1"
               #tables_d2 - Start - 
               , " AND ", g_wc2_table${table}
               #tables -  End  - 
        
   #add-point:cs段after_construct name="cs.after_construct"
   {<point name="cs.after_construct"/>}
   #end add-point
   
   LET g_error_show = 1
   CALL ${general_prefix}_b_fill(g_wc)
   LET l_ac = g_detail_idx
   
   CALL ${general_prefix}_fetch()
   IF g_detail_cnt = 0 AND NOT INT_FLAG THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = -100 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   END IF
 
   #資料導回第一筆(假設有資料)
   IF ${detail_var_title}.getLength() > 0 THEN
      DISPLAY g_detail_idx  TO FORMONLY.h_index
   ELSE
      DISPLAY ' ' TO FORMONLY.h_index
   END IF
   IF ${detail_first_page_name}.getLength() > 0 THEN
      DISPLAY g_detail_idx2 TO FORMONLY.idx
   ELSE
      DISPLAY ' ' TO FORMONLY.idx
   END IF
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.insert" >}
#+ 資料修改
PRIVATE FUNCTION ${general_prefix}_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   {<point name="insert.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   #add-point:insert段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   {<point name="insert.define"/>}
   #end add-point 
   
   #add-point:Function前置處理  name="insert.before_insert"
   {<point name="insert.before_insert"/>}
   #end add-point 
   
   LET g_insert = 'Y'
   CALL ${general_prefix}_input('a')
   
   #add-point:insert段新增後 name="insert.after_insert"
   {<point name="insert.after_insert"/>}
   #end add-point 
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.modify" >}
#+ 資料新增
PRIVATE FUNCTION ${general_prefix}_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   {<point name="modify.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   DEFINE l_ac_t LIKE type_t.num10
   #add-point:modify段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   {<point name="modify.define"/>}
   #end add-point 
  
   #add-point:Function前置處理  name="modify.pre_function"
   {<point name="modify.pre_function"/>}
   #end add-point
   
   LET l_ac_t = g_detail_idx
 
   #add-point:modify段新增前 name="modify.before_modify"
   {<point name="modify.before_modify"/>}
   #end add-point 
   
   #進入資料輸入段落
   CALL ${general_prefix}_input('u')
    
   IF INT_FLAG AND ${detail_var_title}.getLength() > 0 THEN
      LET g_detail_idx = l_ac_t
      LET l_ac = l_ac_t
      CALL ${general_prefix}_b_fill(g_wc)
      CALL ${general_prefix}_detail_show() 
   END IF
   
   #add-point:modify段新增後 name="modify.after_modify"
   {<point name="modify.after_modify"/>}
   #end add-point 
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.delete" >}
#+ 資料刪除
PRIVATE FUNCTION ${general_prefix}_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   {<point name="delete.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   DEFINE li_ac LIKE type_t.num10
   #add-point:delete段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   {<point name="delete.define"/>}
   #end add-point 
   
   #add-point:Function前置處理  name="delete.pre_function"
   {<point name="delete.pre_function"/>}
   #end add-point
   
   IF NOT cl_ask_delete() THEN
      #不刪除
      RETURN
   END IF
   
   LET li_ac = ARR_CURR()
   LET ${detail_var_title}_t.* = ${detail_var_title}[li_ac].*
   LET ${detail_var_title}_o.* = ${detail_var_title}[li_ac].*
   
   CALL s_transaction_begin()  
   
   #add-point:delete段刪除前 name="delete.before_delete"
   {<point name="delete.before_delete" mark="Y"/>}
   #end add-point 
   
   #刪除單頭
   DELETE FROM ${detail_tbl_name} 
         WHERE ${detail_append_wc}
           ${detail_field_pk01} = ${detail_var_title}_t.${detail_field_pk01}
           #detail_keys - Start -
           AND ${detail_field_pk${key}} = ${detail_var_title}_t.${detail_field_pk${key}}
           #keys -  End  -
           
   #add-point:delete段刪除中 name="delete.m_delete"
   {<point name="delete.m_delete"/>}
   #end add-point 
           
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   ${detail_related_document_remove_func}    
   
   #add-point:delete段刪除後 name="delete.after_delete"
   {<point name="delete.after_delete"/>}
   #end add-point 
   
   #刪除單頭
   #tables_d2 - Start -
   #add-point:delete段刪除前 name="delete.before_delete${table}"
   {<point name="delete.before_delete${table}" mark="Y"/>}
   #end add-point 
   DELETE FROM ${detail_tbl_name_by_tbl${table}} 
         WHERE ${detail_append_wc_by_tbl${table}}
           ${detail_by_tbl${table}_field_fk01} = ${detail_var_title}_t.${detail_field_pk01}
           #detail_keys - Start -
           AND ${detail_by_tbl${table}_field_fk${key}} = ${detail_var_title}_t.${detail_field_pk${key}}
           #keys -  End  -
   #add-point:delete段刪除中 name="delete.m_delete${table}"
   {<point name="delete.m_delete${table}"/>}
   #end add-point 
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   ELSE
      CALL s_transaction_end('Y','0')
   END IF
   #add-point:delete段刪除後 name="delete.after_delete${table}"
   {<point name="delete.after_delete${table}"/>}
   #end add-point 
   #tables -  End  -
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.input" >}
#+ 資料輸入
PRIVATE FUNCTION ${general_prefix}_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   {<point name="input.define_customerization" edit="c" mark="Y"/>}
   #end add-point 
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_ac_t                LIKE type_t.num10               #未取消的ARRAY CNT 
   DEFINE  l_n                   LIKE type_t.num10               #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10               #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   #add-point:input段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   {<point name="input.define"/>}
   #end add-point 
   
   #add-point:Function前置處理  name="input.pre_function"
   {<point name="input.pre_function"/>}
   #end add-point
   
   LET g_action_choice = ""
   
   LET g_qryparam.state = "i"
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
 
   #add-point:input段define_sql name="input.define_sql"
   {<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "${detail_sql_forupd}"
   #add-point:input段define_sql name="input.after_define_sql"
   {<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE ${general_prefix}_bcl CURSOR FROM g_forupd_sql      # LOCK CURSOR
   
   #tables - Start -
   #add-point:input段define_sql name="input.define_sql${table}"
   {<point name="input.define_sql${table}" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "${detail_sql_forupd${table}}"
   #add-point:input段define_sql name="input.after_define_sql${table}"
   {<point name="input.after_define_sql${table}"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE ${detail_table_bcl${table}} CURSOR FROM g_forupd_sql
   #tables -  End  -
   
   #tables_d2 - Start -
   #add-point:input段define_sql name="input.define_sql${table}"
   {<point name="input.define_sql${table}" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "${detail_sql_forupd${table}}"
   #add-point:input段define_sql name="input.after_define_sql${table}"
   {<point name="input.after_define_sql${table}"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   DECLARE ${detail_table_bcl${table}} CURSOR FROM g_forupd_sql
   #tables -  End  -
 
   LET lb_reproduce = FALSE
   LET l_insert = FALSE
      
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:input段修改前 name="input.before_input"
   {<point name="input.before_input"/>}
   #end add-point
 
   LET INT_FLAG = 0
 
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
      #Page1 預設值產生於此處
      INPUT ARRAY ${detail_var_title} FROM ${sr_name}.*
          ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                  INSERT ROW = ${detail_allow_insert},
                  DELETE ROW = ${detail_allow_delete},
                  APPEND ROW = ${detail_allow_append})
 
         #自訂ACTION(detail_input,page_1)
         ${detail_iaction_call}
         
         BEFORE INPUT
            ${detail_page_input}
            LET g_current_page = 1
            IF p_cmd = 'u' THEN
               CALL ${general_prefix}_b_fill(g_wc)
            END IF
            LET g_loc = 'm'
            LET g_detail_cnt = ${detail_var_title}.getLength()
            #add-point:資料輸入前 name="input.body.before_input"
            {<point name="input.body.before_input"/>}
            #end add-point
            
         BEFORE ROW
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_ac_last = l_ac
            LET l_insert = FALSE
            LET g_detail_idx = l_ac
            LET g_master_t.* = ${detail_var_title}[l_ac].*
            LET g_master.* = ${detail_var_title}[l_ac].*
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            LET g_detail_idx = l_ac
         
            CALL s_transaction_begin()
            LET g_detail_cnt = ${detail_var_title}.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND ${detail_var_title}[l_ac].${detail_field_pk01} IS NOT NULL
               #detail_keys - Start -
               AND ${detail_var_title}[l_ac].${detail_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN
               LET l_cmd='u'
               LET ${detail_var_title}_t.* = ${detail_var_title}[l_ac].*  #BACKUP
               LET ${detail_var_title}_o.* = ${detail_var_title}[l_ac].*  #BACKUP
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name}") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${general_prefix}_bcl INTO ${detail_vars_all}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = ${detail_var_title}_t.${detail_field_pk01},":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
 
                  #遮罩相關處理
                  LET ${detail_var_title}_mask_o[l_ac].* =  ${detail_var_title}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name}_mask()
                  LET ${detail_var_title}_mask_n[l_ac].* =  ${detail_var_title}[l_ac].*
                  
                  CALL cl_show_fld_cont()
                  #CALL ${general_prefix}_detail_show()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            #add-point:input段before row name="input.body.before_row"
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak}
            #其他table進行lock
            ${detail_multi_table_lock1}
            #讀取對應的單身資料
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch()
            CALL ${general_prefix}_idx_chk('m')
 
         BEFORE INSERT
            ${detail_multi_table_bak}
            #判斷能否在此頁面進行資料新增
            ${detail_page_insert}
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            #清空下層單身
            ${detail_insert_clear}
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title}_t.* TO NULL 
            INITIALIZE ${detail_var_title}_o.* TO NULL 
            #公用欄位給值(單身)
            ${detail_insert_define}
            ${detail_fields_default}
            #add-point:modify段before備份 name="input.body.before_bak"
            {<point name="input.body.before_bak"/>}
            #end add-point
            LET ${detail_var_title}_t.* = ${detail_var_title}[l_ac].*     #新輸入資料
            LET ${detail_var_title}_o.* = ${detail_var_title}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce}
               LET ${detail_var_title}[${detail_var_title}.getLength()].${detail_field_pk01} = NULL
               #detail_keys - Start -
               LET ${detail_var_title}[${detail_var_title}.getLength()].${detail_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            #add-point:input段before insert name="input.body.before_insert"
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
            LET l_insert = FALSE
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name} 
             WHERE ${detail_append_wc} ${detail_field_pk01} = ${detail_var_title}[l_ac].${detail_field_pk01} 
                                       #detail_keys - Start -
                                       AND ${detail_field_pk${key}} = ${detail_var_title}[l_ac].${detail_field_pk${key}} 
                                       #keys -  End  -
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               {<point name="input.body.b_insert"/>}
               #end add-point
            
               ${detail_ins_Sync}
                           
               #add-point:單身新增後 name="input.body.a_insert"
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill(g_wc)
               #資料多語言用-增/改
               ${detail_multi_language1}
               #add-point:input段-after_insert name="input.body.a_insert2"
               {<point name="input.body.a_insert2"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ##ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
               LET g_master.* = ${detail_var_title}[l_ac].*
            END IF
              
         BEFORE DELETE  #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               {<point name="input.body.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               {<point name="input.body.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code =  -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               {<point name="input.body.b_delete" mark="Y"/>}
               #end add-point
               
               DELETE FROM ${detail_tbl_name}
                WHERE ${detail_append_wc} 
                      ${detail_field_pk01} = ${detail_var_title}_t.${detail_field_pk01}
                      #detail_keys - Start -
                      AND ${detail_field_pk${key}} = ${detail_var_title}_t.${detail_field_pk${key}}
                      #keys -  End  -
                      
               #add-point:單身刪除中 name="input.body.m_delete"
               {<point name="input.body.m_delete"/>}
               #end add-point
                      
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE  
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  ${detail_multi_table_delete1}
                  #add-point:單身刪除後 name="input.body.a_delete"
                  {<point name="input.body.a_delete"/>}
                  #end add-point
                  #修改歷程記錄(刪除)
                  LET g_log1 = util.JSON.stringify(${detail_var_title}[l_ac])   #(ver:45)
                  IF NOT cl_log_modified_record(g_log1,'') THEN   #(ver:45)
                     CALL s_transaction_end('N','0')
                  ELSE
                     CALL s_transaction_end('Y','0')
                  END IF
               END IF 
               CLOSE ${general_prefix}_bcl
               LET l_count = ${detail_var_title}.getLength()
               ${detail_del_Sync_pre}    
               ${detail_related_document_remove}        
            END IF 
              
         AFTER DELETE 
            IF l_cmd <> 'd' THEN
               #add-point:單身刪除後2 name="input.body.after_delete"
               {<point name="input.body.after_delete"/>}
               #end add-point
               ${detail_del_Sync_post}
            END IF
            #如果是最後一筆
            IF l_ac = (${detail_var_title}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         ${detail_fields_check1}
         ${detail_fields_ctrlp1_i}
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
               CLOSE ${general_prefix}_bcl
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = ${detail_var_title}[l_ac].${detail_field_pk01} 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
            ELSE
               
               #寫入修改者/修改日期資訊(單身)
               ${detail_upder_define}
               
               #add-point:單身修改前 name="input.body.b_update"
               {<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name}_mask_restore('restore_mask_o')
      
               UPDATE ${detail_tbl_name} SET (${detail_fields_update}) = (${detail_vars_update})
                WHERE ${detail_append_wc}
                  ${detail_field_pk01} = ${detail_var_title}_t.${detail_field_pk01} #項次   
                  #detail_keys - Start -
                  AND ${detail_field_pk${key}} = ${detail_var_title}_t.${detail_field_pk${key}}  
                  #keys -  End  -
                  
               #add-point:單身修改中 name="input.body.m_update"
               {<point name="input.body.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL s_transaction_end('N','0')
                     LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     ${detail_upd_Sync}
                     #資料多語言用-增/改
                     ${detail_multi_language1}
                     
                     #將遮罩欄位進行遮蔽
                     CALL ${general_prefix}_${detail_tbl_name}_mask_restore('restore_mask_n')
                     #修改歷程記錄(修改)
                     LET g_log1 = util.JSON.stringify(${detail_var_title}_t)
                     LET g_log2 = util.JSON.stringify(${detail_var_title}[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               
               #若Key欄位有變動
               LET g_master.* = ${detail_var_title}[l_ac].*
               CALL ${general_prefix}_key_update_b()
               
               #add-point:單身修改後 name="input.body.a_update"
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            CALL ${general_prefix}_unlock_b("${detail_tbl_name}")
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
               END IF
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
            CALL s_transaction_end('Y','0')
            #其他table進行unlock
            ${detail_multi_table_unlock1}
            IF l_cmd = 'u' AND INT_FLAG THEN
               LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
            END IF
            LET l_cmd = ''
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            {<point name="input.body.after_input"/>}
            #end add-point
            #錯誤訊息統整顯示
            #CALL cl_err_collect_show()      
            #CALL cl_showmsg()            
    
         ON ACTION controlo   
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce}
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk01} = NULL
               #detail_keys - Start -
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title}.getLength()+1
            END IF
            
      END INPUT
      
      #pages_input - Start - 
      INPUT ARRAY ${detail_var_title${page}} FROM ${sr_name${page}}.*
         ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = ${detail_allow_insert${page}}, ${detail_allow_insert_desc}
                 DELETE ROW = ${detail_allow_delete${page}},
                 APPEND ROW = ${detail_allow_append${page}})
                 
         #自訂ACTION(detail_input,page_${page})
         ${detail_iaction_call${page}}
         
         BEFORE INPUT
            IF ${detail_var_title}.getLength() = 0 THEN
               NEXT FIELD ${detail_field_pk01}
            END IF 
            LET g_loc = 'm'
            LET g_current_page = ${page}
            ${detail_page_input${page}}
            CALL ${general_prefix}_b_fill(g_wc)
            LET g_detail_cnt = ${detail_var_title${page}}.getLength()
            #add-point:資料輸入前 name="input.body${page_id}.before_input"
            {<point name="input.body${page_id}.before_input"/>}
            #end add-point
  
         BEFORE INSERT
            #判斷能否在此頁面進行資料新增
            ${detail_page_insert${page}}
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            #清空下層單身
            ${detail_insert_clear}
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title${page}}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title${page}}_t.* TO NULL 
            INITIALIZE ${detail_var_title${page}}_o.* TO NULL 
            #公用欄位給值(單身${page})
            ${detail_insert_define${page}}
            ${detail_fields_default${page}}
            #add-point:modify段before備份 name="input.body${page_id}.before_bak"
            {<point name="input.body${page_id}.before_bak"/>}
            #end add-point
            LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            #add-point:input段before insert name="input.body${page_id}.before_insert"
            {<point name="input.body${page_id}.before_insert"/>}
            #end add-point 
        
         BEFORE ROW 
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET l_insert = FALSE
            LET g_detail_idx = l_ac
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            CALL s_transaction_begin()
            LET g_detail_cnt = ${detail_var_title${page}}.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01} IS NOT NULL
               #detail_page_keys - Start -
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN 
               LET l_cmd='u'
               LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name${page}}") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${detail_page_bcl${page}} INTO ${detail_vars_all${page}}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
                  LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  
                  CALL cl_show_fld_cont()
                  #CALL ${general_prefix}_detail_show()
               END IF
               LET g_master_t.* = ${detail_var_title}[l_ac].*
            ELSE
               LET l_cmd='a'
            END IF
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            #add-point:input段before row name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak${page}}
            #其他table進行lock
            ${detail_multi_table_lock${page}}
            CALL ${general_prefix}_idx_chk('m')
            
         BEFORE DELETE                            
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body${page_id}.after_delete_d"
               {<point name="input.body${page_id}.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body${page_id}.b_delete_ask"
               {<point name="input.body${page_id}.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code =  -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身${page}刪除前 name="input.body${page_id}.b_delete"
               {<point name="input.body${page_id}.b_delete" mark="Y"/>}
               #end add-point    
               
               DELETE FROM ${detail_tbl_name${page}}
                WHERE ${detail_append_wc${page}}
                      ${detail${page}_field_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01}
                      #detail_page_keys - Start -
                      AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                      #keys -  End  -
                      
               #add-point:單身${page}刪除中 name="input.body${page_id}.m_delete"
               {<point name="input.body${page_id}.m_delete"/>}
               #end add-point  
                      
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  ${detail_multi_table_delete${page}}
                  #add-point:單身${page}刪除後 name="input.body${page_id}.a_delete"
                  {<point name="input.body${page_id}.a_delete"/>}
                  #end add-point
                  #修改歷程記錄(刪除)
                  LET g_log1 = util.JSON.stringify(${detail_var_title${page}}[l_ac])   #(ver:45)
                  IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:45)
                     CALL s_transaction_end('N','0')
                  ELSE
                     CALL s_transaction_end('Y','0')
                  END IF
               END IF 
               CLOSE ${general_prefix}_bcl
               LET l_count = ${detail_var_title}.getLength()
               ${detail_del_Sync_pre${page}}            
               ${detail_related_document_remove}
            END IF 
 
         AFTER DELETE 
            IF l_cmd <> 'd' THEN
               #add-point:單身AFTER DELETE  name="input.body${page_id}.after_delete"
               {<point name="input.body${page_id}.after_delete"/>}
               #end add-point
               ${detail_del_Sync_post${page}}
            END IF
            #如果是最後一筆
            IF l_ac = (${detail_var_title${page}}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
            
         AFTER INSERT    
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
            LET l_insert = FALSE
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name${page}} 
             WHERE ${detail_append_wc${page}}
                   ${detail${page}_field_pk01} = ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01}
                   #detail_page_keys - Start -
                   AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}}
                   #keys -  End  -
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身${page}新增前 name="input.body${page_id}.b_insert"
               {<point name="input.body${page_id}.b_insert"/>}
               #end add-point
            
               ${detail_ins_Sync${page}}
                           
               #add-point:單身新增後${page} name="input.body${page_id}.a_insert"
               {<point name="input.body${page_id}.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill(g_wc)
               #資料多語言用-增/改
               ${detail_multi_language${page}}
               #add-point:單身新增後 name="input.body${page_id}.after_insert"
               {<point name="input.body${page_id}.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ##ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
               LET g_master.* = ${detail_var_title}[l_ac].*
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               CLOSE ${detail_page_bcl${page}}
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
            ELSE
 
               #寫入修改者/修改日期資訊(單身${page})
               ${detail_upder_define${page}}
               
               #add-point:單身page${page}修改前 name="input.body${page_id}.b_update"
               {<point name="input.body${page_id}.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_o')
               
               UPDATE ${detail_tbl_name${page}} SET (${detail_fields_update${page}}) = (${detail_vars_update${page}}) #自訂欄位頁簽
                WHERE ${detail_append_wc${page}}
                  ${detail${page}_field_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01} #項次 
                  #detail_page_keys - Start -
                  AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                  #keys -  End  -
                  
               #add-point:單身修改中 name="input.body${page_id}.m_update"
               {<point name="input.body${page_id}.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL s_transaction_end('N','0')
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE  
                     ${detail_upd_Sync${page}}
                     #資料多語言用-增/改
                     ${detail_multi_language${page}}
                     
                     #將遮罩欄位進行遮蔽
                     CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_n')
                     #修改歷程記錄(修改)
                     LET g_log1 = util.JSON.stringify(${detail_var_title${page}}_t)
                     LET g_log2 = util.JSON.stringify(${detail_var_title${page}}[l_ac])
                     IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               #add-point:單身page${page}修改後 name="input.body${page_id}.a_update"
               {<point name="input.body${page_id}.a_update"/>}
               #end add-point
            END IF
         
         ${detail_fields_check${page}}
         ${detail_fields_ctrlp${page}_i}
 
         AFTER ROW
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               END IF
               CLOSE ${detail_page_bcl${page}}
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
            
            #其他table進行unlock
            ${detail_multi_table_unlock${page}}
 
            CALL ${general_prefix}_unlock_b("${detail_tbl_name${page}}")
            CALL s_transaction_end('Y','0')
            IF l_cmd = 'u' AND INT_FLAG THEN
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
            END IF
            LET l_cmd = ''
 
         AFTER INPUT
            #add-point:input段after input  name="input.body${page_id}.after_input"
            {<point name="input.body${page_id}.after_input"/>}
            #end add-point   
 
         ON ACTION controlo   
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title${page}}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title${page}}.getLength()+1
            END IF
 
      END INPUT
      #pages -  End  -
      
      #pages_input_d - Start - 
      #實際單身段落
      INPUT ARRAY ${detail_var_title${page}} FROM ${sr_name${page}}.*
         ATTRIBUTE(COUNT = g_detail_cnt,MAXCOUNT = g_max_rec,WITHOUT DEFAULTS, 
                 INSERT ROW = ${detail_allow_insert${page}}, ${detail_allow_insert_desc}
                 DELETE ROW = ${detail_allow_delete${page}},
                 APPEND ROW = ${detail_allow_append${page}})
                 
         #自訂ACTION(detail_input,page_${page})
         ${detail_iaction_call${page}}
         
         BEFORE INPUT
            #檢查上層單身是否有資料
            IF cl_null(${detail_var_title}[g_detail_idx].${detail_field_pk01}) THEN
               NEXT FIELD ${detail_first_field}
            END IF
            ${detail_page_input${page}}
            LET g_loc = 'd'
            LET g_detail_cnt = ${detail_var_title${page}}.getLength()
            LET g_current_page = ${page}
            #add-point:資料輸入前 name="input.body${page_id}.before_input"
            {<point name="input.body${page_id}.before_input"/>}
            #end add-point
 
         BEFORE INSERT
            IF ${detail_var_title}.getLength() = 0 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 'std-00013' 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               NEXT FIELD ${detail_field_pk01}
            END IF 
            #判斷能否在此頁面進行資料新增
            ${detail_page_insert${page}}
            IF s_transaction_chk("N",0) THEN
               CALL s_transaction_begin()
            END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title${page}}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title${page}}_t.* TO NULL 
            INITIALIZE ${detail_var_title${page}}_o.* TO NULL 
            ${detail_fields_default${page}}
            #add-point:modify段before備份 name="input.body${page_id}.before_bak"
            {<point name="input.body${page_id}.before_bak"/>}
            #end add-point
            LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            #add-point:input段before insert name="input.body${page_id}.before_insert"
            {<point name="input.body${page_id}.before_insert"/>}
            #end add-point  
            
         BEFORE ROW 
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET l_insert = FALSE
            LET g_detail_idx2 = l_ac
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            CALL s_transaction_begin()
            LET g_detail_cnt = ${detail_var_title${page}}.getLength()
            
            IF g_detail_cnt >= l_ac 
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01} IS NOT NULL
               #detail_page_keys - Start -
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN 
               LET l_cmd='u'
               LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name${page}}") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${detail_page_bcl${page}} INTO ${detail_vars_all${page}}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
                  LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  
                  CALL cl_show_fld_cont()
                  #CALL ${general_prefix}_detail_show()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            CALL ${general_prefix}_set_entry_b(l_cmd)
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            #add-point:input段before row name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak${page}}
            #其他table進行lock
            ${detail_multi_table_lock${page}}
            CALL ${general_prefix}_idx_chk('d')
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body${page_id}.after_delete_d"
               {<point name="input.body${page_id}.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body${page_id}.b_delete_ask"
               {<point name="input.body${page_id}.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code =  -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身${page}刪除前 name="input.body${page_id}.b_delete"
               {<point name="input.body${page_id}.b_delete" mark="Y"/>}
               #end add-point  
               
               DELETE FROM ${detail_tbl_name${page}}
                WHERE ${detail_append_wc${page}}
                   ${detail${page}_field_fk01} = ${master_var_pk01}
                   #master_page_keys - Start -
                   AND ${detail${page}_field_fk${key}} = ${master_var_pk${key}}
                   #keys -  End  -
                   AND ${detail${page}_field_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01}
                   #detail_page_keys - Start -
                   AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                   #keys -  End  -
                   
               #add-point:單身${page}刪除中 name="input.body${page_id}.m_delete"
               {<point name="input.body${page_id}.m_delete"/>}
               #end add-point  
                   
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  CALL s_transaction_end('N','0')
                  CALL cl_err()
                  CANCEL DELETE   
               ELSE
                  LET g_detail_cnt = g_detail_cnt-1
                  ${detail_multi_table_delete${page}}
                  #add-point:單身${page}刪除後 name="input.body${page_id}.a_delete"
                  {<point name="input.body${page_id}.a_delete"/>}
                  #end add-point
                  CALL s_transaction_end('Y','0')
               END IF 
               CLOSE ${general_prefix}_bcl
               LET l_count = ${detail_var_title}.getLength()
               ${detail_del_Sync_pre${page}}
            END IF 
            
         AFTER DELETE 
            IF l_cmd <> 'd' THEN
               #add-point:單身AFTER DELETE  name="input.body${page_id}.after_delete"
               {<point name="input.body${page_id}.after_delete"/>}
               #end add-point
               ${detail_del_Sync_post${page}}
            END IF
            #如果是最後一筆
            IF l_ac = (${detail_var_title${page}}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
    
         AFTER INSERT    
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
            LET l_insert = FALSE   
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name${page}} 
             WHERE ${detail_append_wc${page}}
                   ${detail${page}_field_fk01} = ${master_var_pk01}
                   #master_page_keys - Start -
                   AND ${detail${page}_field_fk${key}} = ${master_var_pk${key}}
                   #keys -  End  -
                   AND ${detail${page}_field_pk01} = ${detail${page}_var_pk01}
                   #detail_page_keys - Start -
                   AND ${detail${page}_field_pk${key}} = ${detail${page}_var_pk${key}}
                   #keys -  End  -
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身${page}新增前 name="input.body${page_id}.b_insert"
               {<point name="input.body${page_id}.b_insert"/>}
               #end add-point
            
               ${detail_ins_Sync${page}}
                           
               #add-point:單身新增後${page} name="input.body${page_id}.a_insert"
               {<point name="input.body${page_id}.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLcode  THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill(g_wc)
               #資料多語言用-增/改
               ${detail_multi_language${page}}
               #add-point:單身新增後 name="input.body${page_id}.after_insert"
               {<point name="input.body${page_id}.after_insert"/>}
               #end add-point
               CALL s_transaction_end('Y','0')
               ##ERROR 'INSERT O.K'
               LET g_detail_cnt = g_detail_cnt + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               CLOSE ${detail_page_bcl${page}}
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
            ELSE
               #寫入修改者/修改日期資訊(單身${page})
               ${detail_upder_define${page}}
               
               #add-point:單身page${page}修改前 name="input.body${page_id}.b_update"
               {<point name="input.body${page_id}.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_o')
               
               UPDATE ${detail_tbl_name${page}} SET (${detail_fields_update${page}}) = (${detail_vars_update${page}}) #自訂欄位頁簽
                WHERE ${detail_append_wc${page}}
                   ${detail${page}_field_fk01} = ${master_var_pk01}
                   #master_page_keys - Start -
                   AND ${detail${page}_field_fk${key}} = ${master_var_pk${key}}
                   #keys -  End  -
                   AND ${detail${page}_field_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01}
                   #detail_page_keys - Start -
                   AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                   #keys -  End  -
                   
               #add-point:單身修改中 name="input.body${page_id}.m_update"
               {<point name="input.body${page_id}.m_update"/>}
               #end add-point
                   
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     CALL s_transaction_end('N','0')
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     ${detail_upd_Sync${page}}
                     #資料多語言用-增/改
                     ${detail_multi_language${page}}
                     
                     #將遮罩欄位進行遮蔽
                     CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_n')
                     #修改歷程記錄(下層修改)
                     LET g_log1 = util.JSON.stringify(${detail_var_title${page}}_t)
                     LET g_log2 = util.JSON.stringify(${detail_var_title${page}}[l_ac])
                     IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                        CALL s_transaction_end('N','0')
                     END IF
               END CASE
               #add-point:單身page${page}修改後 name="input.body${page_id}.a_update"
               {<point name="input.body${page_id}.a_update"/>}
               #end add-point
            END IF
         
         ${detail_fields_check${page}}
         ${detail_fields_ctrlp${page}_i}
 
         AFTER ROW
            LET l_ac = ARR_CURR()
            LET l_ac_t = l_ac
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               END IF
               CLOSE ${detail_page_bcl${page}}
               CALL s_transaction_end('N','0')
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               CANCEL DIALOG 
            END IF
            
            #其他table進行unlock
            ${detail_multi_table_unlock${page}}
 
            CALL ${general_prefix}_unlock_b("${detail_tbl_name${page}}")
            CALL s_transaction_end('Y','0')
            LET l_cmd = ''
 
         AFTER INPUT
            #add-point:input段after input  name="input.body${page_id}.after_input"
            {<point name="input.body${page_id}.after_input"/>}
            #end add-point   
 
         ON ACTION controlo   
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title${page}}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title${page}}.getLength()+1
            END IF
 
      END INPUT
      #pages -  End  -
      
      #pages_display - Start -
      DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.*
         ATTRIBUTES(COUNT=g_detail_cnt)  
      
         BEFORE DISPLAY 
            CALL FGL_SET_ARR_CURR(g_detail_idx${general_page_idx${page}})
            CALL ${general_prefix}_b_fill(g_wc)
            LET g_current_page = ${page}
        
         BEFORE ROW
            LET g_detail_idx${general_page_idx${page}} = DIALOG.getCurrentRow("${sr_name${page}}")
            LET l_ac = g_detail_idx
            CALL cl_show_fld_cont() 
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch()
            CALL ${general_prefix}_idx_chk('m')
            
         #add-point:page${page}自定義行為 name="input.body${page_id}.action"
         {<point name="input.body${page_id}.action"/>}
         #end add-point
            
      END DISPLAY
      #pages -  End  -
    
      #pages_display_d - Start -
      DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.*
         ATTRIBUTES(COUNT=g_detail_cnt)  
      
         BEFORE DISPLAY 
            CALL FGL_SET_ARR_CURR(g_detail_idx${general_page_idx${page}})
            LET g_current_page = ${page}
            
         BEFORE ROW
            LET g_detail_idx${general_page_idx${page}} = DIALOG.getCurrentRow("${sr_name${page}}")
            LET l_ac = g_detail_idx
            CALL cl_show_fld_cont() 
            CALL ${general_prefix}_idx_chk('d')
            
         #add-point:page${page}自定義行為 name="input.body${page_id}.action"
         {<point name="input.body${page_id}.action"/>}
         #end add-point
            
      END DISPLAY
      #pages -  End  -
      
      #add-point:input段input_array" name="input.more_inputarray"
      {<point name="input.more_inputarray"/>}
      #end add-point
      
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         LET g_curr_diag = ui.DIALOG.getCurrent()
         IF g_detail_idx > 0 THEN
            IF g_detail_idx > ${detail_var_title}.getLength() THEN
               LET g_detail_idx = ${detail_var_title}.getLength()
            END IF
            CALL DIALOG.setCurrentRow("${sr_name}", g_detail_idx)
            LET l_ac = g_detail_idx
         END IF 
         LET g_detail_idx = l_ac
         #add-point:input段input_array" name="input.before_dialog"
         {<point name="input.before_dialog"/>}
         #end add-point
         #先確定單頭(第一單身)是否有資料
         IF ${detail_var_title}.getLength() > 0 THEN
            CASE g_aw
               WHEN "${sr_name}"
                  NEXT FIELD ${detail_first_field}
               #pages - Start -
               WHEN "${sr_name${page}}"
                  NEXT FIELD ${detail_first_field${page}}
               #pages -  End  -   
            END CASE
         ELSE
            NEXT FIELD ${detail_first_field}
         END IF
            
      ON ACTION accept
         ACCEPT DIALOG
      
      ON ACTION cancel
         LET INT_FLAG = TRUE 
         CANCEL DIALOG
 
      ON ACTION close
         LET INT_FLAG = TRUE 
         CANCEL DIALOG
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) 
              RETURNING g_fld_name,g_frm_name 
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang) 
           
      #交談指令共用ACTION
      &include "common_action.4gl"
         CONTINUE DIALOG
   
   END DIALOG 
   
   CALL g_curr_diag.setCurrentRow("${sr_name}",g_detail_idx)
   #pages_m - Start - 
   CALL g_curr_diag.setCurrentRow("${sr_name${page}}",g_detail_idx)
   #pages -  End  -
   #pages_d - Start - 
   CALL g_curr_diag.setCurrentRow("${sr_name${page}}",g_detail_idx2)
   #pages -  End  -
   
   #add-point:input段修改後 name="input.after_input"
   {<point name="input.after_input"/>}
   #end add-point
 
   CLOSE ${general_prefix}_bcl
   CALL s_transaction_end('Y','0')
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION ${general_prefix}_b_fill(p_wc2)
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   {<point name="b_fill.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE p_wc2           STRING
   DEFINE l_ac_t          LIKE type_t.num10
   #add-point:b_fill段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   {<point name="b_fill.define"/>}
   #end add-point
   
   #add-point:Function前置處理  name="b_fill.sql_before"
   {<point name="b_fill.sql_before"/>}
   #end add-point
   
   LET g_sql = "${detail_fill_sql_pre} ${detail_reference_select_field} FROM ${detail_tbl_name} t0",
               #tables - Start - 
               "${detail_join_by_table${table}}",
               #tables -  End  -
               #tables_d2 - Start - 
               "${detail_join_by_table${table}}",
               #tables -  End  -
               "${detail_append_join_b_fill}",
               ${detail_reference_join_sql}
               "${detail_fill_sql_post} AND (", p_wc2, ") "
   #add-point:b_fill段sql_wc name="b_fill.sql_wc"
   {<point name="b_fill.sql_wc"/>}
   #end add-point
   LET g_sql = g_sql, cl_sql_add_filter("${detail_tbl_name}"),
                      " ORDER BY ${detail_field_order_by_tbl}"
  
   #add-point:b_fill段sql_after name="b_fill.sql_after"
   {<point name="b_fill.sql_after"/>}
   #end add-point
  
   #LET g_sql = cl_sql_add_tabid(g_sql,"${detail_tbl_name}")             #WC重組
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料  
   PREPARE ${general_prefix}_pb FROM g_sql
   DECLARE b_fill_curs CURSOR FOR ${general_prefix}_pb
   
   ${detail_using_ent}
 
   CALL ${detail_var_title}.clear()
   #pages - Start -
   CALL ${detail_var_title${page}}.clear()   
   #pages -  End  -
 
   LET g_cnt = l_ac
   LET l_ac = 1   
   ERROR "Searching!" 
 
   FOREACH b_fill_curs INTO ${detail_vars_all_by_tbl}${detail_reference_fetch_field}
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         EXIT FOREACH
      END IF
  
      #add-point:b_fill段資料填充 name="b_fill.fill"
      {<point name="b_fill.fill"/>}
      #end add-point
 
      IF l_ac > g_max_rec THEN
         IF g_error_show = 1 THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "" 
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
         END IF
         EXIT FOREACH
      END IF
      
      LET l_ac = l_ac + 1
      
   END FOREACH
   LET g_error_show = 0
   
   #tables - Start -
   LET g_sql = "${detail_fill_sql_pre${table}} ${detail_reference_select_field${table}} FROM ${detail_tbl_name_by_tbl${table}}",    
               "${detail_append_join_b_fill${table}}",
               ${detail_reference_join_sql${table}}
               "${detail_fill_sql_post${table}}"  ,
               " AND ${detail_by_tbl${table}_field_pk01_by_tbl} = ? ",
               #detail_keys - Start -
               " AND ${detail_by_tbl${table}_field_pk${key}_by_tbl} = ? "
               #keys -  End  -
 
   IF NOT cl_null(g_wc_table${table}) THEN
      LET g_sql = g_sql CLIPPED," AND ",g_wc_table${table} CLIPPED
   END IF
   #add-point:b_fill段sql_wc${table} name="b_fill.sql_wc${table}"
   {<point name="b_fill.sql_wc${table}"/>}
   #end add-point
   LET g_sql = g_sql, cl_sql_add_filter("${detail_tbl_name}"),
                      " ORDER BY ${detail_field_order_by_tbl${table}}"
 
   LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料    
   PREPARE ${general_prefix}_pb${table} FROM g_sql
   DECLARE b_fill_curs${table} CURSOR FOR ${general_prefix}_pb${table}
   
   FOR l_ac = 1 TO ${detail_var_title}.getLength()
      OPEN b_fill_curs${table} USING ${detail_var_append}${detail_var_allkeys}
      #(ver:45) ---start---
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()

         CALL ${detail_var_title}.clear()
         #pages - Start -
         CALL ${detail_var_title${page}}.clear()
         #pages -  End  -
         RETURN
      END IF
      #(ver:45) --- end ---

      FETCH b_fill_curs${table} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}} 
      IF SQLCA.SQLCODE THEN
         IF SQLCA.SQLCODE = 100 THEN 
            ${detail_fields_default_by_tbl${table}}
            #補足缺少的資料
            #add-point:b_fill段補充insert前 name="b_fill.before_insert"
            {<point name="b_fill.before_insert" mark="Y"/>}
            #end add-point
            INSERT INTO ${detail_name_by_table${table}}
                        (${detail_field_append_by_tbl${table}}
                         ${detail_field_pks_by_tbl${table}}
                         ${detail_field_others${table}}) 
                  VALUES(${detail_var_append_by_tbl${table}}
                         ${detail_var_pks}
                         ${detail_var_others${table}})
            #(ver:45) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()

               CALL ${detail_var_title}.clear()
               #pages - Start -
               CALL ${detail_var_title${page}}.clear()
               #pages -  End  -
               RETURN
            END IF
            #(ver:45) --- end ---
            #add-point:b_fill段補充insert後 name="b_fill.before_after"
            {<point name="b_fill.before_after"/>}
            #end add-point
         ELSE
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
         END IF
      END IF
   
      #add-point:b_fill段資料填充${table} name="b_fill.fill${table}"
      {<point name="b_fill.fill${table}"/>}
      #end add-point
      
   END FOR
   #tables -  End  -
   CALL ${detail_var_title}.deleteElement(${detail_var_title}.getLength())   
   #pages - Start -
   CALL ${detail_var_title${page}}.deleteElement(${detail_var_title${page}}.getLength())
   #pages -  End  - 
   
   #確定指標無超過上限, 超過則指到最後一筆
   IF g_detail_idx > ${detail_var_title}.getLength() THEN
       IF ${detail_var_title}.getLength() > 0 THEN
          LET g_detail_idx = ${detail_var_title}.getLength()
       ELSE
          LET g_detail_idx = 1
      END IF
   END IF
   
   #將key欄位填到每個page
   LET l_ac_t = g_detail_idx
   FOR g_detail_idx = 1 TO ${detail_var_title}.getLength()
      #pages - Start -
      ${general_detail_mark${page}}LET ${detail${page}_var_pk01} = ${detail_var_pk01} 
      #detail_page_keys - Start -
      ${general_detail_mark${page}}LET ${detail${page}_var_pk${key}} = ${detail_var_pk${key}} 
      #keys -  End  -
      #pages -  End  -
   END FOR
   LET g_detail_idx = l_ac_t
   
   #add-point:b_fill段資料填充(其他單身) name="b_fill.others.fill"
   {<point name="b_fill.others.fill"/>}
   #end add-point
    
   LET g_detail_cnt = l_ac - 1
   IF g_detail_cnt > 0 THEN
      DISPLAY g_detail_cnt TO FORMONLY.h_count
   END IF
   LET l_ac = g_cnt
   LET g_cnt = 0
   
   CLOSE b_fill_curs
   FREE ${general_prefix}_pb
   
   LET g_loc = 'm'
   CALL ${general_prefix}_detail_show() 
   
   LET l_ac = 1
   IF ${detail_var_title}.getLength() > 0 THEN
      CALL ${general_prefix}_fetch()
   END IF
   
   #遮罩相關處理
   FOR l_ac = 1 TO ${detail_var_title}.getLength()
      LET ${detail_var_title}_mask_o[l_ac].* =  ${detail_var_title}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name}_mask()
      LET ${detail_var_title}_mask_n[l_ac].* =  ${detail_var_title}[l_ac].*
   END FOR
   
   #pages - Start - 
   LET ${detail_var_title${page}}_mask_o.* =  ${detail_var_title${page}}.*
   FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
      LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
      LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
   END FOR
   #pages -  End  -
   
   ERROR "" 
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.fetch" >}
#+ 單身陣列填充2
PRIVATE FUNCTION ${general_prefix}_fetch()
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   {<point name="fetch.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_ac           LIKE type_t.num10
   #add-point:fetch段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   {<point name="fetch.define"/>}
   #end add-point
   
   #add-point:Function前置處理  name="fetch.pre_function"
   {<point name="fetch.pre_function"/>}
   #end add-point
   
   #判定單頭是否有資料
   IF g_detail_idx <= 0 OR ${detail_var_title}.getLength() = 0 THEN
      RETURN
   END IF
   
   #pages - Start -
   ${general_master_mark${page}}CALL ${detail_var_title${page}}.clear()
   #pages -  End  -
   
   LET li_ac = l_ac 
    
   #tables_d2 - Start -
   IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.body${table}.long_sql_if"
      {<point name="b_fill.body${table}.long_sql_if"/>}
      #end add-point
   THEN
      LET g_sql = "${detail_fill_sql_pre${table}} ${detail_reference_select_field${table}} FROM ${detail_tbl_name_by_tbl${table}} t0",    
                  "${detail_append_join_b_fill${table}}",
                  ${detail_reference_join_sql${table}}
                  "${detail_fill_sql_post${table}}"
      #add-point:單身sql wc name="fetch.sql_wc${table}"
      {<point name="fetch.sql_wc${table}" />}
      #end add-point
      IF NOT cl_null(g_wc2_table${table}) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table${table} CLIPPED
      END IF
      
      LET g_sql = g_sql, " ORDER BY ${detail_field_order_by_tbl${table}}" 
                         
      #add-point:單身填充前 name="fetch.before_fill${table}"
      {<point name="fetch.before_fill${table}" />}
      #end add-point
      
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料    
      PREPARE ${general_prefix}_pb${table} FROM g_sql
      DECLARE b_fill_curs${table} CURSOR FOR ${general_prefix}_pb${table}
   END IF
   
#  LET l_ac = g_detail_idx   #(ver:45)
#  OPEN b_fill_curs${table} USING ${detail_var_append}${detail_var_allkeys}   #(ver:45)
   
   LET l_ac = 1
#  FOREACH b_fill_curs${table} USING ${detail_var_append}${detail_var_allkeys} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}}   #(ver:45) #(ver:46)mark
   FOREACH b_fill_curs${table} USING ${detail_var_append}${detail_var_allkeys_for_2nd_detail} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}}   #(ver:45) #(ver:46)
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         EXIT FOREACH
      END IF
      
      #add-point:b_fill段資料填充 name="fetch.fill${table}"
      {<point name="fetch.fill${table}"/>}
      #end add-point
      
      IF l_ac > g_max_rec THEN
         EXIT FOREACH
      END IF
      
      LET l_ac = l_ac + 1
      
   END FOREACH
   #tables -  End  -
 
   #add-point:單身填充後 name="fetch.after_fill"
   {<point name="fetch.after_fill" />}
   #end add-point
   
   #pages - Start -
   ${general_master_mark${page}}CALL ${detail_var_title${page}}.deleteElement(${detail_var_title${page}}.getLength())   
   #pages -  End  -
   
   #pages_d - Start - 
   LET ${detail_var_title${page}}_mask_o.* =  ${detail_var_title${page}}.*
   FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
      LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
      LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
   END FOR
   #pages -  End  -
   
   DISPLAY ${detail_first_page_name}.getLength() TO FORMONLY.cnt
   #LET g_loc = 'd'
   CALL ${general_prefix}_detail_show()
   
   LET l_ac = li_ac
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.detail_show" >}
#+ 顯示相關資料
PRIVATE FUNCTION ${general_prefix}_detail_show()
   #add-point:show段define(客製用) name="detail_show.define_customerization"
   {<point name="detail_show.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE l_ac_t LIKE type_t.num10
   #add-point:show段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   {<point name="detail_show.define"/>}
   #end add-point
   
   #add-point:Function前置處理  name="detail_show.pre_function"
   {<point name="detail_show.pre_function"/>}
   #end add-point
   
   LET l_ac_t = l_ac
 
   #add-point:detail_show段之前 name="detail_show.before"
   {<point name="detail_show.before"/>}
   #end add-point
   
   ${general_display_site}
   
   #帶出公用欄位reference值page1
   ${detail_commons_ref}
    
   #pages - Start -
   #帶出公用欄位reference值page${page}
   ${detail_commons_ref${page}}
   #pages -  End  -
   
   IF g_loc = 'm' THEN
      #讀入ref值
      FOR l_ac = 1 TO ${detail_var_title}.getLength()
         #add-point:show段單頭reference name="detail_show.body.reference"
         {<point name="detail_show.body.reference"/>}
         #end add-point
         #pages_m - Start -
         #add-point:show段單頭reference name="detail_show.body${page_id}.reference"
         {<point name="detail_show.body${page_id}.reference"/>}
         #end add-point
         #pages -  End  -
      END FOR
   END IF
   
   IF g_loc = 'd' THEN
      #pages_d - Start -
      FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
        #add-point:show段單身reference name="detail_show.body${page_id}.reference"
        {<point name="detail_show.body${page_id}.reference"/>}
        #end add-point
      END FOR
      #pages -  End  -
      
      #add-point:detail_show段之後 name="detail_show.after"
      {<point name="detail_show.after"/>}
      #end add-point
   END IF
   
   LET l_ac = l_ac_t
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION ${general_prefix}_set_entry_b(p_cmd)                                                  
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   {<point name="set_entry_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE p_cmd   LIKE type_t.chr1         
   #add-point:set_entry_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   {<point name="set_entry_b.define"/>}
   #end add-point
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   {<point name="set_entry_b.pre_function"/>}
   #end add-point
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("${detail_entry_fields}",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry_b段欄位控制 name="set_entry_b.field_control"
      {<point name="set_entry_b.field_control"/>}
      #end add-point 
   END IF
   
   #add-point:set_entry_b段欄位控制後 name="set_entry.after_control"
   {<point name="set_entry.after_control"/>}
   #end add-point 
                                                                     
END FUNCTION                                                                    
{</section>}
                                                                        
{<section id="${app_id}.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION ${general_prefix}_set_no_entry_b(p_cmd)                                               
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   {<point name="set_no_entry_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE p_cmd   LIKE type_t.chr1           
   #add-point:set_no_entry_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   {<point name="set_no_entry_b.define"/>}
   #end add-point
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   {<point name="set_no_entry_b.pre_function"/>}
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("${detail_no_entry_fields}",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      {<point name="set_no_entry_b.field_control"/>}
      #end add-point 
   END IF
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
                                                                          
END FUNCTION  
{</section>}
 
{<section id="${app_id}.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION ${general_prefix}_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   {<point name="default_search.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE li_idx  LIKE type_t.num10
   DEFINE li_cnt  LIKE type_t.num10
   DEFINE ls_wc   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   {<point name="default_search.define"/>}
   #end add-point  
  
   #add-point:Function前置處理  name="default_search.before"
   {<point name="default_search.before"/>}
   #end add-point  
   
   IF NOT cl_null(g_argv[${general_para01}]) THEN
      LET ls_wc = ls_wc, " ${detail_field_pk01} = '", g_argv[${general_para01}], "' AND "
   END IF
   
   #detail_keys - Start -
   IF NOT cl_null(g_argv[${general_para${key}}]) THEN
      LET ls_wc = ls_wc, " ${detail_field_pk${key}} = '", g_argv[${general_para${key}}], "' AND "
   END IF
   #keys -  End  -
   
   #add-point:default_search段after sql name="default_search.after_sql"
   {<point name="default_search.after_sql"/>}
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET ls_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_wc = ls_wc
   ELSE
      LET g_wc = " 1=2"
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   {<point name="default_search.after"/>}
   #end add-point  
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   {<point name="delete_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   #add-point:delete_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   {<point name="delete_b.define"/>}
   #end add-point     
  
   #add-point:Function前置處理  name="delete_b.pre_function"
   {<point name="delete_b.pre_function"/>}
   #end add-point
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_table_group}"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.before_delete"
      {<point name="delete_b.before_delete" mark="Y"/>}
      #end add-point  
      DELETE FROM ${detail_name_by_table}
       WHERE ${detail_append_wc_by_tbl}
         ${detail_tbl_wc}
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      {<point name="delete_b.m_delete"/>}
      #end add-point  
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table1}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      #add-point:delete_b段刪除後 name="delete_b.after_delete"
      {<point name="delete_b.after_delete"/>}
      #end add-point  
   END IF
   
   #tables - Start - 
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.before_delete${table}"
      {<point name="delete_b.before_delete${table}" mark="Y"/>}
      #end add-point  
      DELETE FROM ${detail_name_by_table${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
         ${detail_tbl_wc${table}}
      #add-point:delete_b段刪除中 name="delete_b.m_delete${table}"
      {<point name="delete_b.m_delete${table}"/>}
      #end add-point  
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      #add-point:delete_b段刪除後 name="delete_b.after_delete${table}"
      {<point name="delete_b.after_delete${table}"/>}
      #end add-point  
      RETURN
   END IF
   #tables -  End  - 
   
   #tables_d2 - Start - 
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.before_delete${table}"
      {<point name="delete_b.before_delete${table}" mark="Y"/>}
      #end add-point  
      DELETE FROM ${detail_name_by_table${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
         ${detail_tbl_wc${table}}
      #add-point:delete_b段刪除中 name="delete_b.m_delete${table}"
      {<point name="delete_b.m_delete${table}"/>}
      #end add-point  
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      #add-point:delete_b段刪除後 name="delete_b.after_delete${table}"
      {<point name="delete_b.after_delete${table}"/>}
      #end add-point  
      RETURN
   END IF
   #tables -  End  - 
   
   #tables_d2 - Start - 
   #單頭刪除, 連帶刪除單身
   LET ls_group = "${detail_table_group}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.before_body_delete${table}"
      {<point name="delete_b.before_body_delete${table}" mark="Y"/>}
      #end add-point  
      DELETE FROM ${detail_name_by_table${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
         ${detail_tbl_wc_by_body${table}}
      #add-point:delete_b段刪除中 name="delete_b.m_body_delete${table}"
      {<point name="delete_b.m_body_delete${table}"/>}
      #end add-point  
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      #add-point:delete_b段刪除後 name="delete_b.after_body_delete${table}"
      {<point name="delete_b.after_body_delete${table}"/>}
      #end add-point  
      RETURN
   END IF
   #tables -  End  - 
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   {<point name="insert_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   {<point name="insert_b.define"/>}
   #end add-point
  
   #add-point:Function前置處理  name="insert_b.pre_function"
   {<point name="insert_b.pre_function"/>}
   #end add-point
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_table_group}"
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前 name="insert_b.before_insert"
      {<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point
      INSERT INTO ${detail_name_by_table}
                  (${detail_field_append_by_tbl}
                   ${detail_field_pks_by_tbl}
                   ${detail_field_others}) 
            VALUES(${detail_var_append_by_tbl}
                   ${detail_var_ps_keys}
                   ${detail_var_others})
      #add-point:insert_b段新增中 name="insert_b.m_insert"
      {<point name="insert_b.m_insert"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      #add-point:insert_b段新增後 name="insert_b.after_insert"
      {<point name="insert_b.after_insert"/>}
      #end add-point
   END IF
   
   #tables - Start -
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前 name="insert_b.before_insert${table}"
      {<point name="insert_b.before_insert${table}" mark="Y"/>}
      #end add-point
      INSERT INTO ${detail_name_by_table${table}}
                  (${detail_field_append_by_tbl${table}}
                   ${detail_field_pks_by_tbl${table}}
                   ${detail_field_others${table}}) 
            VALUES(${detail_var_append_by_tbl${table}}
                   ${detail_var_ps_keys${table}}
                   ${detail_var_others${table}})
      #add-point:insert_b段新增中 name="insert_b.m_insert${table}"
      {<point name="insert_b.m_insert${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         RETURN
      END IF
      #add-point:insert_b段新增後 name="insert_b.after_insert${table}:",SQLERRMESSAGE 
      {<point name="insert_b.after_insert${table}"/>}
      #end add-point
   END IF
   #tables -  End  -
   
   #tables_d2 - Start -
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 THEN
      #add-point:insert_b段新增前 name="insert_b.before_insert${table}"
      {<point name="insert_b.before_insert${table}" mark="Y"/>}
      #end add-point
      INSERT INTO ${detail_name_by_table${table}}
                  (${detail_field_append_by_tbl${table}}
                   ${detail_field_pks_by_tbl${table}}
                   ${detail_field_others${table}}) 
            VALUES(${detail_var_append_by_tbl${table}}
                   ${detail_var_ps_keys${table}}
                   ${detail_var_others${table}})
      #add-point:insert_b段新增中 name="insert_b.m_insert${table}"
      {<point name="insert_b.m_insert${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         RETURN
      END IF
      #add-point:insert_b段新增後 name="insert_b.after_insert${table}"
      {<point name="insert_b.after_insert${table}"/>}
      #end add-point
   END IF
   #tables -  End  - 
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.update_b" >} 
#+ 修改單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   {<point name="update_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   {<point name="update_b.define"/>}
   #end add-point     
  
   #add-point:Function前置處理  name="update_b.pre_function"
   {<point name="update_b.pre_function"/>}
   #end add-point
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_table_group}"
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "${detail_name_by_table}" THEN
   
      #add-point:update_b段修改前 name="update_b.before_update"
      {<point name="update_b.before_update" mark="Y"/>}
      #end add-point     
   
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table}_mask_restore('restore_mask_o')
               
      UPDATE ${detail_name_by_table} 
         SET (${detail_field_pks_by_tbl}
              ${detail_field_others}) 
              = 
             (${detail_var_ps_keys}
              ${detail_var_others}) 
         WHERE ${detail_append_wc_by_tbl}
               ${detail_tbl_wc}
 
      #add-point:update_b段修改中 name="update_b.m_update"
      {<point name="update_b.m_update"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table}:",SQLERRMESSAGE  
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            ${detail_append_pk_upd_by_tbl}
      END CASE
 
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table}_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      {<point name="update_b.after_update"/>}
      #end add-point
      
      RETURN
   END IF
   
   #tables - Start - 
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "${detail_name_by_table${table}}" THEN
   
      #add-point:update_b段修改前 name="update_b.before_update${table}"
      {<point name="update_b.before_update${table}" mark="Y"/>}
      #end add-point    
      
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_o')
               
      UPDATE ${detail_name_by_table${table}} 
         SET (${detail_field_pks_by_tbl${table}}
              ${detail_field_others${table}}) 
              = 
             (${detail_var_ps_keys${table}}
              ${detail_var_others${table}}) 
         WHERE ${detail_append_wc_by_tbl${table}}
               ${detail_tbl_wc${table}}
 
      #add-point:update_b段修改中 name="update_b.m_update${table}"
      {<point name="update_b.m_update${table}"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            ${detail_append_pk_upd_by_tbl${table}}
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_n')
   
      #add-point:update_b段修改後 name="update_b.after_update${table}"
      {<point name="update_b.after_update${table}"/>}
      #end add-point 
      
      RETURN
   END IF
   #tables -  End  -
   
   #tables_d2 - Start -
   LET ls_group = "${detail_table_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_table,1) > 0 AND ps_table <> "${detail_name_by_table${table}}" THEN
   
      #add-point:update_b段修改前 name="update_b.before_update${table}"
      {<point name="update_b.before_update${table}" mark="Y"/>}
      #end add-point    
      
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_o')
      
      UPDATE ${detail_name_by_table${table}} 
         SET (${detail_field_pks_by_tbl${table}}
              ${detail_field_others${table}}) 
              = 
             (${detail_var_ps_keys${table}}
              ${detail_var_others${table}}) 
         WHERE ${detail_append_wc_by_tbl${table}}
               ${detail_tbl_wc${table}}
 
      #add-point:update_b段修改中 name="update_b.m_update${table}"
      {<point name="update_b.m_update${table}"/>}
      #end add-point 
         
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            CALL s_transaction_end('N','0')
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            ${detail_append_pk_upd_by_tbl${table}}
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update${table}"
      {<point name="update_b.after_update${table}"/>}
      #end add-point 
      
      RETURN
   END IF
   #tables -  End  -
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.key_update_b" >}
#+ 單頭key欄位變動後, 連帶修正其他單身table
PRIVATE FUNCTION ${general_prefix}_key_update_b()
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   {<point name="key_update_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)   #(ver:44)
   #add-point:update_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   {<point name="key_update_b.define"/>}
   #end add-point
  
   #add-point:Function前置處理  name="key_update_b.pre_function"
   {<point name="key_update_b.pre_function"/>}
   #end add-point
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   
   IF g_master.${detail_field_pk01} <> g_master_t.${detail_field_pk01} THEN
      LET lb_chk = FALSE
   END IF
   #detail_keys - Start -
   IF g_master.${detail_field_pk${key}} <> g_master_t.${detail_field_pk${key}} THEN
      LET lb_chk = FALSE
   END IF
   #keys -  End  -
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
    
   #tables_d2 - Start - 
   #add-point:update_b段修改前 name="key_update_b.before_update${table}"
   {<point name="key_update_b.before_update${table}" mark="Y"/>}
   #end add-point
   
   UPDATE ${detail_name_by_table${table}} 
      SET (${detail_field_fks_by_tbl${table}}) 
           = 
          (${master_var_pks}) 
      WHERE ${detail_append_wc_by_tbl${table}}
           ${detail_by_tbl${table}_field_fk01} = g_master_t.${detail_field_pk01}
           #detail_keys - Start -
           AND ${detail_by_tbl${table}_field_fk${key}} = g_master_t.${detail_field_pk${key}}
           #keys -  End  -
           
   #add-point:update_b段修改中 name="key_update_b.m_update${table}"
   {<point name="key_update_b.m_update${table}"/>}
   #end add-point
           
   CASE
      WHEN SQLCA.SQLCODE #其他錯誤
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL s_transaction_end('N','0')
         CALL cl_err()
         
      OTHERWISE
         #若有多語言table資料一同更新
         ${detail_append_pk_upd_all_by_tbl${table}}
   END CASE
   
   #add-point:update_b段修改後 name="key_update_b.after_update${table}"
   {<point name="key_update_b.after_update${table}"/>}
   #end add-point
   #tables -  End  -
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION ${general_prefix}_lock_b(ps_table)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   {<point name="lock_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:lock_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   {<point name="lock_b.define"/>}
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   {<point name="lock_b.pre_function"/>}
   #end add-point
   
   #先刷新資料
   #CALL ${general_prefix}_b_fill(g_wc)
   
   #鎖定整組table
   #LET ls_group = "${detail_table_group1}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name}"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN ${general_prefix}_bcl USING ${detail_var_append}
                                       ${detail_by_tbl_var_pks}
                                       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${general_prefix}_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   
   END IF
                                    
   #tables - Start -
   #鎖定整組table
   #LET ls_group = "${detail_table_group${table}}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name_by_tbl${table}}"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN ${detail_table_bcl${table}} USING ${detail_var_append_by_tbl${table}}
                                             ${detail_by_tbl_var_pks${table}}
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_table_bcl${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #tables -  End  -
   
   #tables_d2 - Start -
   #鎖定整組table
   #LET ls_group = "${detail_table_group${table}}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name_by_tbl${table}}"
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN ${detail_table_bcl${table}} USING ${detail_var_append_by_tbl${table}}
                                             ${master_var_pks},
                                             ${detail_by_tbl_var_pks${table}}
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_table_bcl${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #tables -  End  -
   
   RETURN TRUE
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION ${general_prefix}_unlock_b(ps_table)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   {<point name="unlock_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE ps_table STRING
   DEFINE ls_group STRING
   #add-point:unlock_b段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   {<point name="unlock_b.define"/>}
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   {<point name="unlock_b.pre_function"/>}
   #end add-point
   
   LET ls_group = "${detail_table_group1}"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE ${general_prefix}_bcl
   END IF
   
   #tables - Start -
   LET ls_group = "${detail_table_group${table}}"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE ${detail_table_bcl${table}}
   END IF
   #tables -  End  -
    
   #tables_d2 - Start -
   LET ls_group = "${detail_table_group${table}}"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      CLOSE ${detail_table_bcl${table}}
   END IF
   #tables -  End  -
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.idx_chk" >}
#+ 單身筆數變更
PRIVATE FUNCTION ${general_prefix}_idx_chk(ps_loc)
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   {<point name="idx_chk.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE ps_loc   LIKE type_t.chr10
   DEFINE li_idx   LIKE type_t.num10
   DEFINE li_cnt   LIKE type_t.num10
   #add-point:idx_chk段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   {<point name="idx_chk.define"/>}
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   {<point name="idx_chk.pre_function"/>}
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("${sr_name}")
      IF g_detail_idx > ${detail_var_title}.getLength() THEN
         LET g_detail_idx = ${detail_var_title}.getLength()
      END IF
      IF g_detail_idx = 0 AND ${detail_var_title}.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      LET li_idx = g_detail_idx
      LET li_cnt = ${detail_var_title}.getLength()
   END IF
   
   #pages - Start -
   IF g_current_page = ${page} THEN
      LET g_detail_idx${general_page_idx${page}} = g_curr_diag.getCurrentRow("${sr_name${page}}")
      IF g_detail_idx${general_page_idx${page}} > ${detail_var_title${page}}.getLength() THEN
         LET g_detail_idx${general_page_idx${page}} = ${detail_var_title${page}}.getLength()
      END IF
      IF g_detail_idx${general_page_idx${page}} = 0 AND ${detail_var_title${page}}.getLength() <> 0 THEN
         LET g_detail_idx${general_page_idx${page}} = 1
      END IF
      LET li_idx = g_detail_idx${general_page_idx${page}}
      LET li_cnt = ${detail_var_title${page}}.getLength()
   END IF
   #pages -  End  -
    
   IF ps_loc = 'm' THEN
      DISPLAY li_idx TO FORMONLY.h_index
      DISPLAY li_cnt TO FORMONLY.h_count
      #pages_d - Start -
      IF ${detail_var_title${page}}.getLength() = 0 THEN
         DISPLAY '' TO FORMONLY.idx
         DISPLAY '' TO FORMONLY.cnt
      ELSE
         DISPLAY 1 TO FORMONLY.idx
         DISPLAY ${detail_var_title${page}}.getLength() TO FORMONLY.cnt
      END IF
      #pages -  End  -
   ELSE
      DISPLAY li_idx TO FORMONLY.idx
      DISPLAY li_cnt TO FORMONLY.cnt
   END IF
   
   #add-point:idx_chk段other name="idx_chk.other"
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.mask_functions" >}
${general_mask_funcs}
{</section>}
 
{<section id="${app_id}.set_pk_array" >}
   ${detail_set_pk_array}
{</section>}
 
{<section id="${app_id}.state_change" >}
   ${general_state_change} 
{</section>}
 
{<section id="${app_id}.func_signature" >}
   ${general_func_signature}
{</section>}
 
{<section id="${app_id}.other_dialog" readonly="Y" >}
${general_other_dialog}
{</section>}
{<section id="${app_id}.other_function" readonly="Y" >}
{<point name="other.function"/>}
{</section>}

