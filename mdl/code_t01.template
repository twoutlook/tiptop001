{<section id="${app_id}.global" >}
#應用 t01 樣板自動產生(Version:79)
#add-point:填寫註解說明 name="global.memo" 
{<point name="global.memo" edit="s"/>}
#end add-point
#add-point:填寫註解說明(客製用) name="global.memo_customerization"
{<point name="global.memo_customerization" edit="c"/>}
#end add-point

IMPORT os
IMPORT util
IMPORT FGL lib_cl_dlg
#add-point:增加匯入項目 name="global.import"
{<point name="global.import"/>}
#end add-point 
 
SCHEMA ds 
 
GLOBALS "../../cfg/top_global.inc"
 
#add-point:增加匯入變數檔 name="global.inc"
{<point name="global.inc" mark="Y"/>}
#end add-point
 
#單頭 type 宣告
PRIVATE type type_${master_var_title}        RECORD
       ${master_fields_define}
       END RECORD
 
#單身 type 宣告
PRIVATE TYPE type_${detail_var_title}        RECORD
       ${detail_fields_define}
       END RECORD
#pages - Start - 
PRIVATE TYPE type_${detail_var_title${page}} RECORD
       ${detail_fields_define${page}}
       END RECORD
#pages -  End  -
 
PRIVATE TYPE type_browser RECORD
         b_statepic     LIKE type_t.chr50,
         ${browser_fields_define}
       END RECORD
       
#add-point:自定義模組變數(Module Variable) (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="global.variable"
{<point name="global.variable"/>} 
#end add-point
       
#模組變數(Module Variables)
DEFINE ${master_var_title}          type_${master_var_title}
DEFINE ${master_var_title}_t        type_${master_var_title}
DEFINE ${master_var_title}_o        type_${master_var_title}
DEFINE ${master_var_title}_mask_o   type_${master_var_title} #轉換遮罩前資料
DEFINE ${master_var_title}_mask_n   type_${master_var_title} #轉換遮罩後資料
 
   ${master_key_t_define}
 
DEFINE ${detail_var_title}          DYNAMIC ARRAY OF type_${detail_var_title}
DEFINE ${detail_var_title}_t        type_${detail_var_title}
DEFINE ${detail_var_title}_o        type_${detail_var_title}
DEFINE ${detail_var_title}_mask_o   DYNAMIC ARRAY OF type_${detail_var_title} #轉換遮罩前資料
DEFINE ${detail_var_title}_mask_n   DYNAMIC ARRAY OF type_${detail_var_title} #轉換遮罩後資料
#pages - Start -
DEFINE ${detail_var_title${page}}          DYNAMIC ARRAY OF type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_t        type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_o        type_${detail_var_title${page}}
DEFINE ${detail_var_title${page}}_mask_o   DYNAMIC ARRAY OF type_${detail_var_title${page}} #轉換遮罩前資料
DEFINE ${detail_var_title${page}}_mask_n   DYNAMIC ARRAY OF type_${detail_var_title${page}} #轉換遮罩後資料
#pages -  End  -
 
DEFINE g_browser         DYNAMIC ARRAY OF type_browser
DEFINE g_browser_f       DYNAMIC ARRAY OF type_browser
 
${master_multi_table_define}
${detail_multi_table_define}
 
DEFINE g_wc                  STRING
DEFINE g_wc_t                STRING
DEFINE g_wc2                 STRING                          #單身CONSTRUCT結果
DEFINE g_wc2_table1          STRING
#tables - Start -
DEFINE g_wc2_table${table}   STRING
#tables -  End  -
#tables_d2 - Start -
DEFINE g_wc2_table${table}   STRING
#tables -  End  -
DEFINE g_wc2_extend          STRING
DEFINE g_wc_filter           STRING
DEFINE g_wc_filter_t         STRING
 
DEFINE g_sql                 STRING
DEFINE g_forupd_sql          STRING
DEFINE g_cnt                 LIKE type_t.num10
DEFINE g_current_idx         LIKE type_t.num10     
DEFINE g_jump                LIKE type_t.num10        
DEFINE g_no_ask              LIKE type_t.num5        
DEFINE g_rec_b               LIKE type_t.num10           
DEFINE l_ac                  LIKE type_t.num10    
DEFINE g_curr_diag           ui.Dialog                         #Current Dialog
                                                               
DEFINE g_pagestart           LIKE type_t.num10                 
DEFINE gwin_curr             ui.Window                         #Current Window
DEFINE gfrm_curr             ui.Form                           #Current Form
DEFINE g_page_action         STRING                            #page action
DEFINE g_header_hidden       LIKE type_t.num5                  #隱藏單頭
DEFINE g_worksheet_hidden    LIKE type_t.num5                  #隱藏工作Panel
DEFINE g_page                STRING                            #第幾頁
DEFINE g_state               STRING       
DEFINE g_header_cnt          LIKE type_t.num10
DEFINE g_detail_cnt          LIKE type_t.num10                  #單身總筆數
DEFINE g_detail_idx          LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx_tmp      LIKE type_t.num10                  #單身目前所在筆數
DEFINE g_detail_idx2         LIKE type_t.num10                  #單身2目前所在筆數
DEFINE g_detail_idx_list     DYNAMIC ARRAY OF LIKE type_t.num10 #單身2目前所在筆數
DEFINE g_browser_cnt         LIKE type_t.num10                  #Browser總筆數
DEFINE g_browser_idx         LIKE type_t.num10                  #Browser目前所在筆數
DEFINE g_temp_idx            LIKE type_t.num10                  #Browser目前所在筆數(暫存用)
DEFINE g_order               STRING                             #查詢排序欄位
                                                        
DEFINE g_current_row         LIKE type_t.num10                  #Browser所在筆數
DEFINE g_current_sw          BOOLEAN                            #Browser所在筆數用開關
DEFINE g_current_page        LIKE type_t.num10                  #目前所在頁數
DEFINE g_insert              LIKE type_t.chr5                   #是否導到其他page
 
DEFINE g_ref_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_ref_vars            DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE g_rtn_fields          DYNAMIC ARRAY OF VARCHAR(500) #ap_ref用陣列
DEFINE gs_keys               DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE gs_keys_bak           DYNAMIC ARRAY OF VARCHAR(500) #同步資料用陣列
DEFINE g_bfill               LIKE type_t.chr5              #是否刷新單身
DEFINE g_error_show          LIKE type_t.num5              #是否顯示筆數提示訊息
DEFINE g_master_insert       BOOLEAN                       #確認單頭資料是否寫入
 
DEFINE g_wc_frozen           STRING                        #凍結欄位使用
DEFINE g_chk                 BOOLEAN                       #助記碼判斷用
DEFINE g_aw                  STRING                        #確定當下點擊的單身
DEFINE g_default             BOOLEAN                       #是否有外部參數查詢
DEFINE g_log1                STRING                        #log用
DEFINE g_log2                STRING                        #log用
DEFINE g_loc                 LIKE type_t.chr5              #判斷游標所在位置
DEFINE g_add_browse          STRING                        #新增填充用WC
DEFINE g_update              BOOLEAN                       #確定單頭/身是否異動過
DEFINE g_idx_group           om.SaxAttributes              #頁籤群組
DEFINE g_master_commit       LIKE type_t.chr1              #確認單頭是否修改過
 
#add-point:自定義客戶專用模組變數(Module Variable) name="global.variable_customerization"
{<point name="global.variable_customerization" edit="c"/>}
#end add-point
 
#add-point:傳入參數說明(global.argv) name="global.argv"
{<point name="global.argv"/>}
#end add-point
{</section>}
 
{<section id="${app_id}.main" >}
${general_main_function}
{</section>}
 
{<section id="${app_id}.init" >}
#+ 瀏覽頁簽資料初始化
PRIVATE FUNCTION ${general_prefix}_init()
   #add-point:init段define(客製用) name="init.define_customerization"
   {<point name="init.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   #add-point:init段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="init.define"
   {<point name="init.define"/>} 
   #end add-point   
   
   #add-point:Function前置處理  name="init.pre_function"
   {<point name="init.pre_function"/>}
   #end add-point
   
   LET g_bfill       = "Y"
   LET g_detail_idx  = 1 #第一層單身指標
   LET g_detail_idx2 = 1 #第二層單身指標
   
   #各個page指標
   LET g_detail_idx_list[1] = 1 
   #pages - Start -
   LET g_detail_idx_list[${page}] = 1
   #pages -  End  -
   LET g_error_show  = 1
   LET l_ac = 1 #單身指標
   ${general_define_combo_stus}
   ${general_define_combo}
   LET gwin_curr = ui.Window.getCurrent()  #取得現行畫面
   LET gfrm_curr = gwin_curr.getForm()     #取出物件化後的畫面物件
   
   #page群組
   LET g_idx_group = om.SaxAttributes.create()
   CALL g_idx_group.addAttribute("${detail_idx_group}","1")
   #pages - Start - 
   CALL g_idx_group.addAttribute("${detail_idx_group${page}}","1")
   #pages -  End  -
 
   #add-point:畫面資料初始化 name="init.init"
   {<point name="init.init"/>}
   #end add-point
   
   #初始化搜尋條件
   CALL ${general_prefix}_default_search()
    
END FUNCTION
{</section>}
 
{<section id="${app_id}.ui_dialog" >}
#+ 功能選單
PRIVATE FUNCTION ${general_prefix}_ui_dialog()
   #add-point:ui_dialog段define(客製用) name="ui_dialog.define_customerization"
   {<point name="ui_dialog.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE li_idx     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE lb_first   BOOLEAN
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE la_param   RECORD
          prog       STRING,
          actionid   STRING,
          background LIKE type_t.chr1,
          param      DYNAMIC ARRAY OF STRING
          END RECORD
   DEFINE ls_js      STRING
   DEFINE la_output  DYNAMIC ARRAY OF STRING   #報表元件鬆耦合使用
   DEFINE  l_cmd_token           base.StringTokenizer   #報表作業cmdrun使用 
   DEFINE  l_cmd_next            STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_cnt             LIKE type_t.num5       #報表作業cmdrun使用
   DEFINE  l_cmd_prog_arg        STRING                 #報表作業cmdrun使用
   DEFINE  l_cmd_arg             STRING                 #報表作業cmdrun使用
   #add-point:ui_dialog段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_dialog.define"
   {<point name="ui_dialog.define"/>} 
   #end add-point
   
   #add-point:Function前置處理  name="ui_dialog.pre_function"
   {<point name="ui_dialog.pre_function"/>}
   #end add-point
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   ${general_i09_mark}#因應查詢方案進行處理
   ${general_i09_mark}IF g_default THEN
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("mainlayout",0)
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("worksheet",1)
   ${general_i09_mark}   LET g_main_hidden = 0
   ${general_i09_mark}ELSE
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("mainlayout",1)
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("worksheet",0)
   ${general_i09_mark}   LET g_main_hidden = 1
   ${general_i09_mark}END IF
   
   #action default動作
   ${general_action_default}
   
   LET lb_first = TRUE
   
   #add-point:ui_dialog段before dialog  name="ui_dialog.before_dialog"
   {<point name="ui_dialog.before_dialog"/>}
   #end add-point
   
   WHILE TRUE 
   
      IF g_action_choice = "logistics" THEN
         #清除畫面及相關資料
         CLEAR FORM
         CALL g_browser.clear()       
         INITIALIZE ${master_var_title}.* TO NULL
         CALL ${detail_var_title}.clear()
         #pages - Start -
         CALL ${detail_var_title${page}}.clear()
         #pages -  End  -
         LET g_wc  = ' 1=2'
         LET g_wc2 = ' 1=1'
         LET g_action_choice = ""
         CALL ${general_prefix}_init()
      END IF
   
      ${general_i09_mark}CALL lib_cl_dlg.cl_dlg_before_display()
            
      DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
 
         ${general_i09_mark}#左側瀏覽頁簽
         ${general_i09_mark}DISPLAY ARRAY g_browser TO s_browse.* ATTRIBUTES(COUNT=g_header_cnt)
         ${general_i09_mark}   BEFORE ROW
         ${general_i09_mark}      #回歸舊筆數位置 (回到當時異動的筆數)
         ${general_i09_mark}      LET g_current_idx = DIALOG.getCurrentRow("s_browse")
         ${general_i09_mark}      IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
         ${general_i09_mark}         CALL DIALOG.setCurrentRow("s_browse",g_current_row)
         ${general_i09_mark}         LET g_current_idx = g_current_row
         ${general_i09_mark}      END IF
         ${general_i09_mark}      LET g_current_row = g_current_idx #目前指標
         ${general_i09_mark}      LET g_current_sw = TRUE
         ${general_i09_mark}
         ${general_i09_mark}      IF g_current_idx > g_browser.getLength() THEN
         ${general_i09_mark}         LET g_current_idx = g_browser.getLength()
         ${general_i09_mark}      END IF 
         ${general_i09_mark}      
         ${general_i09_mark}      CALL ${general_prefix}_fetch('') # reload data
         ${general_i09_mark}      LET l_ac = 1
         ${general_i09_mark}      CALL ${general_prefix}_ui_detailshow() #Setting the current row 
         ${general_i09_mark}
         ${general_i09_mark}      CALL ${general_prefix}_idx_chk()
         ${general_i09_mark}      #NEXT FIELD ${detail_field_pk01}
         ${general_i09_mark}
         ${general_i09_mark}      ON ACTION qbefield_user   #欄位隱藏設定 
         ${general_i09_mark}         LET g_action_choice="qbefield_user"
         ${general_i09_mark}         CALL cl_ui_qbefield_user()
         ${general_i09_mark}END DISPLAY
    
         DISPLAY ARRAY ${detail_var_title} TO ${sr_name}.* ATTRIBUTES(COUNT=g_rec_b) #page1  
    
            BEFORE ROW
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               #確定當下選擇的筆數
               LET l_ac = DIALOG.getCurrentRow("${sr_name}")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[1] = l_ac
               CALL g_idx_group.addAttribute("${detail_idx_group}",l_ac)
               ${detail_page_fill}
               #add-point:page1, before row動作 name="ui_dialog.page1.before_row"
               {<point name="ui_dialog.page1.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group}"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("${sr_name}")
               LET g_current_page = 1
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               #add-point:page1自定義行為 name="ui_dialog.page1.before_display"
               {<point name="ui_dialog.page1.before_display"/>}
               #end add-point
               
            #自訂ACTION(detail_show,page_1)
            ${detail_saction_choice1}
               
            #add-point:page1自定義行為 name="ui_dialog.page1.action"
            {<point name="ui_dialog.page1.action"/>}
            #end add-point
               
         END DISPLAY
        
         #pages_m - Start - 
         #第一階單身段落
         DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
               LET g_detail_idx = l_ac
               LET g_detail_idx_list[${page}] = l_ac
               CALL g_idx_group.addAttribute("${detail_idx_group${page}}",l_ac)
               ${detail_page_fill${page}}
               #add-point:page${page}, before row動作 name="ui_dialog.body${page_id}.before_row"
               {<point name="ui_dialog.body${page_id}.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在單身1則控制筆數位置
               IF g_loc = 'm' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
               END IF
               LET g_loc = 'm'
               LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
               LET g_current_page = ${page}
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               #add-point:page${page}自定義行為 name="ui_dialog.body${page_id}.before_display"
               {<point name="ui_dialog.body${page_id}.before_display"/>}
               #end add-point
      
            #自訂ACTION(detail_show,page_${page})
            ${detail_saction_choice${page}}
         
            #add-point:page${page}自定義行為 name="ui_dialog.body${page_id}.action"
            {<point name="ui_dialog.body${page_id}.action"/>}
            #end add-point
         
         END DISPLAY
         #pages -  End  -
         
         #pages_d - Start - 
         #第二階單身段落
         DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.* ATTRIBUTES(COUNT=g_rec_b)  
    
            BEFORE ROW
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
               LET g_detail_idx2 = l_ac
               LET g_detail_idx_list[${page}] = l_ac
               CALL g_idx_group.addAttribute("${detail_idx_group${page}}",l_ac)
               ${detail_page_fill${page}}
               #add-point:page${page}, before row動作 name="ui_dialog.body${page_id}.before_row"
               {<point name="ui_dialog.body${page_id}.before_row"/>}
               #end add-point
               
            BEFORE DISPLAY
               #如果一直都在下階單身則控制筆數位置
               IF g_loc = 'd' THEN
                  CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
               END IF
               LET g_loc = 'd'
               LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
               LET g_current_page = ${page}
               #顯示單身筆數
               CALL ${general_prefix}_idx_chk()
               #add-point:page${page}自定義行為 name="ui_dialog.body${page_id}.before_display"
               {<point name="ui_dialog.body${page_id}.before_display"/>}
               #end add-point
      
            #自訂ACTION(detail_show,page_${page})
            ${detail_saction_choice${page}}
         
            #add-point:page${page}自定義行為 name="ui_dialog.body${page_id}.action"
            {<point name="ui_dialog.body${page_id}.action"/>}
            #end add-point
         
         END DISPLAY
         #pages -  End  -
         
         #add-point:ui_dialog段自定義display array name="ui_dialog.more_displayarray"
         {<point name="ui_dialog.more_displayarray"/>}
         #end add-point
         
         ${general_i09_mark}SUBDIALOG lib_cl_dlg.cl_dlg_qryplan
         ${general_i09_mark}SUBDIALOG lib_cl_dlg.cl_dlg_relateapps
      
         BEFORE DIALOG
            #先填充browser資料
            CALL ${general_prefix}_browser_fill("")
            CALL cl_notice()
            CALL cl_navigator_setting(g_current_idx, g_detail_cnt)
            LET g_curr_diag = ui.DIALOG.getCurrent()
            LET g_current_sw = FALSE
            #回歸舊筆數位置 (回到當時異動的筆數)
            ${general_i09_mark}LET g_current_idx = DIALOG.getCurrentRow("s_browse")
            ${general_i09_mark}IF g_current_row > 1 AND g_current_idx = 1 AND g_current_sw = FALSE THEN
            ${general_i09_mark}   CALL DIALOG.setCurrentRow("s_browse",g_current_row)
            ${general_i09_mark}   LET g_current_idx = g_current_row
            ${general_i09_mark}END IF
            
            #確保g_current_idx位於正常區間內
            #小於,等於0則指到第1筆
            IF g_current_idx <= 0 THEN
               LET g_current_idx = 1
            END IF
            #超過最大筆數則指到最後1筆
            IF g_current_idx > g_browser.getLength() THEN
               LEt g_current_idx = g_browser.getLength()
            END IF 
            
            LET g_current_sw = TRUE
            LET g_current_row = g_current_idx #目前指標
            
            #有資料才進行fetch
            IF g_current_idx <> 0 THEN
               CALL ${general_prefix}_fetch('') # reload data
            END IF
            #LET g_detail_idx = 1
            CALL ${general_prefix}_ui_detailshow() #Setting the current row 
            
            #筆數顯示
            LET g_current_page = 1
            CALL ${general_prefix}_idx_chk()
            CALL cl_ap_performance_cal()
            #add-point:ui_dialog段before_dialog2 name="ui_dialog.before_dialog2"
            {<point name="ui_dialog.before_dialog2"/>}
            #end add-point
 
         #add-point:ui_dialog段more_action name="ui_dialog.more_action"
         {<point name="ui_dialog.more_action"/>}
         #end add-point
 
         ${general_mark_stus}#狀態碼切換
         ${general_mark_stus}ON ACTION statechange
         ${general_mark_stus}   LET g_action_choice = "statechange"
         ${general_mark_stus}   CALL ${general_prefix}_statechange()
         ${general_mark_stus}   #根據資料狀態切換action狀態
         ${general_mark_stus}   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
         ${general_mark_stus}   CALL ${general_prefix}_set_act_visible()   
         ${general_mark_stus}   CALL ${general_prefix}_set_act_no_visible()
         ${general_mark_stus}   IF NOT (${master_var_pk01} IS NULL
         ${general_mark_stus}     #master_keys - Start -
         ${general_mark_stus}     OR ${master_var_pk${key}} IS NULL
         ${general_mark_stus}     #keys -  End  -
         ${general_mark_stus}     ) THEN
         ${general_mark_stus}      #組合條件
         ${general_mark_stus}      LET g_add_browse = " ${master_append_wc_s}",
         ${general_mark_stus}                         " ${master_field_pk01} = '", ${master_var_pk01}, "' "
         ${general_mark_stus}                         #master_keys - Start -
         ${general_mark_stus}                         ," AND ${master_field_pk${key}} = '", ${master_var_pk${key}}, "' "
         ${general_mark_stus}                         #keys -  End  -
         ${general_mark_stus}      #填到對應位置
         ${general_mark_stus}      CALL ${general_prefix}_browser_fill("")
         ${general_mark_stus}   END IF
         ${general_menu_signature}
          
         #查詢方案選擇 
         ON ACTION queryplansel
            CALL cl_dlg_qryplan_select() RETURNING ls_wc
            #不是空條件才寫入g_wc跟重新找資料
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               #tables - Start -
               INITIALIZE g_wc2_table${table} TO NULL
               #tables -  End  -
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "${master_tbl_name}" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "${detail_tbl_name}" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     #tables - Start -
                     WHEN la_wc[li_idx].tableid = "${detail_tbl_name_by_tbl${table}}" 
                        LET g_wc2_table${table} = la_wc[li_idx].wc
                     #tables -  End  -
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
                  #tables - Start -
                  OR NOT cl_null(g_wc2_table${table})
                  #tables -  End  -
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  #組合g_wc2
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  #tables - Start -
                  IF g_wc2_table${table} <> " 1=1" AND NOT cl_null(g_wc2_table${table}) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
                  END IF
                  #tables -  End  -
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
 
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
               END IF
               CALL ${general_prefix}_browser_fill("F")   #browser_fill()會將notice區塊清空
               ${general_i09_mark}CALL cl_notice()   #重新顯示,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            END IF
         
         #查詢方案選擇
         ON ACTION qbe_select
            CALL cl_qbe_list("m") RETURNING ls_wc
            IF NOT cl_null(ls_wc) THEN
               CALL util.JSON.parse(ls_wc, la_wc)
               INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
               #tables - Start -
               INITIALIZE g_wc2_table${table} TO NULL
               #tables -  End  -
               FOR li_idx = 1 TO la_wc.getLength()
                  CASE
                     WHEN la_wc[li_idx].tableid = "${master_tbl_name}" 
                        LET g_wc = la_wc[li_idx].wc
                     WHEN la_wc[li_idx].tableid = "${detail_tbl_name}" 
                        LET g_wc2_table1 = la_wc[li_idx].wc
                     #tables - Start -
                     WHEN la_wc[li_idx].tableid = "${detail_tbl_name_by_tbl${table}}" 
                        LET g_wc2_table${table} = la_wc[li_idx].wc
                     #tables -  End  -
                     WHEN la_wc[li_idx].tableid = "EXTENDWC"
                        LET g_wc2_extend = la_wc[li_idx].wc
                  END CASE
               END FOR
               IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1)
                  #tables - Start -
                  OR NOT cl_null(g_wc2_table${table})
                  #tables -  End  -
                  OR NOT cl_null(g_wc2_extend)
                  THEN
                  IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
                     LET g_wc2 = g_wc2_table1
                  END IF
                  #tables - Start -
                  IF g_wc2_table${table} <> " 1=1" AND NOT cl_null(g_wc2_table${table}) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
                  END IF
                  #tables -  End  -
                  IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
                     LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
                  END IF
                  IF g_wc2.subString(1,5) = " AND " THEN
                     LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
                  END IF
                  #取得條件後需要重查、跳到結果第一筆資料的功能程式段
                  CALL ${general_prefix}_browser_fill("F")
                  IF g_browser_cnt = 0 THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "" 
                     LET g_errparam.code = "-100" 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     CLEAR FORM
                  ELSE
                     CALL ${general_prefix}_fetch("F")
                  END IF
               END IF
            END IF
            #重新搜尋會將notice區塊清空,此處不可用EXIT DIALOG, SUBDIALOG重讀會導致部分變數消失
            ${general_i09_mark}CALL cl_notice()
          
         ${browser_filter_action}
         
         ON ACTION first
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch('F')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL ${general_prefix}_idx_chk()
            
         ON ACTION previous
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch('P')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL ${general_prefix}_idx_chk()
            
         ON ACTION jump
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch('/')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL ${general_prefix}_idx_chk()
            
         ON ACTION next
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch('N')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL ${general_prefix}_idx_chk()
            
         ON ACTION last
            LET g_action_choice = "fetch"
            CALL ${general_prefix}_fetch('L')
            LET g_current_row = g_current_idx
            LET g_curr_diag = ui.DIALOG.getCurrent()
            CALL ${general_prefix}_idx_chk()
          
         #excel匯出功能          
         ON ACTION exporttoexcel
            LET g_action_choice="exporttoexcel"
            IF cl_auth_chk_act("exporttoexcel") THEN
               #browser
               CALL g_export_node.clear()
               IF g_main_hidden = 1 THEN
                  LET g_export_node[1] = base.typeInfo.create(g_browser)
                  LET g_export_id[1]   = "s_browse"
                  CALL cl_export_to_excel()
               #非browser
               ELSE
                  LET g_export_node[1] = base.typeInfo.create(${detail_var_title})
                  LET g_export_id[1]   = "${sr_name}"
                  #pages - Start - 
                  LET g_export_node[${page}] = base.typeInfo.create(${detail_var_title${page}})
                  LET g_export_id[${page}]   = "${sr_name${page}}"
                  #pages -  End  -
                  #add-point:ON ACTION exporttoexcel name="menu.exporttoexcel"
                  {<point name="menu.exporttoexcel" />}
                  #END add-point
                  CALL cl_export_to_excel_getpage()
                  CALL cl_export_to_excel()
               END IF
            END IF
        
         ON ACTION close
            LET INT_FLAG = FALSE
            LET g_action_choice = "exit"
            EXIT DIALOG
          
         ON ACTION exit
            LET g_action_choice = "exit"
            EXIT DIALOG
    
         #主頁摺疊
         ON ACTION mainhidden       
            IF g_main_hidden THEN
               CALL gfrm_curr.setElementHidden("mainlayout",0)
               CALL gfrm_curr.setElementHidden("worksheet",1)
               LET g_main_hidden = 0
            ELSE
               CALL gfrm_curr.setElementHidden("mainlayout",1)
               CALL gfrm_curr.setElementHidden("worksheet",0)
               LET g_main_hidden = 1
               CALL cl_notice()
            END IF
            
         ${general_i09_mark}#瀏覽頁折疊
         ${general_i09_mark}ON ACTION worksheethidden   
         ${general_i09_mark}   IF g_main_hidden THEN
         ${general_i09_mark}      CALL gfrm_curr.setElementHidden("mainlayout",0)
         ${general_i09_mark}      CALL gfrm_curr.setElementHidden("worksheet",1)
         ${general_i09_mark}      LET g_main_hidden = 0
         ${general_i09_mark}   ELSE
         ${general_i09_mark}      CALL gfrm_curr.setElementHidden("mainlayout",1)
         ${general_i09_mark}      CALL gfrm_curr.setElementHidden("worksheet",0)
         ${general_i09_mark}      LET g_main_hidden = 1
         ${general_i09_mark}   END IF
         ${general_i09_mark}   IF lb_first THEN
         ${general_i09_mark}      LET lb_first = FALSE
         ${general_i09_mark}      NEXT FIELD ${detail_field_pk01}
         ${general_i09_mark}   END IF
       
         #單頭摺疊，可利用hot key "Alt-s"開啟/關閉單頭
         ON ACTION controls     
            IF g_header_hidden THEN
               CALL gfrm_curr.setElementHidden("vb_master",0)
               CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
               LET g_header_hidden = 0     #visible
            ELSE
               CALL gfrm_curr.setElementHidden("vb_master",1)
               CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
               LET g_header_hidden = 1     #hidden     
            END IF
    
         ${general_action_call}
         
         ${master_related_document}
         
         #主選單用ACTION
         &include "main_menu_exit_dialog.4gl"
         &include "relating_action.4gl"
    
         #交談指令共用ACTION
         &include "common_action.4gl" 
            CONTINUE DIALOG
      END DIALOG

      #(ver:79) ---add start---
      #add-point:ui_dialog段 after dialog name="ui_dialog.exit_dialog"
      {<point name="ui_dialog.exit_dialog"/>}
      #end add-point
      #(ver:79) --- add end ---
    
      IF g_action_choice = "exit" AND NOT cl_null(g_action_choice) THEN
         #add-point:ui_dialog段離開dialog前 name="ui_dialog.b_exit"
         {<point name="ui_dialog.b_exit"/>}
         #end add-point
         EXIT WHILE
      END IF
    
   END WHILE    
      
   CALL cl_set_act_visible("accept,cancel", TRUE)
    
END FUNCTION
{</section>}
 
{<section id="${app_id}.browser_fill" >}
#+ 瀏覽頁簽資料填充
PRIVATE FUNCTION ${general_prefix}_browser_fill(ps_page_action)
   #add-point:browser_fill段define(客製用) name="browser_fill.define_customerization"
   {<point name="browser_fill.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE ps_page_action    STRING
   DEFINE l_wc              STRING
   DEFINE l_wc2             STRING
   DEFINE l_sql             STRING
   DEFINE l_sub_sql         STRING
   DEFINE l_sql_rank        STRING
   #add-point:browser_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="browser_fill.define"
   {<point name="browser_fill.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理 name="browser_fill.before_browser_fill"
   {<point name="browser_fill.before_browser_fill"/>}
   #end add-point
   
   IF cl_null(g_wc) THEN
      LET g_wc = " 1=1"
   END IF
   IF cl_null(g_wc2) THEN
      LET g_wc2 = " 1=1"
   END IF
   LET l_wc  = g_wc.trim() 
   LET l_wc2 = g_wc2.trim()
 
   #add-point:browser_fill,foreach前 name="browser_fill.before_foreach"
   {<point name="browser_fill.before_foreach"/>}
   #end add-point
   
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件                      
      LET l_sub_sql = " SELECT DISTINCT ${master_field_allkeys} ",
                      " FROM ${master_tbl_name} ",
                      "${master_join_all} ",
                      "${detail_join_by_table} ", " ${detail_32wc_by_table} ",
                      #add-point:browser_fill段sql(${detail_join_name_by_table}) name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"
                      {<point name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"/>}
                      #end add-point
                      #tables - Start - 
                      "${detail_join_by_table${table}}", " ${detail_32wc_by_table${table}} ",
                      #add-point:browser_fill段sql(${detail_join_name_by_table${table}}) name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"
                      {<point name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"/>}
                      #end add-point
                      #tables -  End  -
                      #tables_d2 - Start - 
                      "${detail_join_by_table${table}}", " ${detail_32wc_by_table${table}} ",
                      #add-point:browser_fill段sql(${detail_join_name_by_table${table}}) name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"
                      {<point name="browser_fill.cnt.join.${detail_join_name_by_table${table}}"/>}
                      #end add-point
                      #tables -  End  -
                      "${master_append_join} ", 
                      "${detail_append_join} ", 
                      #tables - Start -    
                      "${detail_append_join${table}} ",                      
                      #tables -  End  -
                      #tables_d2 - Start - 
                      "${detail_append_join${table}} ",
                      #tables -  End  -
                      " WHERE ${master_append_wc_s} ${detail_append_wc_s} ",l_wc, " AND ", l_wc2, cl_sql_add_filter("${master_tbl_name}")
   ELSE
      #單身未輸入搜尋條件
      LET l_sub_sql = " SELECT DISTINCT ${master_field_allkeys} ",
                      " FROM ${master_tbl_name} ", 
                      " ${master_join_all} ",
                      " ${master_append_join} ",
                      " WHERE ${master_append_wc_s} ",l_wc CLIPPED, cl_sql_add_filter("${master_tbl_name}")
   END IF
   
   #add-point:browser_fill,cnt wc name="browser_fill.cnt_sqlwc"
   {<point name="browser_fill.cnt_sqlwc"/>}
   #end add-point
   
   LET g_sql = " SELECT COUNT(1) FROM (",l_sub_sql,")"
   
   #add-point:browser_fill,count前 name="browser_fill.before_count"
   {<point name="browser_fill.before_count"/>}
   #end add-point
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE header_cnt_pre FROM g_sql
      EXECUTE header_cnt_pre INTO g_browser_cnt   #總筆數
      FREE header_cnt_pre
   END IF
    
   IF g_browser_cnt > g_max_browse THEN
      IF g_error_show = 1 THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = g_browser_cnt
         LET g_errparam.code = 9035 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
      END IF
      LET g_browser_cnt = g_max_browse
   END IF
   
   DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
   DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
 
   #根據行為確定資料填充位置及WC
   IF cl_null(g_add_browse) THEN
      #清除畫面
      CLEAR FORM                
      INITIALIZE ${master_var_title}.* TO NULL
      CALL ${detail_var_title}.clear()        
      #pages - Start -
      CALL ${detail_var_title${page}}.clear() 
      #pages -  End  -
      #add-point:browser_fill g_add_browse段額外處理 name="browser_fill.add_browse.other"
      {<point name="browser_fill.add_browse.other"/>}
      #end add-point   
      CALL g_browser.clear()
      LET g_cnt = 1
   ELSE
      LET l_wc  = g_add_browse
      LET l_wc2 = " 1=1" 
      LET g_cnt = g_current_idx
   END IF
 
   #依照${browser_fields_all} Browser欄位定義(取代原本bs_sql功能)
   #考量到單身可能下條件, 所以此處需join單身所有table
   #DISTINCT是為了避免在join時出現重複的資料(如果不加DISTINCT則須在程式中過濾)
   IF g_wc2 <> " 1=1" THEN
      #單身有輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT ${browser_field_stus}${browser_fields_all}${browser_reference_select_field} ",
                  " FROM ${master_tbl_name} t0",
                  " ${master_join_all} ",
                  " ${detail_join_by_table} ", " ${detail_32wc_by_table} ", 
                  #add-point:browser_fill段sql(${detail_join_name_by_table}) name="browser_fill.join.${detail_join_name_by_table}"
                  {<point name="browser_fill.join.${detail_join_name_by_table}"/>}
                  #end add-point
                  #tables - Start - 
                  " ${detail_join_by_table${table}}", " ${detail_32wc_by_table${table}} ", 
                  #add-point:browser_fill段sql(${detail_join_name_by_table${table}}) name="browser_fill.join.${detail_join_name_by_table${table}}"
                  {<point name="browser_fill.join.${detail_join_name_by_table${table}}"/>}
                  #end add-point
                  #tables -  End  -
                  #tables_d2 - Start - 
                  " ${detail_join_by_table${table}}", " ${detail_32wc_by_table${table}} ", 
                  #add-point:browser_fill段sql(${detail_join_name_by_table${table}}) name="browser_fill.join.${detail_join_name_by_table${table}}"
                  {<point name="browser_fill.join.${detail_join_name_by_table${table}}"/>}
                  #end add-point
                  #tables -  End  - 
                  "${detail_append_join} ", 
                  #tables - Start -    
                  "${detail_append_join${table}} ",                      
                  #tables -  End  -
                  #tables_d2 - Start - 
                  "${detail_append_join${table}} ",
                  #tables -  End  -
                  ${browser_reference_join_sql}
                  " WHERE ${master_append_wc_s_t0} ",l_wc," AND ",l_wc2, cl_sql_add_filter("${master_tbl_name}")
   ELSE
      #單身無輸入搜尋條件   
      LET g_sql = " SELECT DISTINCT ${browser_field_stus}${browser_fields_all}${browser_reference_select_field} ",
                  " FROM ${master_tbl_name} t0",
                  " ${master_join_all} ",
                  ${browser_reference_join_sql}
                  " WHERE ${master_append_wc_s_t0} ",l_wc, cl_sql_add_filter("${master_tbl_name}")
   END IF
   #add-point:browser_fill,sql wc name="browser_fill.fill_sqlwc"
   {<point name="browser_fill.fill_sqlwc"/>}
   #end add-point
   LET g_sql = g_sql, " ORDER BY ${master_field_allkeys} ",g_order
 
   #add-point:browser_fill,before_prepare name="browser_fill.before_prepare"
   {<point name="browser_fill.before_prepare"/>}
   #end add-point
        
   #LET g_sql = cl_sql_add_tabid(g_sql,"${master_tbl_name}") #WC重組
   LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
   
   IF g_sql.getIndexOf(" 1=2",1) THEN
      DISPLAY "INFO: 1=2 jumped!"
   ELSE
      PREPARE browse_pre FROM g_sql
      DECLARE browse_cur CURSOR FOR browse_pre
      
      #add-point:browser_fill段open cursor name="browser_fill.open"
      {<point name="browser_fill.open"/>}
      #end add-point
      
      FOREACH browse_cur INTO g_browser[g_cnt].b_statepic,${browser_vars_all}${browser_reference_fetch_field}
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "Foreach:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
      
         #add-point:browser_fill段reference name="browser_fill.reference"
         {<point name="browser_fill.reference"/>}
         #end add-point
      
         ${general_i09_mark}#遮罩相關處理
         ${general_i09_mark}CALL ${general_prefix}_browser_mask()
      
         ${browser_state_define}
         LET g_cnt = g_cnt + 1
         IF g_cnt > g_max_browse THEN
            EXIT FOREACH
         END IF
         
      END FOREACH
      FREE browse_pre
   END IF
   
   #清空g_add_browse, 並指定指標位置
   IF NOT cl_null(g_add_browse) THEN
      LET g_add_browse = ""
      CALL g_curr_diag.setCurrentRow("s_browse",g_current_idx)
   END IF
   
   IF cl_null(g_browser[g_cnt].b_${master_field_pk01}) THEN
      CALL g_browser.deleteElement(g_cnt)
   END IF
   
   LET g_header_cnt  = g_browser.getLength()
   LET g_browser_cnt = g_browser.getLength()
   
   #筆數顯示
   IF g_browser_cnt > 0 THEN
      DISPLAY g_browser_idx TO FORMONLY.b_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.b_count #總筆數
      DISPLAY g_browser_idx TO FORMONLY.h_index #當下筆數
      DISPLAY g_browser_cnt TO FORMONLY.h_count #總筆數
      DISPLAY g_detail_idx  TO FORMONLY.idx     #單身當下筆數
      DISPLAY g_detail_cnt  TO FORMONLY.cnt     #單身總筆數
   ELSE
      DISPLAY '' TO FORMONLY.b_index #當下筆數
      DISPLAY '' TO FORMONLY.b_count #總筆數
      DISPLAY '' TO FORMONLY.h_index #當下筆數
      DISPLAY '' TO FORMONLY.h_count #總筆數
      DISPLAY '' TO FORMONLY.idx     #單身當下筆數
      DISPLAY '' TO FORMONLY.cnt     #單身總筆數
   END IF
 
   LET g_rec_b = g_cnt - 1
   LET g_detail_cnt = g_rec_b
   LET g_cnt = 0

   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
                  
   
   #add-point:browser_fill段結束前 name="browser_fill.after"
   {<point name="browser_fill.after"/>}
   #end add-point   
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.ui_headershow" >}
#+ 單頭資料重新顯示
PRIVATE FUNCTION ${general_prefix}_ui_headershow()
   #add-point:ui_headershow段define(客製用) name="ui_headershow.define_customerization"
   {<point name="ui_headershow.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   #add-point:ui_headershow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_headershow.define"
   {<point name="ui_headershow.define"/>} 
   #end add-point      
   
   #add-point:Function前置處理  name="ui_headershow.pre_function"
   {<point name="ui_headershow.pre_function"/>}
   #end add-point
   
   LET ${master_var_pk01} = g_browser[g_current_idx].b_${master_field_pk01}   
   #master_keys - Start -
   LET ${master_var_pk${key}} = g_browser[g_current_idx].b_${master_field_pk${key}}   
   #keys -  End  -
   ${master_refresh}
   ${master_append_select}
   CALL ${general_prefix}_${master_tbl_name}_mask()
   CALL ${general_prefix}_show()
      
END FUNCTION
{</section>}
 
{<section id="${app_id}.ui_detailshow" >}
#+ 單身資料重新顯示
PRIVATE FUNCTION ${general_prefix}_ui_detailshow()
   #add-point:ui_detailshow段define(客製用) name="ui_detailshow.define_customerization"
   {<point name="ui_detailshow.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   #add-point:ui_detailshow段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_detailshow.define"
   {<point name="ui_detailshow.define"/>} 
   #end add-point    
 
   #add-point:Function前置處理 name="ui_detailshow.before"
   {<point name="ui_detailshow.before"/>}
   #end add-point    
   
   IF g_curr_diag IS NOT NULL THEN
      CALL g_curr_diag.setCurrentRow("${sr_name}",g_detail_idx)      
      #pages - Start -
      CALL g_curr_diag.setCurrentRow("${sr_name${page}}",g_detail_idx)
      #pages -  End  -
   END IF
   
   #add-point:ui_detailshow段after name="ui_detailshow.after"
   {<point name="ui_detailshow.after"/>}
   #end add-point    
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.ui_browser_refresh" >}
#+ 瀏覽頁簽資料重新顯示
PRIVATE FUNCTION ${general_prefix}_ui_browser_refresh()
   #add-point:ui_browser_refresh段define(客製用) name="ui_browser_refresh.define_customerization"
   {<point name="ui_browser_refresh.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE l_i  LIKE type_t.num10
   #add-point:ui_browser_refresh段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="ui_browser_refresh.define"
   {<point name="ui_browser_refresh.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="ui_browser_refresh.pre_function"
   {<point name="ui_browser_refresh.pre_function"/>}
   #end add-point
   
   LET g_browser_cnt = g_browser.getLength()
   LET g_header_cnt  = g_browser.getLength()
   FOR l_i =1 TO g_browser.getLength()
      IF g_browser[l_i].b_${master_field_pk01} = ${master_var_pk01} 
         #master_keys - Start -
         AND g_browser[l_i].b_${master_field_pk${key}} = ${master_var_pk${key}} 
         #keys -  End  -
         THEN
         CALL g_browser.deleteElement(l_i)
         EXIT FOR
      END IF
   END FOR
   LET g_browser_cnt = g_browser_cnt - 1
   LET g_header_cnt = g_header_cnt - 1
    
   #若無資料則關閉相關功能
   IF g_browser_cnt = 0 THEN
      CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce,mainhidden", FALSE)
      CALL cl_navigator_setting(0,0)
      CLEAR FORM
   ELSE
      CALL cl_set_act_visible("mainhidden", TRUE)
   END IF
   
   #add-point:ui_browser_refresh段after name="ui_browser_refresh.after"
   {<point name="ui_browser_refresh.after"/>}
   #end add-point    
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.construct" >}
#+ QBE資料查詢
PRIVATE FUNCTION ${general_prefix}_construct()
   #add-point:cs段define(客製用) name="cs.define_customerization"
   {<point name="cs.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE ls_return   STRING
   DEFINE ls_result   STRING 
   DEFINE ls_wc       STRING 
   DEFINE la_wc       DYNAMIC ARRAY OF RECORD
          tableid     STRING,
          wc          STRING
          END RECORD
   DEFINE li_idx      LIKE type_t.num10
   #add-point:cs段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="cs.define"
   {<point name="cs.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="cs.pre_function"
   {<point name="cs.pre_function"/>}
   #end add-point
    
   #清除畫面
   CLEAR FORM                
   INITIALIZE ${master_var_title}.* TO NULL
   CALL ${detail_var_title}.clear()        
   #pages - Start -
   CALL ${detail_var_title${page}}.clear() 
   #pages -  End  -
   
   LET g_action_choice = ""
    
   INITIALIZE g_wc TO NULL
   INITIALIZE g_wc2 TO NULL
   
   INITIALIZE g_wc2_table1 TO NULL
   #tables - Start - 
   INITIALIZE g_wc2_table${table} TO NULL
   #tables -  End  -
    
   LET g_qryparam.state = 'c'
   
   #add-point:cs段開始前 name="cs.before_construct"
   {<point name="cs.before_construct"/>}
   #end add-point 
   
   #使用DIALOG包住 單頭CONSTRUCT及單身CONSTRUCT
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
      
      #單頭
      CONSTRUCT BY NAME g_wc ON ${master_fields_qbe}
 
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.head.before_construct"
            {<point name="cs.head.before_construct"/>}
            #end add-point 
            
         #公用欄位開窗相關處理
         ${master_commons_ctrlp}
            
         #一般欄位開窗相關處理    
         ${master_fields_ctrlp}
         
      END CONSTRUCT
 
      #單身根據table分拆construct
      CONSTRUCT g_wc2_table1 ON ${detail_tbl_fields_qbe}
           FROM ${detail_tbl_srfield_all}
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body.before_construct"
            {<point name="cs.body.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理
       ${detail_commons_ctrlp}
         
       #單身一般欄位開窗相關處理
       ${detail_tbl_fields_ctrlp}   
       
      END CONSTRUCT
      
      #tables - Start - 
      CONSTRUCT g_wc2_table${table} ON ${detail_tbl_fields_qbe${table}}
           FROM ${detail_tbl_srfield_all${table}}
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body${table}.before_construct"
            {<point name="cs.body${table}.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table ${table})
       ${detail_commons_ctrlp${table}}
       
       #單身一般欄位開窗相關處理       
       ${detail_tbl_fields_ctrlp${table}}   
       
      END CONSTRUCT
      #tables -  End  -
      
      #tables_d2 - Start - 
      CONSTRUCT g_wc2_table${table} ON ${detail_tbl_fields_qbe${table}}
           FROM ${detail_tbl_srfield_all${table}}
                      
         BEFORE CONSTRUCT
            #add-point:cs段before_construct name="cs.body${table}.before_construct"
            {<point name="cs.body${table}.before_construct"/>}
            #end add-point 
            
       #單身公用欄位開窗相關處理(table ${table})
       ${detail_commons_ctrlp${table}}
       
       #單身一般欄位開窗相關處理       
       ${detail_tbl_fields_ctrlp${table}}   
       
      END CONSTRUCT
      #tables -  End  -
      
      #add-point:cs段add_cs(本段內只能出現新的CONSTRUCT指令) name="cs.add_cs"
      {<point name="cs.add_cs"/>}
      #end add-point
 
      BEFORE DIALOG
         CALL cl_qbe_init()
         #add-point:cs段b_dialog name="cs.b_dialog"
         {<point name="cs.b_dialog"/>}
         #end add-point  
 
      #查詢方案列表
      ON ACTION qbe_select
         LET ls_wc = ""
         CALL cl_qbe_list("c") RETURNING ls_wc
         IF NOT cl_null(ls_wc) THEN
            CALL util.JSON.parse(ls_wc, la_wc)
            INITIALIZE g_wc, g_wc2, g_wc2_table1, g_wc2_extend TO NULL
            #tables - Start -
            INITIALIZE g_wc2_table${table} TO NULL
            #tables -  End  -
            FOR li_idx = 1 TO la_wc.getLength()
               CASE
                  WHEN la_wc[li_idx].tableid = "${master_tbl_name}" 
                     LET g_wc = la_wc[li_idx].wc
                  WHEN la_wc[li_idx].tableid = "${detail_tbl_name}" 
                     LET g_wc2_table1 = la_wc[li_idx].wc
                  #tables - Start -
                  WHEN la_wc[li_idx].tableid = "${detail_tbl_name_by_tbl${table}}" 
                     LET g_wc2_table${table} = la_wc[li_idx].wc
                  #tables -  End  -
               END CASE
            END FOR
         END IF
    
      #條件儲存為方案
      ON ACTION qbe_save
         CALL cl_qbe_save()
 
      ON ACTION accept
         ACCEPT DIALOG
 
      ON ACTION cancel
         LET INT_FLAG = 1
         EXIT DIALOG 
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG
   END DIALOG
   
   #組合g_wc2
   LET g_wc2 = g_wc2_table1
   #tables - Start - 
   IF g_wc2_table${table} <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
   END IF
   #tables -  End  -
   #tables_d - Start - 
   IF g_wc2_table${table} <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
   END IF
   #tables -  End  - 
   #tables_d2 - Start - 
   IF g_wc2_table${table} <> " 1=1" THEN
      LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
   END IF
   #tables -  End  - 
   
   #add-point:cs段結束前 name="cs.after_construct"
   {<point name="cs.after_construct"/>}
   #end add-point    
 
   IF INT_FLAG THEN
      RETURN
   END IF
 
END FUNCTION
{</section>}
 
${browser_filter_funcs}
 
{<section id="${app_id}.query" >}
#+ 資料查詢QBE功能準備
PRIVATE FUNCTION ${general_prefix}_query()
   #add-point:query段define(客製用) name="query.define_customerization"
   {<point name="query.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   DEFINE ls_wc STRING
   #add-point:query段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="query.define"
   {<point name="query.define"/>} 
   #end add-point   
   
   #add-point:Function前置處理  name="query.pre_function"
   {<point name="query.pre_function"/>}
   #end add-point
   
   #切換畫面
   ${general_i09_mark}IF g_main_hidden THEN
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("mainlayout",0)
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("worksheet",1)
   ${general_i09_mark}   LET g_main_hidden = 0
   ${general_i09_mark}END IF   
   
   LET ls_wc = g_wc
   
   LET INT_FLAG = 0
   CALL cl_navigator_setting( g_current_idx, g_detail_cnt )
   ERROR ""
   
   #清除畫面及相關資料
   CLEAR FORM
   CALL g_browser.clear()       
   CALL ${detail_var_title}.clear()
   #pages - Start -
   CALL ${detail_var_title${page}}.clear()
   #pages -  End  -
   
   #add-point:query段other name="query.other"
   {<point name="query.other"/>}
   #end add-point   
   
   DISPLAY '' TO FORMONLY.idx
   DISPLAY '' TO FORMONLY.cnt
   DISPLAY '' TO FORMONLY.b_index
   DISPLAY '' TO FORMONLY.b_count
   DISPLAY '' TO FORMONLY.h_index
   DISPLAY '' TO FORMONLY.h_count
   
   CALL ${general_prefix}_construct()
 
   IF INT_FLAG THEN
      #取消查詢
      LET INT_FLAG = 0
      #LET g_wc = ls_wc
      LET g_wc = " 1=2"
      CALL ${general_prefix}_browser_fill("")
      CALL ${general_prefix}_fetch("")
      RETURN
   END IF
   
   #儲存WC資訊
   CALL cl_dlg_save_user_latestqry("("||g_wc||") AND ("||g_wc2||")")
   
   #搜尋後資料初始化 
   LET g_detail_cnt  = 0
   LET g_current_idx = 1
   LET g_current_row = 0
   LET g_detail_idx  = 1
   LET g_detail_idx2 = 1
   LET g_detail_idx_list[1] = 1
   #pages - Start -
   LET g_detail_idx_list[${page}] = 1
   #pages -  End  -
   LET g_error_show  = 1
   LET g_wc_filter   = ""
   LET l_ac = 1
   CALL FGL_SET_ARR_CURR(1)
   ${general_i09_mark}${browser_display_condition}
   CALL ${general_prefix}_browser_fill("F")
         
   IF g_browser_cnt = 0 THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "-100" 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
   ELSE
      CALL ${general_prefix}_fetch("F") 
      #顯示單身筆數
      CALL ${general_prefix}_idx_chk()
   END IF
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.fetch" >}
#+ 指定PK後抓取單頭其他資料
PRIVATE FUNCTION ${general_prefix}_fetch(p_flag)
   #add-point:fetch段define(客製用) name="fetch.define_customerization"
   {<point name="fetch.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE p_flag     LIKE type_t.chr1
   DEFINE ls_msg     STRING
   #add-point:fetch段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fetch.define"
   {<point name="fetch.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="fetch.pre_function"
   {<point name="fetch.pre_function"/>}
   #end add-point
   
   IF g_browser_cnt = 0 THEN
      RETURN
   END IF
 
   #清空第二階單身
   #pages_d - Start -
   CALL ${detail_var_title${page}}.clear()
   #pages -  End  - 
   
   CALL cl_ap_performance_next_start()
   CASE p_flag
      WHEN 'F' 
         LET g_current_idx = 1
      WHEN 'L'  
         LET g_current_idx = g_browser.getLength()              
      WHEN 'P'
         IF g_current_idx > 1 THEN               
            LET g_current_idx = g_current_idx - 1
         END IF 
      WHEN 'N'
         IF g_current_idx < g_header_cnt THEN
            LET g_current_idx =  g_current_idx + 1
         END IF        
      WHEN '/'
         IF (NOT g_no_ask) THEN    
            CALL cl_set_act_visible("accept,cancel", TRUE)    
            CALL cl_getmsg('fetch',g_lang) RETURNING ls_msg
            LET INT_FLAG = 0
 
            PROMPT ls_msg CLIPPED,':' FOR g_jump
               #交談指令共用ACTION
               &include "common_action.4gl" 
            END PROMPT
 
            CALL cl_set_act_visible("accept,cancel", FALSE)    
            IF INT_FLAG THEN
                LET INT_FLAG = 0
                EXIT CASE  
            END IF           
         END IF
         
         IF g_jump > 0 AND g_jump <= g_browser.getLength() THEN
             LET g_current_idx = g_jump
         END IF
         LET g_no_ask = FALSE  
   END CASE 
 
   ${general_i09_mark}CALL g_curr_diag.setCurrentRow("s_browse", g_current_idx) #設定browse 索引
   
   LET g_current_row = g_current_idx
   LET g_detail_cnt = g_header_cnt                  
   
   #單身總筆數顯示
   IF g_detail_cnt > 0 THEN
      #若單身有資料時, idx至少為1
      IF g_detail_idx <= 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx  
   ELSE
      LET g_detail_idx = 0
      DISPLAY '' TO FORMONLY.idx    
   END IF
   
   #瀏覽頁筆數顯示
   ${general_i09_mark}LET g_browser_idx = g_pagestart+g_current_idx-1
   ${general_t01_mark}LET g_pagestart = g_current_idx
   ${general_i09_mark}DISPLAY g_browser_idx TO FORMONLY.b_index   #當下筆數
   ${general_i09_mark}DISPLAY g_browser_idx TO FORMONLY.h_index   #當下筆數
   ${general_t01_mark}DISPLAY g_pagestart TO FORMONLY.b_index   #當下筆數
   ${general_t01_mark}DISPLAY g_pagestart TO FORMONLY.h_index   #當下筆數
   
   ${general_i09_mark}CALL cl_navigator_setting( g_current_idx, g_browser_cnt )
   ${general_t01_mark}CALL cl_navigator_setting( g_pagestart, g_browser_cnt )
 
   #代表沒有資料
   IF g_current_idx = 0 OR g_browser.getLength() = 0 THEN
      RETURN
   END IF
   
   #避免超出browser資料筆數上限
   IF g_current_idx > g_browser.getLength() THEN
      LET g_browser_idx = g_browser.getLength()
      LET g_current_idx = g_browser.getLength()
   END IF
   
   LET ${master_var_pk01} = g_browser[g_current_idx].b_${master_field_pk01}
   #master_keys - Start -
   LET ${master_var_pk${key}} = g_browser[g_current_idx].b_${master_field_pk${key}}
   #keys -  End  -
   
   #重讀DB,因TEMP有不被更新特性
   ${master_refresh}
   
   #遮罩相關處理
   LET ${master_var_title}_mask_o.* =  ${master_var_title}.*
   CALL ${general_prefix}_${master_tbl_name}_mask()
   LET ${master_var_title}_mask_n.* =  ${master_var_title}.*
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL ${general_prefix}_set_act_visible()   
   CALL ${general_prefix}_set_act_no_visible()
   
   #add-point:fetch段action控制 name="fetch.action_control"
   {<point name="fetch.action_control"/>}
   #end add-point  
   
   ${master_append_select}
   
   #add-point:fetch結束前 name="fetch.after"
   {<point name="fetch.after" />}
   #end add-point
   
   #保存單頭舊值
   LET ${master_var_title}_t.* = ${master_var_title}.*
   LET ${master_var_title}_o.* = ${master_var_title}.*
   
   ${master_mark_ownid}LET g_data_owner = ${master_var_ownid}      
   ${master_mark_owndp}LET g_data_dept  = ${master_var_owndp}
   
   #重新顯示   
   CALL ${general_prefix}_show()
 
   ${general_signature_chk}
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.insert" >}
#+ 資料新增
PRIVATE FUNCTION ${general_prefix}_insert()
   #add-point:insert段define(客製用) name="insert.define_customerization"
   {<point name="insert.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   #add-point:insert段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert.define"
   {<point name="insert.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="insert.pre_function"
   {<point name="insert.pre_function"/>}
   #end add-point
   
   #清畫面欄位內容
   CLEAR FORM                    
   CALL ${detail_var_title}.clear()   
   #pages - Start -
   CALL ${detail_var_title${page}}.clear()  
   #pages -  End  -
 
   INITIALIZE ${master_var_title}.* TO NULL             #DEFAULT 設定
   
   LET g_${master_field_pk01}_t = NULL
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = NULL
   #keys -  End  -
   
   LET g_master_insert = FALSE
   
   #add-point:insert段before name="insert.before"
   {<point name="insert.before"/>}
   #end add-point    
   
   CALL s_transaction_begin()
   WHILE TRUE
      #公用欄位給值(單頭)
      ${master_insert_define}
 
      #append欄位給值
      ${master_define_append}
     
      #一般欄位給值
      ${master_fields_default}
  
      #add-point:單頭預設值 name="insert.default"
      {<point name="insert.default"/>}
      #end add-point 
      
      #保存單頭舊值(用於資料輸入錯誤還原預設值時使用)
      LET ${master_var_title}_t.* = ${master_var_title}.*
      LET ${master_var_title}_o.* = ${master_var_title}.*
      
      #顯示狀態(stus)圖片
      ${general_state_show}
    
      CALL ${general_prefix}_input("a")
      
      #add-point:單頭輸入後 name="insert.after_insert"
      {<point name="insert.after_insert"/>}
      #end add-point
      
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         CALL cl_err()
      END IF
      
      IF NOT g_master_insert THEN
         DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
         DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
         INITIALIZE ${master_var_title}.* TO NULL
         INITIALIZE ${detail_var_title} TO NULL
         #pages - Start -
         INITIALIZE ${detail_var_title${page}} TO NULL
         #pages -  End  -      
         #add-point:取消新增後 name="insert.cancel"
         {<point name="insert.cancel"/>}
         #end add-point 
         CALL ${general_prefix}_show()
         RETURN
      END IF
      
      LET INT_FLAG = 0
      #CALL ${detail_var_title}.clear()
      ##pages - Start -
      #CALL ${detail_var_title${page}}.clear()
      ##pages -  End  -
 
      LET g_rec_b = 0
      ${general_c03a_mark}CALL s_transaction_end('Y','0')
      EXIT WHILE
        
   END WHILE
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL ${general_prefix}_set_act_visible()   
   CALL ${general_prefix}_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_${master_field_pk01}_t = ${master_var_pk01}
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
   #keys -  End  -
   
   #組合新增資料的條件
   LET g_add_browse = " ${master_append_wc_s}",
                      " ${master_field_pk01} = '", ${master_var_pk01}, "' "
                      #master_keys - Start -
                      ," AND ${master_field_pk${key}} = '", ${master_var_pk${key}}, "' "
                      #keys -  End  -
                      
   #add-point:組合新增資料的條件後 name="insert.after.add_browse"
   {<point name="insert.after.add_browse"/>}
   #end add-point
      
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL ${general_prefix}_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   CLOSE ${general_prefix}_cl
   
   CALL ${general_prefix}_idx_chk()
   
   #撈取異動後的資料(主要是帶出reference)
   ${master_refresh}
   ${master_append_select}
   
   #遮罩相關處理
   LET ${master_var_title}_mask_o.* =  ${master_var_title}.*
   CALL ${general_prefix}_${master_tbl_name}_mask()
   LET ${master_var_title}_mask_n.* =  ${master_var_title}.*
   
   #將資料顯示到畫面上
   DISPLAY BY NAME ${master_vars_all}
   
   #add-point:新增結束後 name="insert.after"
   {<point name="insert.after"/>}
   #end add-point 
   
   ${master_mark_ownid}LET g_data_owner = ${master_var_ownid}      
   ${master_mark_owndp}LET g_data_dept  = ${master_var_owndp}
   
   #功能已完成,通報訊息中心
   CALL ${general_prefix}_msgcentre_notify('insert')
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.modify" >}
#+ 資料修改
PRIVATE FUNCTION ${general_prefix}_modify()
   #add-point:modify段define(客製用) name="modify.define_customerization"
   {<point name="modify.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE l_new_key    DYNAMIC ARRAY OF STRING
   DEFINE l_old_key    DYNAMIC ARRAY OF STRING
   DEFINE l_field_key  DYNAMIC ARRAY OF STRING
   DEFINE l_wc2_table1          STRING
   #tables - Start -
   DEFINE l_wc2_table${table}   STRING
   #tables -  End  -
   #tables_d2 - Start -
   DEFINE l_wc2_table${table}   STRING
   #tables -  End  -
   #add-point:modify段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="modify.define"
   {<point name="modify.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="modify.pre_function"
   {<point name="modify.pre_function"/>}
   #end add-point
   
   #保存單頭舊值
   LET ${master_var_title}_t.* = ${master_var_title}.*
   LET ${master_var_title}_o.* = ${master_var_title}.*
   
   IF ${master_var_pk01} IS NULL
   #master_keys - Start -
   OR ${master_var_pk${key}} IS NULL
   #keys -  End  -
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
 
   ERROR ""
  
   LET g_${master_field_pk01}_t = ${master_var_pk01}
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
   #keys -  End  -
   CALL s_transaction_begin()
   
   OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE ${general_prefix}_cl
      ${general_c03a_mark}CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   ${master_refresh}
   
   #檢查是否允許此動作
   IF NOT ${general_prefix}_action_chk() THEN
      ${general_c03a_mark}CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET ${master_var_title}_mask_o.* =  ${master_var_title}.*
   CALL ${general_prefix}_${master_tbl_name}_mask()
   LET ${master_var_title}_mask_n.* =  ${master_var_title}.*
   
   ${master_append_select}
   
   #add-point:modify段show之前 name="modify.before_show"
   {<point name="modify.before_show"/>}
   #end add-point  
   
   #LET l_wc2_table1 = g_wc2_table1
   #LET g_wc2_table1 = " 1=1"
   ##tables - Start -
   #LET l_wc2_table${table} = g_wc2_table${table}
   #LET l_wc2_table${table} = " 1=1"
   ##tables -  End  -
   ##tables_d2 - Start -
   #LET l_wc2_table${table} = g_wc2_table${table}
   #LET l_wc2_table${table} = " 1=1"
   ##tables -  End  -
   
   CALL ${general_prefix}_show()
   #add-point:modify段show之後 name="modify.after_show"
   {<point name="modify.after_show"/>}
   #end add-point
   
   #LET g_wc2_table1 = l_wc2_table1
   ##tables - Start -
   #LET  g_wc2_table${table} = l_wc2_table${table} 
   ##tables -  End  -
   ##tables_d2 - Start -
   #LET  g_wc2_table${table} = l_wc2_table${table} 
   ##tables -  End  -
    
   WHILE TRUE
      LET g_${master_field_pk01}_t = ${master_var_pk01}
      #master_keys - Start -
      LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
      #keys -  End  -
      
      #寫入修改者/修改日期資訊(單頭)
      ${master_upder_define}
      
      #add-point:modify段修改前 name="modify.before_input"
      {<point name="modify.before_input"/>}
      #end add-point
      
      #欄位更改
      LET g_loc = 'n'
      LET g_update = FALSE
      LET g_master_commit = "N"
      CALL ${general_prefix}_input("u")
      LET g_loc = 'n'
 
      #add-point:modify段修改後 name="modify.after_input"
      {<point name="modify.after_input"/>}
      #end add-point
      
      ${general_modify_mark}IF g_update OR NOT INT_FLAG THEN
      ${general_modify_mark}   #若有modid跟moddt則進行update
      ${general_modify_mark}   UPDATE ${master_tbl_name} SET (${master_modify_fields_update}) = (${master_modify_vars_update})
      ${general_modify_mark}    WHERE ${master_append_wc} ${master_field_pk01} = g_${master_field_pk01}_t
      ${general_modify_mark}      #master_keys - Start -
      ${general_modify_mark}      ${general_modify_mark}AND ${master_field_pk${key}} = g_${master_field_pk${key}}_t
      ${general_modify_mark}      #keys -  End  -
      ${general_modify_mark}END IF
    
      IF INT_FLAG THEN
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         LET INT_FLAG = 0
         #若單頭無commit則還原
         IF g_master_commit = "N" THEN
            LET ${master_var_title}.* = ${master_var_title}_t.*
            CALL ${general_prefix}_show()
         END IF
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = '' 
         LET g_errparam.code = 9001 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN
      END IF 
                  
      #若單頭key欄位有變更
      IF ${master_var_pk01} != ${master_var_title}_t.${master_field_pk01}
      #master_keys - Start -
      OR ${master_var_pk${key}} != ${master_var_title}_t.${master_field_pk${key}}
      #keys -  End  -
      THEN
         CALL s_transaction_begin()
         
         #add-point:單身fk修改前 name="modify.body.b_fk_update"
         {<point name="modify.body.b_fk_update" mark="Y"/>}
         #end add-point
         
         #更新單身key值
         UPDATE ${detail_tbl_name} SET ${detail_field_fk01} = ${master_var_pk01}
                                       #master_keys - Start -
                                       ,${detail_field_fk${key}} = ${master_var_pk${key}}
                                       #keys -  End  -
          WHERE ${detail_append_wc} ${detail_field_fk01} = ${master_var_title}_t.${master_field_pk01}
            #master_keys - Start -
            AND ${detail_field_fk${key}} = ${master_var_title}_t.${master_field_pk${key}}
            #keys -  End  -
            
         #add-point:單身fk修改中 name="modify.body.m_fk_update"
         {<point name="modify.body.m_fk_update"/>}
         #end add-point
 
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "${detail_tbl_name}" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   ${general_c03a_mark}CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         
         #add-point:單身fk修改後 name="modify.body.a_fk_update"
         {<point name="modify.body.a_fk_update"/>}
         #end add-point
         
         #tables - Start - 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update${table}"
         {<point name="modify.body.b_fk_update${table}" mark="Y"/>}
         #end add-point
         
         UPDATE ${detail_tbl_name_by_tbl${table}}
            SET ${detail_by_tbl${table}_field_fk01} = ${master_var_pk01}
               #master_keys - Start -
               ,${detail_by_tbl${table}_field_fk${key}} = ${master_var_pk${key}}
               #keys -  End  -
          WHERE ${detail_append_wc_by_tbl${table}}
                ${detail_by_tbl${table}_field_fk01} = g_${master_field_pk01}_t
            #master_keys - Start -
            AND ${detail_by_tbl${table}_field_fk${key}} = g_${master_field_pk${key}}_t
            #keys -  End  -
         #add-point:單身fk修改中 name="modify.body.m_fk_update${table}"
         {<point name="modify.body.m_fk_update${table}"/>}
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            #   INITIALIZE g_errparam TO NULL 
            #   LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}" 
            #   LET g_errparam.code = "std-00009" 
            #   LET g_errparam.popup = TRUE 
            #   CALL cl_err()
            #   ${general_c03a_mark}CALL s_transaction_end('N','0')
            #   CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update${table}"
         {<point name="modify.body.a_fk_update${table}"/>}
         #end add-point
         #tables -  End  -
         
         #tables_d2 - Start - 
         #更新單身key值
         #add-point:單身fk修改前 name="modify.body.b_fk_update${table}"
         {<point name="modify.body.b_fk_update${table}" mark="Y"/>}
         #end add-point
         UPDATE ${detail_tbl_name_by_tbl${table}}
            SET ${detail_by_tbl${table}_field_fk01} = ${master_var_pk01}
               #master_keys - Start -
               ,${detail_by_tbl${table}_field_fk${key}} = ${master_var_pk${key}}
               #keys -  End  -
          WHERE ${detail_append_wc_by_tbl${table}}
                ${detail_by_tbl${table}_field_fk01} = g_${master_field_pk01}_t
            #master_keys - Start -
            AND ${detail_by_tbl${table}_field_fk${key}} = g_${master_field_pk${key}}_t
            #keys -  End  -
         #add-point:單身fk修改中 name="modify.body.m_fk_update${table}"
         {<point name="modify.body.m_fk_update${table}"/>}
         #end add-point
         CASE
            WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}" 
               LET g_errparam.code = "std-00009" 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
            WHEN SQLCA.SQLCODE #其他錯誤
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CONTINUE WHILE
         END CASE
         #add-point:單身fk修改後 name="modify.body.a_fk_update${table}"
         {<point name="modify.body.a_fk_update${table}"/>}
         #end add-point
         #tables -  End  -
         
         #UPDATE 多語言table key值
         ${detail_append_pk_upd1}
         #pages - Start -
         ${detail_append_pk_upd${page}}
         #pages -  End  -
         ${general_c03a_mark}CALL s_transaction_end('Y','0')
      END IF
    
      EXIT WHILE
   END WHILE
 
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL ${general_prefix}_set_act_visible()   
   CALL ${general_prefix}_set_act_no_visible()
 
   #組合新增資料的條件
   LET g_add_browse = " ${master_append_wc_s}",
                      " ${master_field_pk01} = '", ${master_var_pk01}, "' "
                      #master_keys - Start -
                      ," AND ${master_field_pk${key}} = '", ${master_var_pk${key}}, "' "
                      #keys -  End  -
   #填到對應位置
   CALL ${general_prefix}_browser_fill("")
 
   CLOSE ${general_prefix}_cl
   
   ${general_c03a_mark}CALL s_transaction_end('Y','0')
 
   #功能已完成,通報訊息中心
   CALL ${general_prefix}_msgcentre_notify('modify')
 
END FUNCTION 
{</section>}
 
{<section id="${app_id}.input" >}
#+ 資料輸入
PRIVATE FUNCTION ${general_prefix}_input(p_cmd)
   #add-point:input段define(客製用) name="input.define_customerization"
   {<point name="input.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE  p_cmd                 LIKE type_t.chr1
   DEFINE  l_cmd_t               LIKE type_t.chr1
   DEFINE  l_cmd                 LIKE type_t.chr1
   DEFINE  l_n                   LIKE type_t.num10                #檢查重複用  
   DEFINE  l_cnt                 LIKE type_t.num10                #檢查重複用  
   DEFINE  l_lock_sw             LIKE type_t.chr1                #單身鎖住否  
   DEFINE  l_allow_insert        LIKE type_t.num5                #可新增否 
   DEFINE  l_allow_delete        LIKE type_t.num5                #可刪除否  
   DEFINE  l_count               LIKE type_t.num10
   DEFINE  l_i                   LIKE type_t.num10
   DEFINE  l_ac_t                LIKE type_t.num10
   DEFINE  l_insert              BOOLEAN
   DEFINE  ls_return             STRING
   DEFINE  l_var_keys            DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys          DYNAMIC ARRAY OF STRING
   DEFINE  l_vars                DYNAMIC ARRAY OF STRING
   DEFINE  l_fields              DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak        DYNAMIC ARRAY OF STRING
   DEFINE  lb_reproduce          BOOLEAN
   DEFINE  li_reproduce          LIKE type_t.num10
   DEFINE  li_reproduce_target   LIKE type_t.num10
   DEFINE  ls_keys               DYNAMIC ARRAY OF VARCHAR(500)
   #add-point:input段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="input.define"
   {<point name="input.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理  name="input.pre_function"
   {<point name="input.pre_function"/>}
   #end add-point
   
   #先做狀態判定
   IF p_cmd = 'r' THEN
      LET l_cmd_t = 'r'
      LET p_cmd   = 'a'
   ELSE
      LET l_cmd_t = p_cmd
   END IF   
   
   #將資料輸出到畫面上
   DISPLAY BY NAME ${master_vars_all}
   
   #切換畫面
   ${general_i09_mark}IF g_main_hidden THEN
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("mainlayout",0)
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("worksheet",1)
   ${general_i09_mark}   LET g_main_hidden = 0
   ${general_i09_mark}END IF
 
   CALL cl_set_head_visible("","YES")  
 
   LET l_insert = FALSE
   LET g_action_choice = ""
 
   #add-point:input段define_sql name="input.define_sql"
   {<point name="input.define_sql" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "${detail_sql_forupd}"
   #add-point:input段define_sql name="input.after_define_sql"
   {<point name="input.after_define_sql"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE ${general_prefix}_bcl CURSOR FROM g_forupd_sql
   
   #tables - Start -
   #add-point:input段define_sql name="input.define_sql${table}"
   {<point name="input.define_sql${table}" mark="Y"/>}
   #end add-point    
   LET g_forupd_sql = "${detail_sql_forupd${table}}"
   #add-point:input段define_sql name="input.after_define_sql${table}"
   {<point name="input.after_define_sql${table}"/>}
   #end add-point
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE ${detail_table_bcl${table}} CURSOR FROM g_forupd_sql
   #tables -  End  - 
   
   #tables_d2 - Start -
   #add-point:input段define_sql name="input.define_sql${table}"
   {<point name="input.define_sql${table}" mark="Y"/>}
   #end add-point 
   LET g_forupd_sql = "${detail_sql_forupd${table}}"
   #add-point:input段define_sql name="input.after_define_sql${table}"
   {<point name="input.after_define_sql${table}"/>}
   #end add-point 
   LET g_forupd_sql = cl_sql_forupd(g_forupd_sql)
   LET g_forupd_sql = cl_sql_add_mask(g_forupd_sql)              #遮蔽特定資料
   DECLARE ${detail_table_bcl${table}} CURSOR FROM g_forupd_sql
   #tables -  End  -
 
   #add-point:input段define_sql name="input.other_sql"
   {<point name="input.other_sql"/>}
   #end add-point 
 
   LET l_allow_insert = cl_auth_detail_input("insert")
   LET l_allow_delete = cl_auth_detail_input("delete")
   LET g_qryparam.state = 'i'
   
   #控制key欄位可否輸入
   CALL ${general_prefix}_set_entry(p_cmd)
   #add-point:set_entry後 name="input.after_set_entry"
   {<point name="input.after_set_entry"/>}
   #end add-point
   CALL ${general_prefix}_set_no_entry(p_cmd)
 
   DISPLAY BY NAME ${master_input_fields}
   
   LET lb_reproduce = FALSE
   LET l_ac_t = 1
   
   #關閉被遮罩相關欄位輸入, 無法確定USER是否會需要輸入此欄位
   #因此先行關閉, 若有需要可於下方add-point中自行開啟
   CALL cl_mask_set_no_entry()
   
   #add-point:資料輸入前 name="input.before_input"
   {<point name="input.before_input"/>}
   #end add-point
   
   DIALOG ATTRIBUTES(UNBUFFERED,FIELD ORDER FORM)
{</section>}
 
{<section id="${app_id}.input.head" >}
      #單頭段
      INPUT BY NAME ${master_input_fields} 
         ATTRIBUTE(WITHOUT DEFAULTS)
         
         #自訂ACTION(master_input)
         ${master_iaction_call}
     
         BEFORE INPUT
            ${general_c03a_mark}IF s_transaction_chk("N",0) THEN
            ${general_c03a_mark}   CALL s_transaction_begin()
            ${general_c03a_mark}END IF
            OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE ${general_prefix}_cl
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            ${master_multi_table_bak}
            IF l_cmd_t = 'r' THEN
               ${master_multi_table_clear}
            END IF
            #因應離開單頭後已寫入資料庫, 若重新回到單頭則視為修改
            #因此需於此處開啟/關閉欄位
            CALL ${general_prefix}_set_entry(p_cmd)
            #add-point:資料輸入前 name="input.m.before_input"
            {<point name="input.m.before_input"/>}
            #end add-point
            CALL ${general_prefix}_set_no_entry(p_cmd)
    
         ${master_fields_check} #欄位檢查
         ${master_fields_ctrlp_i} #欄位開窗
            
         AFTER INPUT
            IF INT_FLAG THEN
               EXIT DIALOG
            END IF
 
            #CALL cl_err_collect_show()      #錯誤訊息統整顯示
            #CALL cl_showmsg()
            DISPLAY BY NAME ${master_var_allkeys}
                        
            #add-point:單頭INPUT後 name="input.head.after_input"
            {<point name="input.head.after_input"/>}
            #end add-point
                        
            IF p_cmd <> 'u' THEN
    
               CALL s_transaction_begin()
               
               #add-point:單頭新增前 name="input.head.b_insert"
               {<point name="input.head.b_insert" mark="Y"/>}
               #end add-point
               
               INSERT INTO ${master_tbl_name} (${master_field_append}${master_fields_update})
               VALUES (${master_var_append}${master_vars_update}) 
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "${master_var_title}:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭新增中 name="input.head.m_insert"
               {<point name="input.head.m_insert"/>}
               #end add-point
               
               ${master_append_insert}
               ${master_multi_language}
               
               #add-point:單頭新增後 name="input.head.a_insert"
               {<point name="input.head.a_insert"/>}
               #end add-point
               ${general_c03a_mark}CALL s_transaction_end('Y','0') 
               
               IF l_cmd_t = 'r' AND p_cmd = 'a' THEN
                  CALL ${general_prefix}_detail_reproduce()
                  #因應特定程式需求, 重新刷新單身資料
                  CALL ${general_prefix}_b_fill()
                  CALL ${general_prefix}_b_fill2('0')
               END IF
               
               #add-point:單頭新增後 name="input.head.a_insert2"
               {<point name="input.head.a_insert2"/>}
               #end add-point
               
               LET g_master_insert = TRUE
               
               LET p_cmd = 'u'
            ELSE
               CALL s_transaction_begin()
            
               #add-point:單頭修改前 name="input.head.b_update"
               {<point name="input.head.b_update" mark="Y"/>}
               #end add-point
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${master_tbl_name}_mask_restore('restore_mask_o')
               
               UPDATE ${master_tbl_name} SET (${master_fields_update}) = (${master_vars_update})
                WHERE ${master_append_wc} ${master_field_pk01} = g_${master_field_pk01}_t
                  #master_keys - Start -
                  AND ${master_field_pk${key}} = g_${master_field_pk${key}}_t
                  #keys -  End  -
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "${master_tbl_name}:",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE 
                  LET g_errparam.popup = TRUE 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CALL cl_err()
                  NEXT FIELD CURRENT
               END IF
               
               #add-point:單頭修改中 name="input.head.m_update"
               {<point name="input.head.m_update"/>}
               #end add-point
               
               ${master_append_update}
               ${master_multi_language}
               
               #將遮罩欄位進行遮蔽
               CALL ${general_prefix}_${master_tbl_name}_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單頭修改)
               LET g_log1 = util.JSON.stringify(${master_var_title}_t)
               LET g_log2 = util.JSON.stringify(${master_var_title})
               IF NOT cl_log_modified_record(g_log1,g_log2) THEN 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
               ELSE
                  ${general_c03a_mark}CALL s_transaction_end('Y','0')
               END IF
               
               #add-point:單頭修改後 name="input.head.a_update"
               {<point name="input.head.a_update"/>}
               #end add-point
            END IF
            
            LET g_master_commit = "Y"
            LET g_${master_field_pk01}_t = ${master_var_pk01}
            #master_keys - Start -
            LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
            #keys -  End  -
            
      END INPUT
   
{</section>}
 
{<section id="${app_id}.input.body" >}
   
      #Page1 預設值產生於此處
      INPUT ARRAY ${detail_var_title} FROM ${sr_name}.*
          ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                  INSERT ROW = ${detail_allow_insert}, 
                  DELETE ROW = ${detail_allow_delete},
                  APPEND ROW = ${detail_allow_append})
 
         #自訂ACTION(detail_input,page_1)
         ${detail_iaction_call}
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body.before_input2"
            {<point name="input.body.before_input2"/>}
            #end add-point
            ${detail_page_input}
            CALL ${general_prefix}_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group}"))
            END IF
            LET g_loc = 'm'
            LET g_rec_b = ${detail_var_title}.getLength()
            #add-point:資料輸入前 name="input.d.before_input"
            {<point name="input.d.before_input"/>}
            #end add-point
         
         BEFORE ROW
            #add-point:modify段before row2 name="input.body.before_row2"
            {<point name="input.body.before_row2"/>}
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_detail_idx_list[1] = l_ac
            LET g_current_page = 1
            ${detail_page_fill}
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE ${general_prefix}_cl
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = ${detail_var_title}.getLength()
            
            IF g_rec_b >= l_ac 
               AND ${detail_var_title}[l_ac].${detail_field_pk01} IS NOT NULL
               #detail_keys - Start -
               AND ${detail_var_title}[l_ac].${detail_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN
               LET l_cmd='u'
               LET ${detail_var_title}_t.* = ${detail_var_title}[l_ac].*  #BACKUP
               LET ${detail_var_title}_o.* = ${detail_var_title}[l_ac].*  #BACKUP
               CALL ${general_prefix}_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body.after_set_entry_b"
               {<point name="input.body.after_set_entry_b"/>}
               #end add-point  
               CALL ${general_prefix}_set_no_entry_b(l_cmd)
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name}","'1'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${general_prefix}_bcl INTO ${detail_vars_all}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = ${detail_var_title}_t.${detail_field_pk01},":",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET ${detail_var_title}_mask_o[l_ac].* =  ${detail_var_title}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name}_mask()
                  LET ${detail_var_title}_mask_n[l_ac].* =  ${detail_var_title}[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL ${general_prefix}_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body.before_row"
            {<point name="input.body.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak}
            #其他table進行lock
            ${detail_multi_table_lock1}
        
         BEFORE INSERT  
            ${detail_page_insert}
            ${general_c03a_mark}IF s_transaction_chk("N",0) THEN
            ${general_c03a_mark}   CALL s_transaction_begin()
            ${general_c03a_mark}END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title}_t.* TO NULL 
            INITIALIZE ${detail_var_title}_o.* TO NULL 
            #公用欄位給值(單身)
            ${detail_insert_define}
            #自定義預設值
            ${detail_fields_default}
            #add-point:modify段before備份 name="input.body.insert.before_bak"
            {<point name="input.body.insert.before_bak"/>}
            #end add-point
            LET ${detail_var_title}_t.* = ${detail_var_title}[l_ac].*     #新輸入資料
            LET ${detail_var_title}_o.* = ${detail_var_title}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body.insert.after_set_entry_b"
            {<point name="input.body.insert.after_set_entry_b"/>}
            #end add-point
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce}
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk01} = NULL
               #detail_keys - Start -
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            ${detail_multi_table_bak}
            #add-point:modify段before insert name="input.body.before_insert"
            {<point name="input.body.before_insert"/>}
            #end add-point  
  
         AFTER INSERT
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身新增 name="input.body.b_a_insert"
            {<point name="input.body.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name} 
             WHERE ${detail_append_wc} ${detail_field_fk01} = ${master_var_pk01}
               #master_keys - Start -
               AND ${detail_field_fk${key}} = ${master_var_pk${key}}
               #keys -  End  -                   
               AND ${detail_field_pk01} = ${detail_var_title}[l_ac].${detail_field_pk01}
               #detail_keys - Start -
               AND ${detail_field_pk${key}} = ${detail_var_title}[l_ac].${detail_field_pk${key}}
               #keys -  End  -
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身新增前 name="input.body.b_insert"
               {<point name="input.body.b_insert"/>}
               #end add-point
            
               #同步新增到同層的table
               ${detail_ins_Sync}
                           
               #add-point:單身新增後 name="input.body.a_insert"
               {<point name="input.body.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill()
               #資料多語言用-增/改
               ${detail_multi_language1}
               #add-point:input段-after_insert name="input.body.a_insert2"
               {<point name="input.body.a_insert2"/>}
               #end add-point
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
              
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身刪除後(=d) name="input.body.after_delete_d"
               {<point name="input.body.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body.b_delete_ask"
               {<point name="input.body.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身刪除前 name="input.body.b_delete"
               {<point name="input.body.b_delete" mark="Y"/>}
               #end add-point 
               
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = ${master_var_pk01}
               #master_keys - Start -
               LET gs_keys[gs_keys.getLength()+1] = ${master_var_pk${key}}
               #keys -  End  -
               LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title}_t.${detail_field_pk01}
               #detail_keys - Start -
               LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title}_t.${detail_field_pk${key}}
               #keys -  End  -
            
               #刪除同層單身
               IF NOT ${general_prefix}_delete_b('${detail_tbl_name}',gs_keys,"'1'") THEN
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CLOSE ${general_prefix}_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT ${general_prefix}_key_delete_b(gs_keys,'${detail_tbl_name}') THEN
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CLOSE ${general_prefix}_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               ${detail_multi_table_delete1}
               
               #add-point:單身刪除中 name="input.body.m_delete"
               {<point name="input.body.m_delete"/>}
               #end add-point 
               
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               CLOSE ${general_prefix}_bcl
            
               LET g_rec_b = g_rec_b-1
               #add-point:單身刪除後 name="input.body.a_delete"
               {<point name="input.body.a_delete"/>}
               #end add-point
               LET l_count = ${detail_var_title}.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body.after_delete"
               {<point name="input.body.after_delete"/>}
               #end add-point
            END IF
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (${detail_var_title}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         ${detail_fields_check1}
         ${detail_fields_ctrlp1_i}
 
         ON ROW CHANGE
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE ${general_prefix}_bcl
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
              
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = ${detail_var_title}[l_ac].${detail_field_pk01} 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
            ELSE
            
               #add-point:單身修改前 name="input.body.b_update"
               {<point name="input.body.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身)
               ${detail_upder_define}
      
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name}_mask_restore('restore_mask_o')
      
               UPDATE ${detail_tbl_name} SET (${detail_fields_update}) = (${detail_vars_update})
                WHERE ${detail_append_wc} ${detail_field_fk01} = ${master_var_pk01} 
                  #master_keys - Start -
                  AND ${detail_field_fk${key}} = ${master_var_pk${key}} 
                  #keys -  End  -    
                  AND ${detail_field_pk01} = ${detail_var_title}_t.${detail_field_pk01} #項次   
                  #detail_keys - Start -
                  AND ${detail_field_pk${key}} = ${detail_var_title}_t.${detail_field_pk${key}}  
                  #keys -  End  -
                  
               #add-point:單身修改中 name="input.body.m_update"
               {<point name="input.body.m_update"/>}
               #end add-point
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title}[l_ac].* = ${detail_var_title}_t.*  
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()                   
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     ${detail_multi_language1}
                     ${detail_upd_Sync}
               END CASE
 
               #將遮罩欄位進行遮蔽
               CALL ${general_prefix}_${detail_tbl_name}_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT(${detail_var_pk01} = ${detail_var_title}_t.${detail_field_pk01} 
                  #detail_keys - Start -
                  AND ${detail_var_pk${key}} = ${detail_var_title}_t.${detail_field_pk${key}} 
                  #keys -  End  -
                  ) THEN
                  LET gs_keys[01] = ${master_var_pk01}
                  #master_keys - Start -
                  LET gs_keys[gs_keys.getLength()+1] = ${master_var_pk${key}}
                  #keys -  End  -
                  LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title}_t.${detail_field_pk01}
                  #detail_keys - Start -
                  LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title}_t.${detail_field_pk${key}}
                  #keys -  End  -
                  CALL ${general_prefix}_key_update_b(gs_keys,'${detail_tbl_name}')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title}_t)
               LET g_log2 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title}[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身修改後 name="input.body.a_update"
               {<point name="input.body.a_update"/>}
               #end add-point
 
            END IF
            
         AFTER ROW
            #add-point:單身after_row name="input.body.after_row"
            {<point name="input.body.after_row"/>}
            #end add-point
            CALL ${general_prefix}_unlock_b("${detail_tbl_name}","'1'")
            ${general_c03a_mark}CALL s_transaction_end('Y','0')
            #其他table進行unlock
            #add-point:單身after_row2 name="input.body.after_row2"
            {<point name="input.body.after_row2"/>}
            #end add-point
              
         AFTER INPUT
            #add-point:input段after input  name="input.body.after_input"
            {<point name="input.body.after_input"/>}
            #end add-point 
    
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce}
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk01} = NULL
               #detail_keys - Start -
               LET ${detail_var_title}[li_reproduce_target].${detail_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title}.getLength()+1
            END IF
            
         #ON ACTION cancel
         #   LET INT_FLAG = 1
         #   LET g_detail_idx = 1
         #   EXIT DIALOG 
 
      END INPUT
      
      #pages_input - Start - 
      INPUT ARRAY ${detail_var_title${page}} FROM ${sr_name${page}}.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = ${detail_allow_insert${page}}, ${detail_allow_insert_desc}
                 DELETE ROW = ${detail_allow_delete${page}},
                 APPEND ROW = ${detail_allow_append${page}})
                 
         #自訂ACTION(detail_input,page_${page})
         ${detail_iaction_call${page}}
         
         BEFORE INPUT
            #add-point:資料輸入前 name="input.body${page_id}.before_input2"
            {<point name="input.body${page_id}.before_input2"/>}
            #end add-point
            ${detail_page_input${page}}
            CALL ${general_prefix}_b_fill()
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = ${detail_var_title${page}}.getLength()
            #add-point:資料輸入前 name="input.body${page_id}.before_input"
            {<point name="input.body${page_id}.before_input"/>}
            #end add-point
            
         BEFORE INSERT
            ${general_c03a_mark}IF s_transaction_chk("N",0) THEN
            ${general_c03a_mark}   CALL s_transaction_begin()
            ${general_c03a_mark}END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title${page}}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title${page}}_t.* TO NULL 
            INITIALIZE ${detail_var_title${page}}_o.* TO NULL 
            #公用欄位給值(單身${page})
            ${detail_insert_define${page}}
            #自定義預設值(單身${page})
            ${detail_fields_default${page}}
            #add-point:modify段before備份 name="input.body${page_id}.insert.before_bak"
            {<point name="input.body${page_id}.insert.before_bak"/>}
            #end add-point
            LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body${page_id}.insert.after_set_entry_b"
            {<point name="input.body${page_id}.insert.after_set_entry_b"/>}
            #end add-point
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            ${detail_multi_table_bak${page}}
            #add-point:modify段before insert name="input.body${page_id}.before_insert"
            {<point name="input.body${page_id}.before_insert"/>}
            #end add-point  
 
         BEFORE ROW     
            #add-point:modify段before row2 name="input.body${page_id}.before_row2"
            {<point name="input.body${page_id}.before_row2"/>}
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET g_detail_idx_list[${page}] = l_ac
            LET l_ac = ARR_CURR()
            LET g_detail_idx = l_ac
            LET g_current_page = ${page}
            ${detail_page_fill${page}}  
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE ${general_prefix}_cl
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = ${detail_var_title${page}}.getLength()
            
            IF g_rec_b >= l_ac 
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01} IS NOT NULL
               #detail_page_keys - Start -
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN 
               LET l_cmd='u'
               LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               CALL ${general_prefix}_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body${page_id}.after_set_entry_b"
               {<point name="input.body${page_id}.after_set_entry_b"/>}
               #end add-point  
               CALL ${general_prefix}_set_no_entry_b(l_cmd)
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name${page}}","'${page}'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${detail_page_bcl${page}} INTO ${detail_vars_all${page}}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE  
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
                  LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL ${general_prefix}_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak${page}}
            #其他table進行lock
            ${detail_multi_table_lock${page}}
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body${page_id}.after_delete_d"
               {<point name="input.body${page_id}.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body${page_id}.b_delete_ask"
               {<point name="input.body${page_id}.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身${page}刪除前 name="input.body${page_id}.b_delete"
               {<point name="input.body${page_id}.b_delete" mark="Y"/>}
               #end add-point    
                  
               #取得該筆資料key值
               INITIALIZE gs_keys TO NULL
               LET gs_keys[01] = ${master_var_pk01}
               #master_keys - Start -
               LET gs_keys[gs_keys.getLength()+1] = ${master_var_pk${key}}
               #keys -  End  -
               LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title${page}}_t.${detail${page}_field_pk01}
               #detail_page_keys - Start -
               LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
               #keys -  End  -
            
               #刪除同層單身
               IF NOT ${general_prefix}_delete_b('${detail_tbl_name${page}}',gs_keys,"'${page}'") THEN
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CLOSE ${general_prefix}_bcl
                  CANCEL DELETE
               END IF
    
               #刪除下層單身
               IF NOT ${general_prefix}_key_delete_b(gs_keys,'${detail_tbl_name${page}}') THEN
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CLOSE ${general_prefix}_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               ${detail_multi_table_delete${page}}
               
               #add-point:單身${page}刪除中 name="input.body${page_id}.m_delete"
               {<point name="input.body${page_id}.m_delete"/>}
               #end add-point    
               
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               CLOSE ${general_prefix}_bcl
 
               LET g_rec_b = g_rec_b-1
               #add-point:單身${page}刪除後 name="input.body${page_id}.a_delete"
               {<point name="input.body${page_id}.a_delete"/>}
               #end add-point
               LET l_count = ${detail_var_title}.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body${page_id}.after_delete"
               {<point name="input.body${page_id}.after_delete"/>}
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (${detail_var_title${page}}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
 
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身${page}新增前 name="input.body${page_id}.b_a_insert"
            {<point name="input.body${page_id}.b_a_insert"/>}
            #end add-point
               
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name${page}} 
             WHERE ${detail_append_wc${page}} ${detail${page}_field_fk01} = ${master_var_pk01}
               #master_page_keys - Start -
               AND ${detail${page}_field_fk${key}} = ${master_var_pk${key}}
               #keys -  End  -                   
               AND ${detail${page}_field_pk01} = ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01}
               #detail_page_keys - Start -
               AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}}
               #keys -  End  -
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身${page}新增前 name="input.body${page_id}.b_insert"
               {<point name="input.body${page_id}.b_insert"/>}
               #end add-point
            
               ${detail_ins_Sync${page}}
                           
               #add-point:單身新增後${page} name="input.body${page_id}.a_insert"
               {<point name="input.body${page_id}.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill()
               #資料多語言用-增/改
               ${detail_multi_language${page}}
               #add-point:單身新增後 name="input.body${page_id}.after_insert"
               {<point name="input.body${page_id}.after_insert"/>}
               #end add-point
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE ${detail_page_bcl${page}}
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
            ELSE
               #add-point:單身page${page}修改前 name="input.body${page_id}.b_update"
               {<point name="input.body${page_id}.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身${page})
               ${detail_upder_define${page}}
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_o')
                              
               UPDATE ${detail_tbl_name${page}} SET (${detail_fields_update${page}}) = (${detail_vars_update${page}}) #自訂欄位頁簽
                WHERE ${detail_append_wc${page}} ${detail${page}_field_fk01} = ${master_var_pk01}
                  #master_page_keys - Start -
                  AND ${detail${page}_field_fk${key}} = ${master_var_pk${key}}
                  #keys -  End  -
                  AND ${detail${page}_field_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01} #項次 
                  #detail_page_keys - Start -
                  AND ${detail${page}_field_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                  #keys -  End  -
                  
               #add-point:單身page${page}修改中 name="input.body${page_id}.m_update"
               {<point name="input.body${page_id}.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     ${detail_multi_language${page}}
                     ${detail_upd_Sync${page}}
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_n')
               
               #判斷key是否有改變
               INITIALIZE gs_keys TO NULL
               IF NOT (${detail${page}_var_pk01} = ${detail_var_title${page}}_t.${detail${page}_field_pk01} 
                  #detail_page_keys - Start -
                  AND ${detail${page}_var_pk${key}} = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}} 
                  #keys -  End  -
                  ) THEN
                  LET gs_keys[01] = ${master_var_pk01}
                  #master_keys - Start -
                  LET gs_keys[gs_keys.getLength()+1] = ${master_var_pk${key}}
                  #keys -  End  -
                  LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title${page}}_t.${detail${page}_field_pk01}
                  #detail_page_keys - Start -
                  LET gs_keys[gs_keys.getLength()+1] = ${detail_var_title${page}}_t.${detail${page}_field_pk${key}}
                  #keys -  End  -
                  CALL ${general_prefix}_key_update_b(gs_keys,'${detail_tbl_name${page}}')
               END IF
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title${page}}_t)
               LET g_log2 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title${page}}[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page${page}修改後 name="input.body${page_id}.a_update"
               {<point name="input.body${page_id}.a_update"/>}
               #end add-point
            END IF
         
         ${detail_fields_check${page}}
         ${detail_fields_ctrlp${page}_i}
 
         AFTER ROW
            #add-point:單身page${page} after_row name="input.body${page_id}.after_row"
            {<point name="input.body${page_id}.after_row"/>}
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE ${detail_page_bcl${page}}
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            ${detail_multi_table_unlock${page}}
            CALL ${general_prefix}_unlock_b("${detail_tbl_name${page}}","'${page}'")
            ${general_c03a_mark}CALL s_transaction_end('Y','0')
            #add-point:單身page${page} after_row2 name="input.body${page_id}.after_row2"
            {<point name="input.body${page_id}.after_row2"/>}
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body${page_id}.after_input"
            {<point name="input.body${page_id}.after_input"/>}
            #end add-point   
    
         ON ACTION controlo
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title${page}}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title${page}}.getLength()+1
            END IF
            
      END INPUT
      #pages -  End  -
      
      #pages_input_d - Start - 
      INPUT ARRAY ${detail_var_title${page}} FROM ${sr_name${page}}.*
         ATTRIBUTE(COUNT = g_rec_b,WITHOUT DEFAULTS, #MAXCOUNT = g_max_rec,
                 INSERT ROW = ${detail_allow_insert${page}}, ${detail_allow_insert_desc}
                 DELETE ROW = ${detail_allow_delete${page}},
                 APPEND ROW = ${detail_allow_append${page}})
                 
         #自訂ACTION(detail_input,page_${page})
         ${detail_iaction_call${page}}
        
         BEFORE INPUT
            #先將上層單身的idx放入g_detail_idx
            LET g_detail_idx_tmp = g_detail_idx
            LET g_detail_idx = g_detail_idx_list[${detail_master_first_page_num${page}}]
            #檢查上層單身是否為空
            IF g_detail_idx = 0 OR ${detail_master_first_page${page}}.getLength() = 0 THEN
               NEXT FIELD ${detail_master_first_key${page}}
            END IF
            #檢查上層單身是否有資料
            IF cl_null(${detail_master_first_page${page}}[g_detail_idx].${detail_master_first_key${page}}) THEN
               NEXT FIELD ${detail_master_first_key${page}}
            END IF
            #add-point:資料輸入前 name="input.body${page_id}.before_input2"
            {<point name="input.body${page_id}.before_input2"/>}
            #end add-point
            ${detail_page_input${page}}
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' AND g_rec_b != 0 THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
            END IF
            LET g_loc = 'd'
            LET g_rec_b = ${detail_var_title${page}}.getLength()
            #add-point:資料輸入前 name="input.body${page_id}.before_input"
            {<point name="input.body${page_id}.before_input"/>}
            #end add-point
            
         BEFORE INSERT
            ${detail_page_insert${page}}
            ${general_c03a_mark}IF s_transaction_chk("N",0) THEN
            ${general_c03a_mark}   CALL s_transaction_begin()
            ${general_c03a_mark}END IF
            LET l_insert = TRUE
            LET l_n = ARR_COUNT()
            LET l_cmd = 'a'
            INITIALIZE ${detail_var_title${page}}[l_ac].* TO NULL 
            INITIALIZE ${detail_var_title${page}}_t.* TO NULL 
            INITIALIZE ${detail_var_title${page}}_o.* TO NULL 
            #公用欄位給值(單身${page})
            ${detail_insert_define${page}}
            #自定義預設值(單身${page})
            ${detail_fields_default${page}}
            #add-point:modify段before備份 name="input.body${page_id}.insert.before_bak"
            {<point name="input.body${page_id}.insert.before_bak"/>}
            #end add-point
            LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*     #新輸入資料
            CALL cl_show_fld_cont()
            CALL ${general_prefix}_set_entry_b(l_cmd)
            #add-point:modify段after_set_entry_b name="input.body${page_id}.insert.after_set_entry_b"
            {<point name="input.body${page_id}.insert.after_set_entry_b"/>}
            #end add-point
            CALL ${general_prefix}_set_no_entry_b(l_cmd)
            IF lb_reproduce THEN
               LET lb_reproduce = FALSE
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            END IF
            ${detail_multi_table_bak${page}}
            #add-point:modify段before insert name="input.body${page_id}.before_insert"
            {<point name="input.body${page_id}.before_insert"/>}
            #end add-point  
            
         BEFORE ROW
            #add-point:modify段before row2 name="input.body${page_id}.before_row2"
            {<point name="input.body${page_id}.before_row2"/>}
            #end add-point  
            LET l_insert = FALSE
            LET l_cmd = ''
            LET l_ac_t = l_ac 
            LET l_ac = ARR_CURR()
            LET g_detail_idx2 = l_ac
            LET g_detail_idx_list[${page}] = l_ac
            LET g_current_page = ${page}
            ${detail_page_fill${page}}
            LET l_lock_sw = 'N'            #DEFAULT
            LET l_n = ARR_COUNT()
            DISPLAY l_ac TO FORMONLY.idx
         
            CALL s_transaction_begin()
            OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
            #(ver:78) ---start---
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE
               LET g_errparam.popup = TRUE 
               CLOSE ${general_prefix}_cl
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            #(ver:78) --- end ---
            OPEN ${general_prefix}_bcl${detail_master_num${page}} USING ${detail_var_append${page}}${detail_var_fks${page}}
            IF SQLCA.SQLCODE THEN   #(ver:78)
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "OPEN ${general_prefix}_bcl:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
               LET g_errparam.popup = TRUE 
               CLOSE ${general_prefix}_cl
               CLOSE ${general_prefix}_bcl${detail_master_num${page}}
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               RETURN
            END IF
            
            LET g_rec_b = ${detail_var_title${page}}.getLength()
            
            IF g_rec_b >= l_ac 
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk01} IS NOT NULL
               #detail_page_keys - Start -
               AND ${detail_var_title${page}}[l_ac].${detail${page}_field_pk${key}} IS NOT NULL
               #keys -  End  -
            THEN 
               LET l_cmd='u'
               LET ${detail_var_title${page}}_t.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               LET ${detail_var_title${page}}_o.* = ${detail_var_title${page}}[l_ac].*  #BACKUP
               CALL ${general_prefix}_set_entry_b(l_cmd)
               #add-point:modify段after_set_entry_b name="input.body${page_id}.after_set_entry_b"
               {<point name="input.body${page_id}.after_set_entry_b"/>}
               #end add-point  
               CALL ${general_prefix}_set_no_entry_b(l_cmd)
               IF NOT ${general_prefix}_lock_b("${detail_tbl_name${page}}","'${page}'") THEN
                  LET l_lock_sw='Y'
               ELSE
                  FETCH ${detail_page_bcl${page}} INTO ${detail_vars_all${page}}
                  IF SQLCA.SQLCODE THEN
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     CALL cl_err()
                     LET l_lock_sw = "Y"
                  END IF
                  
                  #遮罩相關處理
                  LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
                  LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
                  
                  LET g_bfill = "N"
                  CALL ${general_prefix}_show()
                  LET g_bfill = "Y"
                  
                  CALL cl_show_fld_cont()
               END IF
            ELSE
               LET l_cmd='a'
            END IF
            #add-point:modify段before row name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point  
            #其他table資料備份(確定是否更改用)
            ${detail_multi_table_bak${page}}
            #其他table進行lock
            ${detail_multi_table_lock${page}}
            
         BEFORE DELETE                            #是否取消單身
            IF l_cmd = 'a' THEN
               LET l_cmd='d'
               #add-point:單身AFTER DELETE (=d) name="input.body${page_id}.after_delete_d"
               {<point name="input.body${page_id}.after_delete_d"/>}
               #end add-point
            ELSE
               #add-point:單身刪除前 name="input.body${page_id}.b_delete_ask"
               {<point name="input.body${page_id}.b_delete_ask" />}
               #end add-point 
               IF NOT cl_ask_del_detail() THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = "" 
                  LET g_errparam.code = -263 
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
                  CANCEL DELETE
               END IF
               
               #add-point:單身${page}刪除前 name="input.body${page_id}.b_delete"
               {<point name="input.body${page_id}.b_delete" mark="Y"/>}
               #end add-point    
 
               #取得該筆資料key值
               ${detail_del_Sync_pre${page}}
 
               #刪除同層單身
               IF NOT ${general_prefix}_delete_b('${detail_tbl_name${page}}',gs_keys,"'${page}'") THEN
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
                  CLOSE ${general_prefix}_bcl
                  CANCEL DELETE
               END IF
               
               #刪除多語言
               ${detail_multi_table_delete${page}}
               
               #add-point:單身${page}刪除中 name="input.body${page_id}.m_delete"
               {<point name="input.body${page_id}.m_delete"/>}
               #end add-point   
               
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               CLOSE ${general_prefix}_bcl
                  
               LET g_rec_b = g_rec_b-1
               #add-point:單身${page}刪除後 name="input.body${page_id}.a_delete"
               {<point name="input.body${page_id}.a_delete"/>}
               #end add-point
 
               LET l_count = ${detail_var_title}.getLength()
               
               #add-point:單身刪除後(<>d) name="input.body${page_id}.after_delete"
               {<point name="input.body${page_id}.after_delete"/>}
               #end add-point
            END IF 
 
         AFTER DELETE
            #如果是最後一筆
            IF l_ac = (${detail_var_title${page}}.getLength() + 1) THEN
               CALL FGL_SET_ARR_CURR(l_ac-1)
            END IF
         
         AFTER INSERT    
            LET l_insert = FALSE
            IF INT_FLAG THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CALL cl_err()
               LET INT_FLAG = 0
               CANCEL INSERT
            END IF
               
            #add-point:單身${page}新增前 name="input.body${page_id}.b_a_insert"
            {<point name="input.body${page_id}.b_a_insert"/>}
            #end add-point
    
            LET l_count = 1  
            SELECT COUNT(1) INTO l_count FROM ${detail_tbl_name${page}} 
             WHERE ${detail_append_wc${page}} ${detail_page_sql${page}}
                
            #資料未重複, 插入新增資料
            IF l_count = 0 THEN 
               #add-point:單身${page}新增前 name="input.body${page_id}.b_insert"
               {<point name="input.body${page_id}.b_insert"/>}
               #end add-point
            
               ${detail_ins_Sync${page}}
                           
               #add-point:單身新增後${page} name="input.body${page_id}.a_insert"
               {<point name="input.body${page_id}.a_insert"/>}
               #end add-point
            ELSE    
               INITIALIZE ${detail_var_title}[l_ac].* TO NULL
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = 'INSERT' 
               LET g_errparam.code = "std-00006" 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               CANCEL INSERT
            END IF
 
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               ${general_c03a_mark}CALL s_transaction_end('N','0')                    
               CALL cl_err()
               CANCEL INSERT
            ELSE
               #先刷新資料
               #CALL ${general_prefix}_b_fill()
               #資料多語言用-增/改
               ${detail_multi_language${page}}
               #add-point:單身新增後 name="input.body${page_id}.after_insert"
               {<point name="input.body${page_id}.after_insert"/>}
               #end add-point
               ${general_c03a_mark}CALL s_transaction_end('Y','0')
               #ERROR 'INSERT O.K'
               LET g_rec_b = g_rec_b + 1
            END IF
            
            #還原g_detail_idx
            LET g_detail_idx = g_detail_idx_tmp
            
         ON ROW CHANGE 
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE ${detail_page_bcl${page}}
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            IF l_lock_sw = 'Y' THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = -263 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
            ELSE
               #add-point:單身page${page}修改前 name="input.body${page_id}.b_update"
               {<point name="input.body${page_id}.b_update" mark="Y"/>}
               #end add-point
               
               #寫入修改者/修改日期資訊(單身${page})
               ${detail_upder_define${page}}
               
               #將遮罩欄位還原
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_o')
               
               UPDATE ${detail_tbl_name${page}} SET (${detail_fields_update${page}}) = (${detail_vars_update${page}}) #自訂欄位頁簽
                WHERE ${detail_append_wc${page}} ${detail_page_sql_t${page}}
                  
               #add-point:單身page${page}修改中 name="input.body${page_id}.m_update"
               {<point name="input.body${page_id}.m_update"/>}
               #end add-point
                  
               CASE
                  WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}" 
                     LET g_errparam.code = "std-00009" 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  WHEN SQLCA.SQLCODE #其他錯誤
                     LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
                     INITIALIZE g_errparam TO NULL 
                     LET g_errparam.extend = "${detail_tbl_name${page}}:",SQLERRMESSAGE 
                     LET g_errparam.code = SQLCA.SQLCODE 
                     LET g_errparam.popup = TRUE 
                     ${general_c03a_mark}CALL s_transaction_end('N','0')
                     CALL cl_err()
                     
                  OTHERWISE
                     #資料多語言用-增/改
                     ${detail_multi_language${page}}
                     ${detail_upd_Sync${page}}
               END CASE
               
               #將遮罩欄位進行遮蔽
               CALL ${general_prefix}_${detail_tbl_name${page}}_mask_restore('restore_mask_n')
               
               #修改歷程記錄(單身修改)
               LET g_log1 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title${page}}_t)
               LET g_log2 = util.JSON.stringify(${master_var_title}),util.JSON.stringify(${detail_var_title${page}}[l_ac])
               IF NOT cl_log_modified_record_d(g_log1,g_log2) THEN 
                  ${general_c03a_mark}CALL s_transaction_end('N','0')
               END IF
               
               #add-point:單身page${page}修改後 name="input.body${page_id}.a_update"
               {<point name="input.body${page_id}.a_update"/>}
               #end add-point
            END IF
         
         ${detail_fields_check${page}}
         ${detail_fields_ctrlp${page}_i}
 
         AFTER ROW
            #add-point:單身page${page}_after_row name="input.body${page_id}.after_row"
            {<point name="input.body${page_id}.after_row"/>}
            #end add-point
            LET l_ac = ARR_CURR()
            IF INT_FLAG THEN
               LET INT_FLAG = 0
               IF l_cmd = 'u' THEN
                  LET ${detail_var_title${page}}[l_ac].* = ${detail_var_title${page}}_t.*
               END IF
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = '' 
               LET g_errparam.code = 9001 
               LET g_errparam.popup = FALSE 
               CLOSE ${detail_page_bcl${page}}
               CLOSE ${general_prefix}_bcl${detail_master_num${page}}
               ${general_c03a_mark}CALL s_transaction_end('N','0')
               CALL cl_err()
               EXIT DIALOG 
            END IF
            
            #其他table進行unlock
            ${detail_multi_table_unlock${page}}
            CALL ${general_prefix}_unlock_b("${detail_tbl_name${page}}","'${page}'")
            ${general_c03a_mark}CALL s_transaction_end('Y','0')
            #add-point:單身page${page}_after_row2 name="input.body${page_id}.after_row2"
            {<point name="input.body${page_id}.after_row2"/>}
            #end add-point
 
         AFTER INPUT
            #add-point:input段after input  name="input.body${page_id}.after_input"
            {<point name="input.body${page_id}.after_input"/>}
            #end add-point  
 
         ON ACTION controlo    
            IF l_insert THEN
               LET li_reproduce = l_ac_t
               LET li_reproduce_target = l_ac
               ${detail_page_reproduce${page}}
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk01} = NULL
               #detail_page_keys - Start -
               LET ${detail_var_title${page}}[li_reproduce_target].${detail${page}_field_pk${key}} = NULL
               #keys -  End  -
            ELSE
               CALL FGL_SET_ARR_CURR(${detail_var_title${page}}.getLength()+1)
               LET lb_reproduce = TRUE
               LET li_reproduce = l_ac
               LET li_reproduce_target = ${detail_var_title${page}}.getLength()+1
            END IF
        
      END INPUT
      #pages -  End  -
      #pages_display - Start - 
      DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.* ATTRIBUTES(COUNT=g_rec_b)  
    
         BEFORE ROW
            CALL ${general_prefix}_idx_chk()
            LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
            LET g_detail_idx${general_page_idx${page}} = l_ac
            ${detail_page_fill${page}}
            #add-point:page${page}, before row動作 name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point
            
         BEFORE DISPLAY
            #如果一直都在單身1則控制筆數位置
            IF g_loc = 'm' THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
            END IF
            LET g_loc = 'm'
            LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
            CALL ${general_prefix}_idx_chk()
            LET g_current_page = ${page}
      
         #add-point:page${page}自定義行為 name="input.body${page_id}.action"
         {<point name="input.body${page_id}.action"/>}
         #end add-point
      
      END DISPLAY
      #pages -  End  -
      #pages_display_d - Start - 
      DISPLAY ARRAY ${detail_var_title${page}} TO ${sr_name${page}}.* ATTRIBUTES(COUNT=g_rec_b)  
    
         BEFORE ROW 
            CALL ${general_prefix}_idx_chk()
            LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
            LET g_detail_idx${general_page_idx${page}} = l_ac
            ${detail_page_fill${page}}
            #add-point:page${page}, before row動作 name="input.body${page_id}.before_row"
            {<point name="input.body${page_id}.before_row"/>}
            #end add-point
            
         BEFORE DISPLAY
            #如果一直都在單身2則控制筆數位置
            IF g_loc = 'd' THEN
               CALL FGL_SET_ARR_CURR(g_idx_group.getValue("${detail_idx_group${page}}"))
            END IF
            LET g_loc = 'd'
            LET l_ac = DIALOG.getCurrentRow("${sr_name${page}}")
            CALL ${general_prefix}_idx_chk()
            LET g_current_page = ${page}
      
         #自訂ACTION(detail_show,page_${page})
         ${detail_saction_choice${page}}
      
         #add-point:page${page}自定義行為 name="input.body${page_id}.action"
         {<point name="input.body${page_id}.action"/>}
         #end add-point
      
      END DISPLAY
      #pages -  End  -
{</section>}
 
{<section id="${app_id}.input.other" >}
      
      #add-point:自定義input name="input.more_input"
      {<point name="input.more_input"/>}
      #end add-point
    
      BEFORE DIALOG 
         #CALL cl_err_collect_init()    
         #add-point:input段before dialog name="input.before_dialog"
         {<point name="input.before_dialog"/>}
         #end add-point    
         #重新導回資料到正確位置上
         CALL DIALOG.setCurrentRow("${sr_name}",g_idx_group.getValue("${detail_idx_group}"))      
         #pages - Start -
         CALL DIALOG.setCurrentRow("${sr_name${page}}",g_idx_group.getValue("${detail_idx_group${page}}"))
         #pages -  End  -
         #新增時強制從單頭開始填
         IF p_cmd = 'a' THEN
            #add-point:input段next_field name="input.next_field"
            {<point name="input.next_field"/>}
            #end add-point  
            NEXT FIELD ${master_field_pk01}
         ELSE
            CASE g_aw
               WHEN "${sr_name}"
                  NEXT FIELD ${detail_first_field}
               #pages - Start -
               WHEN "${sr_name${page}}"
                  NEXT FIELD ${detail_first_field${page}}
               #pages -  End  -   
               #add-point:input段modify_detail  name="input.modify_detail.other"
               {<point name="input.modify_detail.other"/>}
               #end add-point  
            END CASE
         END IF
      
      AFTER DIALOG
         #add-point:input段after_dialog name="input.after_dialog"
         {<point name="input.after_dialog"/>}
         #end add-point    
         
      ON ACTION controlf
         CALL cl_set_focus_form(ui.Interface.getRootNode()) RETURNING g_fld_name,g_frm_name
         CALL cl_fldhelp(g_frm_name,g_fld_name,g_lang)
 
      ON ACTION controlr
         CALL cl_show_req_fields()
 
      ON ACTION controls
         IF g_header_hidden THEN
            CALL gfrm_curr.setElementHidden("vb_master",0)
            CALL gfrm_curr.setElementImage("controls","small/arr-u.png")
            LET g_header_hidden = 0     #visible
         ELSE
            CALL gfrm_curr.setElementHidden("vb_master",1)
            CALL gfrm_curr.setElementImage("controls","small/arr-d.png")
            LET g_header_hidden = 1     #hidden     
         END IF
 
      ON ACTION accept
         #add-point:input段accept  name="input.accept"
         {<point name="input.accept"/>}
         #end add-point    
         ACCEPT DIALOG
        
      ON ACTION cancel      #在dialog button (放棄)
         #add-point:input段cancel name="input.cancel"
         {<point name="input.cancel"/>}
         #end add-point  
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         #pages - Start -
         LET g_detail_idx_list[${page}] = 1
         #pages -  End  -
         CALL g_curr_diag.setCurrentRow("${sr_name}",1)    
         #pages - Start - 
         CALL g_curr_diag.setCurrentRow("${sr_name${page}}",1)
         #pages -  End  -
         EXIT DIALOG
 
      ON ACTION close       #在dialog 右上角 (X)
         #add-point:input段close name="input.close"
         {<point name="input.close"/>}
         #end add-point  
         LET INT_FLAG = TRUE 
         EXIT DIALOG
 
      ON ACTION exit        #toolbar 離開
         #add-point:input段exit name="input.exit"
         {<point name="input.exit"/>}
         #end add-point
         LET INT_FLAG = TRUE 
         LET g_detail_idx  = 1
         LET g_detail_idx2 = 1
         #各個page指標
         LET g_detail_idx_list[1] = 1 
         #pages - Start - 
         LET g_detail_idx_list[${page}] = 1
         #pages -  End  -
         CALL g_curr_diag.setCurrentRow("${sr_name}",1)    
         #pages - Start - 
         CALL g_curr_diag.setCurrentRow("${sr_name${page}}",1)
         #pages -  End  -
         EXIT DIALOG
 
      #交談指令共用ACTION
      &include "common_action.4gl" 
         CONTINUE DIALOG 
   END DIALOG
    
   #add-point:input段after input  name="input.after_input"
   {<point name="input.after_input"/>}
   #end add-point    
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.show" >}
#+ 單頭資料重新顯示及單身資料重抓
PRIVATE FUNCTION ${general_prefix}_show()
   #add-point:show段define(客製用) name="show.define_customerization"
   {<point name="show.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE l_ac_t    LIKE type_t.num10
   #add-point:show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="show.define"
   {<point name="show.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理 name="show.before"
   {<point name="show.before"/>}
   #end add-point
   
   ${general_display_site}
   
   IF g_bfill = "Y" THEN
      CALL ${general_prefix}_b_fill() #單身填充
      CALL ${general_prefix}_b_fill2('0') #單身填充
   END IF
     
   #帶出公用欄位reference值
   ${master_commons_ref}
   
   #顯示followup圖示
   ${master_related_document_show}
   
   LET l_ac_t = l_ac
   
   #讀入ref值(單頭)
   #add-point:show段reference name="show.head.reference"
   {<point name="show.head.reference"/>}
   #end add-point
   
   #遮罩相關處理
   LET ${master_var_title}_mask_o.* =  ${master_var_title}.*
   CALL ${general_prefix}_${master_tbl_name}_mask()
   LET ${master_var_title}_mask_n.* =  ${master_var_title}.*
   
   #將資料輸出到畫面上
   DISPLAY BY NAME ${master_vars_all}
   
   #顯示狀態(stus)圖片
   ${general_state_show}
   
   #讀入ref值(單身)
   FOR l_ac = 1 TO ${detail_var_title}.getLength()
      #add-point:show段單身reference name="show.body.reference"
      {<point name="show.body.reference"/>}
      #end add-point
   END FOR
   
   #pages - Start -
   FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
      #add-point:show段單身reference name="show.body${page_id}.reference"
      {<point name="show.body${page_id}.reference"/>}
      #end add-point
   END FOR
   #pages -  End  -
   
   ${detail_vars_reference_unique} 
   
   #add-point:show段other name="show.other"
   {<point name="show.other"/>}
   #end add-point  
   
   LET l_ac = l_ac_t
   
   #移動上下筆可以連動切換資料
   CALL cl_show_fld_cont()     
 
   CALL ${general_prefix}_detail_show()
 
   #add-point:show段之後 name="show.after"
   {<point name="show.after"/>}
   #end add-point
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.detail_show" >}
#+ 第二階單身reference
PRIVATE FUNCTION ${general_prefix}_detail_show()
   #add-point:detail_show段define(客製用) name="detail_show.define_customerization"
   {<point name="detail_show.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   #add-point:detail_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_show.define"
   {<point name="detail_show.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理 name="detail_show.before"
   {<point name="detail_show.before"/>}
   #end add-point
   
   #add-point:detail_show段之後 name="detail_show.after"
   {<point name="detail_show.after"/>}
   #end add-point
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.reproduce" >}
#+ 資料複製
PRIVATE FUNCTION ${general_prefix}_reproduce()
   #add-point:reproduce段define(客製用) name="reproduce.define_customerization"
   {<point name="reproduce.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   DEFINE l_newno     LIKE ${master_tbl_name}.${master_field_pk01} 
   DEFINE l_oldno     LIKE ${master_tbl_name}.${master_field_pk01} 
   #master_keys - Start -
   DEFINE l_newno${key}     LIKE ${master_tbl_name}.${master_field_pk${key}} 
   DEFINE l_oldno${key}     LIKE ${master_tbl_name}.${master_field_pk${key}} 
   #keys -  End  -
   DEFINE l_master    RECORD LIKE ${master_tbl_name}.* #此變數樣板目前無使用
   DEFINE l_detail    RECORD LIKE ${detail_tbl_name}.* #此變數樣板目前無使用
   #tables - Start - 
   DEFINE l_detail${table}    RECORD LIKE ${detail_tbl_name_by_tbl${table}}.* #此變數樣板目前無使用
   #tables -  End  -
   #tables_d2 - Start - 
   DEFINE l_detail${table}    RECORD LIKE ${detail_tbl_name_by_tbl${table}}.* #此變數樣板目前無使用
   #tables -  End  -
   DEFINE l_cnt       LIKE type_t.num10
   #add-point:reproduce段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="reproduce.define"
   {<point name="reproduce.define"/>} 
   #end add-point   
   
   #add-point:Function前置處理  name="reproduce.pre_function"
   {<point name="reproduce.pre_function"/>}
   #end add-point
   
   #切換畫面
   ${general_i09_mark}IF g_main_hidden THEN
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("mainlayout",0)
   ${general_i09_mark}   CALL gfrm_curr.setElementHidden("worksheet",1)
   ${general_i09_mark}   LET g_main_hidden = 0
   ${general_i09_mark}END IF
   
   LET g_master_insert = FALSE
   
   IF ${master_var_pk01} IS NULL
   #master_keys - Start -
   OR ${master_var_pk${key}} IS NULL
   #keys -  End  -
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
    
   LET g_${master_field_pk01}_t = ${master_var_pk01}
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
   #keys -  End  -
    
   LET ${master_var_pk01} = ""
   #master_keys - Start -
   LET ${master_var_pk${key}} = ""
   #keys -  End  -
 
   CALL cl_set_head_visible("","YES")
 
   #公用欄位給予預設值
   ${master_insert_define}
   
   CALL s_transaction_begin()
   
   #add-point:複製輸入前 name="reproduce.head.b_input"
   {<point name="reproduce.head.b_input"/>}
   #end add-point
   
   #顯示狀態(stus)圖片
   ${general_state_show}
   
   #清空key欄位的desc
   ${general_repro_reset}
   
   CALL ${general_prefix}_input("r")
   
   IF INT_FLAG AND NOT g_master_insert THEN
      LET INT_FLAG = 0
      DISPLAY g_detail_cnt  TO FORMONLY.h_count    #總筆數
      DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
      LET INT_FLAG = 0
      INITIALIZE ${master_var_title}.* TO NULL
      INITIALIZE ${detail_var_title} TO NULL
      #pages - Start -
      INITIALIZE ${detail_var_title${page}} TO NULL
      #pages -  End  -      
      #add-point:複製取消後 name="reproduce.cancel"
      {<point name="reproduce.cancel" />}
      #end add-point
      CALL ${general_prefix}_show()
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = '' 
      LET g_errparam.code = 9001 
      LET g_errparam.popup = FALSE 
      ${general_c01a_mark}CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
   
   #根據資料狀態切換action狀態
   CALL cl_set_act_visible("statechange,modify,modify_detail,delete,reproduce", TRUE)
   CALL ${general_prefix}_set_act_visible()   
   CALL ${general_prefix}_set_act_no_visible()
   
   #將新增的資料併入搜尋條件中
   LET g_${master_field_pk01}_t = ${master_var_pk01}
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
   #keys -  End  -
   
   #組合新增資料的條件
   LET g_add_browse = " ${master_append_wc_s}",
                      " ${master_field_pk01} = '", ${master_var_pk01}, "' "
                      #master_keys - Start -
                      ," AND ${master_field_pk${key}} = '", ${master_var_pk${key}}, "' "
                      #keys -  End  -
   #填到最後面
   LET g_current_idx = g_browser.getLength() + 1
   CALL ${general_prefix}_browser_fill("")
   
   DISPLAY g_browser_cnt TO FORMONLY.h_count    #總筆數
   DISPLAY g_current_idx TO FORMONLY.h_index    #當下筆數
   CALL cl_navigator_setting(g_current_idx, g_browser_cnt)
   
   #add-point:完成複製段落後 name="reproduce.after_reproduce"
   {<point name="reproduce.after_reproduce" />}
   #end add-point
   
   CALL ${general_prefix}_idx_chk()
   
   ${master_mark_ownid}LET g_data_owner = ${master_var_ownid}      
   ${master_mark_owndp}LET g_data_dept  = ${master_var_owndp}
   
   #功能已完成,通報訊息中心
   CALL ${general_prefix}_msgcentre_notify('reproduce')
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.detail_reproduce" >}
#+ 單身自動複製
PRIVATE FUNCTION ${general_prefix}_detail_reproduce()
   #add-point:delete段define(客製用) name="detail_reproduce.define_customerization"
   {<point name="detail_reproduce.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE ls_sql      STRING
   DEFINE ld_date     DATETIME YEAR TO SECOND
   DEFINE l_detail    RECORD LIKE ${detail_tbl_name}.* #此變數樣板目前無使用
   #tables - Start - 
   DEFINE l_detail${table}    RECORD LIKE ${detail_tbl_name_by_tbl${table}}.* #此變數樣板目前無使用
   #tables -  End  -
   #tables_d2 - Start - 
   DEFINE l_detail${table}    RECORD LIKE ${detail_tbl_name_by_tbl${table}}.* #此變數樣板目前無使用
   #tables -  End  -
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="detail_reproduce.define"
   {<point name="detail_reproduce.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="detail_reproduce.pre_function"
   {<point name="detail_reproduce.pre_function"/>}
   #end add-point
   
   CALL s_transaction_begin()
   
   LET ld_date = cl_get_current()
   
   DROP TABLE ${general_prefix}_detail
   
   #add-point:單身複製前1 name="detail_reproduce.body.table1.b_insert"
   {<point name="detail_reproduce.body.table1.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   SELECT * FROM ${detail_tbl_name}
    WHERE ${detail_append_wc} ${detail_field_fk01} = g_${master_field_pk01}_t
     #master_keys - Start -
     AND ${detail_field_fk${key}} = g_${master_field_pk${key}}_t
     #keys -  End  -
    INTO TEMP ${general_prefix}_detail
 
   #將key修正為調整後   
   UPDATE ${general_prefix}_detail 
      #更新key欄位
      SET ${detail_field_fk01} = ${master_var_pk01}
          #master_keys - Start -
          , ${detail_field_fk${key}} = ${master_var_pk${key}}
          #keys -  End  -
      #更新共用欄位
      ${detail_repro_define}
 
   #add-point:單身修改前 name="detail_reproduce.body.table1.b_update"
   {<point name="detail_reproduce.body.table1.b_update"/>}
   #end add-point                                       
  
   #將資料塞回原table   
   INSERT INTO ${detail_tbl_name} SELECT * FROM ${general_prefix}_detail
   
   IF SQLCA.SQLCODE THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "reproduce:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE 
      LET g_errparam.popup = TRUE 
      CALL cl_err()
      RETURN
   END IF
   
   #add-point:單身複製中1 name="detail_reproduce.body.table1.m_insert"
   {<point name="detail_reproduce.body.table1.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   DROP TABLE ${general_prefix}_detail
   
   #add-point:單身複製後1 name="detail_reproduce.body.table1.a_insert"
   {<point name="detail_reproduce.body.table1.a_insert"/>}
   #end add-point
 
   #tables - Start - 
   #add-point:單身複製前 name="detail_reproduce.body.table${table}.b_insert"
   {<point name="detail_reproduce.body.table${table}.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   ${general_mark_tbl${table}}SELECT * FROM ${detail_tbl_name_by_tbl${table}} 
   ${general_mark_tbl${table}} WHERE ${detail_append_wc_by_tbl${table}} ${detail_by_tbl${table}_field_fk01} = g_${master_field_pk01}_t
   ${general_mark_tbl${table}}   #master_keys - Start -   
   ${general_mark_tbl${table}}   AND ${detail_by_tbl${table}_field_fk${key}} = g_${master_field_pk${key}}_t   
   ${general_mark_tbl${table}}   #keys -  End  -   
   ${general_mark_tbl${table}} INTO TEMP ${general_prefix}_detail
 
   #將key修正為調整後   
   ${general_mark_tbl${table}}UPDATE ${general_prefix}_detail SET ${detail_by_tbl${table}_field_fk01} = ${master_var_pk01}
   ${general_mark_tbl${table}}                                    #master_keys - Start -
   ${general_mark_tbl${table}}                                    , ${detail_by_tbl${table}_field_fk${key}} = ${master_var_pk${key}}
   ${general_mark_tbl${table}}                                    #keys -  End  -
  
   #add-point:單身修改前 name="detail_reproduce.body.table${table}.b_update"
   {<point name="detail_reproduce.body.table${table}.b_update"/>}
   #end add-point    
 
   #將資料塞回原table   
   ${general_mark_tbl${table}}INSERT INTO ${detail_tbl_name_by_tbl${table}} SELECT * FROM ${general_prefix}_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table${table}.m_insert"
   {<point name="detail_reproduce.body.table${table}.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   ${general_mark_tbl${table}}DROP TABLE ${general_prefix}_detail
   
   #add-point:單身複製後 name="detail_reproduce.body.table${table}.a_insert"
   {<point name="detail_reproduce.body.table${table}.a_insert"/>}
   #end add-point
   #tables -  End  -
   
   #tables_d2 - Start - 
   #add-point:單身複製前 name="detail_reproduce.body.table${table}.b_insert"
   {<point name="detail_reproduce.body.table${table}.b_insert" mark="Y"/>}
   #end add-point
   
   #CREATE TEMP TABLE
   ${general_mark_tbl${table}}SELECT * FROM ${detail_tbl_name_by_tbl${table}} 
   ${general_mark_tbl${table}} WHERE ${detail_append_wc_by_tbl${table}} ${detail_by_tbl${table}_field_fk01} = g_${master_field_pk01}_t
   ${general_mark_tbl${table}} #master_keys - Start -   
   ${general_mark_tbl${table}} AND ${detail_by_tbl${table}_field_fk${key}} = g_${master_field_pk${key}}_t   
   ${general_mark_tbl${table}} #keys -  End  -   
   ${general_mark_tbl${table}} INTO TEMP ${general_prefix}_detail
 
   #將key修正為調整後   
   ${general_mark_tbl${table}}UPDATE ${general_prefix}_detail SET ${detail_by_tbl${table}_field_fk01} = ${master_var_pk01}
   ${general_mark_tbl${table}}                                    #master_keys - Start -
   ${general_mark_tbl${table}}                                    , ${detail_by_tbl${table}_field_fk${key}} = ${master_var_pk${key}}
   ${general_mark_tbl${table}}                                    #keys -  End  -
  
   #add-point:單身修改前 name="detail_reproduce.body.table${table}.b_update"
   {<point name="detail_reproduce.body.table${table}.b_update"/>}
   #end add-point    
  
   #將資料塞回原table   
   ${general_mark_tbl${table}}INSERT INTO ${detail_tbl_name_by_tbl${table}} SELECT * FROM ${general_prefix}_detail
   
   #add-point:單身複製中 name="detail_reproduce.body.table${table}.m_insert"
   {<point name="detail_reproduce.body.table${table}.m_insert"/>}
   #end add-point
   
   #刪除TEMP TABLE
   ${general_mark_tbl${table}}DROP TABLE ${general_prefix}_detail
   
   ${master_mark_ownid}LET g_data_owner = ${master_var_ownid}      
   ${master_mark_owndp}LET g_data_dept  = ${master_var_owndp}
   
   #add-point:單身複製後 name="detail_reproduce.body.table${table}.a_insert"
   {<point name="detail_reproduce.body.table${table}.a_insert"/>}
   #end add-point
   #tables -  End  -
   
   #多語言複製段落
   ${detail_multi_lang_repro}
   
   ${general_c03a_mark}CALL s_transaction_end('Y','0')
   
   #已新增完, 調整資料內容(修改時使用)
   LET g_${master_field_pk01}_t = ${master_var_pk01}
   #master_keys - Start -
   LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
   #keys -  End  -
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.delete" >}
#+ 資料刪除
PRIVATE FUNCTION ${general_prefix}_delete()
   #add-point:delete段define(客製用) name="delete.define_customerization"
   {<point name="delete.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE  l_var_keys      DYNAMIC ARRAY OF STRING
   DEFINE  l_field_keys    DYNAMIC ARRAY OF STRING
   DEFINE  l_vars          DYNAMIC ARRAY OF STRING
   DEFINE  l_fields        DYNAMIC ARRAY OF STRING
   DEFINE  l_var_keys_bak  DYNAMIC ARRAY OF STRING
   #add-point:delete段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete.define"
   {<point name="delete.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="delete.pre_function"
   {<point name="delete.pre_function"/>}
   #end add-point
   
   IF ${master_var_pk01} IS NULL
   #master_keys - Start -
   OR ${master_var_pk${key}} IS NULL
   #keys -  End  -
   THEN
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "" 
      LET g_errparam.code = "std-00003" 
      LET g_errparam.popup = FALSE 
      CALL cl_err()
      RETURN
   END IF
   
   ${master_multi_table_bak}
   
   CALL s_transaction_begin()
 
   OPEN ${general_prefix}_cl USING ${master_var_append}${master_var_allkeys}
   IF SQLCA.SQLCODE THEN   #(ver:78)
      INITIALIZE g_errparam TO NULL 
      LET g_errparam.extend = "OPEN ${general_prefix}_cl:",SQLERRMESSAGE 
      LET g_errparam.code = SQLCA.SQLCODE   #(ver:78)
      LET g_errparam.popup = TRUE 
      CLOSE ${general_prefix}_cl
      ${general_c03a_mark}CALL s_transaction_end('N','0')
      CALL cl_err()
      RETURN
   END IF
 
   #顯示最新的資料
   ${master_refresh}
   ${master_append_select}
   
   #檢查是否允許此動作
   IF NOT ${general_prefix}_action_chk() THEN
      ${general_c03a_mark}CALL s_transaction_end('N','0')
      RETURN
   END IF
   
   #遮罩相關處理
   LET ${master_var_title}_mask_o.* =  ${master_var_title}.*
   CALL ${general_prefix}_${master_tbl_name}_mask()
   LET ${master_var_title}_mask_n.* =  ${master_var_title}.*
   
   CALL ${general_prefix}_show()
   
   #add-point:delete段before ask name="delete.before_ask"
   {<point name="delete.before_ask"/>}
   #end add-point 
 
   IF cl_ask_del_master() THEN              #確認一下
   
      #add-point:單頭刪除前 name="delete.head.b_delete"
      {<point name="delete.head.b_delete" mark="Y"/>}
      #end add-point   
      
      ${master_related_document_remove}  
  
      #資料備份
      LET g_${master_field_pk01}_t = ${master_var_pk01}
      #master_keys - Start -
      LET g_${master_field_pk${key}}_t = ${master_var_pk${key}}
      #keys -  End  -
 
      DELETE FROM ${master_tbl_name}
       WHERE ${master_append_wc} ${master_field_pk01} = ${master_var_pk01}
         #master_keys - Start -
         AND ${master_field_pk${key}} = ${master_var_pk${key}}
         #keys -  End  -
       
      #add-point:單頭刪除中 name="delete.head.m_delete"
      {<point name="delete.head.m_delete"/>}
      #end add-point
       
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = ${master_var_pk01},":",SQLERRMESSAGE  
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF
      
      #add-point:單頭刪除後 name="delete.head.a_delete"
      {<point name="delete.head.a_delete"/>}
      #end add-point
  
      #add-point:單身刪除前 name="delete.body.b_delete"
      {<point name="delete.body.b_delete" mark="Y"/>}
      #end add-point
      
      DELETE FROM ${detail_tbl_name}
       WHERE ${detail_append_wc} ${detail_field_fk01} = ${master_var_pk01}
         #master_keys - Start -
         AND ${detail_field_fk${key}} = ${master_var_pk${key}}
         #keys -  End  -
 
      #add-point:單身刪除中 name="delete.body.m_delete"
      {<point name="delete.body.m_delete"/>}
      #end add-point
         
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_tbl_name}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF    
 
      #add-point:單身刪除後 name="delete.body.a_delete"
      {<point name="delete.body.a_delete"/>}
      #end add-point
      
      ${master_append_delete}      
                                                               
      #tables - Start - 
      #add-point:單身刪除前 name="delete.body.b_delete${table}"
      {<point name="delete.body.b_delete${table}" mark="Y"/>}
      #end add-point
      DELETE FROM ${detail_tbl_name_by_tbl${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
             ${detail_del_wc_by_tbl${table}}
      #add-point:單身刪除中 name="delete.body.m_delete${table}"
      {<point name="delete.body.m_delete${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_tbl_name${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete${table}"
      {<point name="delete.body.a_delete${table}"/>}
      #end add-point
      #tables -  End  -  
 
      #tables_d2 - Start - 
      #add-point:單身刪除前 name="delete.body.b_delete${table}"
      {<point name="delete.body.b_delete${table}" mark="Y"/>}
      #end add-point
      DELETE FROM ${detail_tbl_name_by_tbl${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
             ${detail_delete_wc${table}}
      #add-point:單身刪除中 name="delete.body.m_delete${table}"
      {<point name="delete.body.m_delete${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_tbl_name_by_tbl${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         CALL cl_err()
         RETURN
      END IF      
 
      #add-point:單身刪除後 name="delete.body.a_delete${table}"
      {<point name="delete.body.a_delete${table}"/>}
      #end add-point
      #tables -  End  - 
      
      #修改歷程記錄(刪除)
      LET g_log1 = util.JSON.stringify(${master_var_title})   #(ver:78)
      IF NOT cl_log_modified_record(g_log1,'') THEN    #(ver:78)
         CLOSE ${general_prefix}_cl
         ${general_c03a_mark}CALL s_transaction_end('N','0')
         RETURN
      END IF
             
      CLEAR FORM
      CALL ${detail_var_title}.clear() 
      #pages - Start -
      CALL ${detail_var_title${page}}.clear()       
      #pages -  End  -
     
      CALL ${general_prefix}_ui_browser_refresh()  
      #CALL ${general_prefix}_ui_headershow()  
      #CALL ${general_prefix}_ui_detailshow()
 
      #add-point:多語言刪除 name="delete.lang.before_delete"
      {<point name="delete.lang.before_delete"/>}
      #end add-point
      
      #單頭多語言刪除
      ${master_multi_table_delete}
      
      #單身多語言刪除
      ${detail_multi_table_delete_all1}
      #pages - Start -
      ${detail_multi_table_delete_all${page}}
      #pages -  End  - 
   
      #add-point:多語言刪除 name="delete.lang.delete"
      {<point name="delete.lang.delete"/>}
      #end add-point
      
      IF g_browser_cnt > 0 THEN 
         #CALL ${general_prefix}_browser_fill("")
         CALL ${general_prefix}_fetch('P')
         DISPLAY g_browser_cnt TO FORMONLY.h_count   #總筆數的顯示
         DISPLAY g_browser_cnt TO FORMONLY.b_count   #總筆數的顯示
      ELSE
         CLEAR FORM
      END IF
      
      ${general_c03a_mark}CALL s_transaction_end('Y','0')
   ELSE
      ${general_c03a_mark}CALL s_transaction_end('N','0')
   END IF
 
   CLOSE ${general_prefix}_cl
 
   #功能已完成,通報訊息中心
   CALL ${general_prefix}_msgcentre_notify('delete')
    
END FUNCTION
{</section>}
 
{<section id="${app_id}.b_fill" >}
#+ 單身陣列填充
PRIVATE FUNCTION ${general_prefix}_b_fill()
   #add-point:b_fill段define(客製用) name="b_fill.define_customerization"
   {<point name="b_fill.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE p_wc2      STRING
   DEFINE li_idx     LIKE type_t.num10
   #add-point:b_fill段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill.define"
   {<point name="b_fill.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="b_fill.pre_function"
   {<point name="b_fill.pre_function"/>}
   #end add-point
   
   #清空第一階單身
   CALL ${detail_var_title}.clear()
   #pages_m - Start -
   CALL ${detail_var_title${page}}.clear()
   #pages -  End  - 
 
   #add-point:b_fill段sql_before name="b_fill.sql_before"
   {<point name="b_fill.sql_before"/>}
   #end add-point
   
   #判斷是否填充
   IF ${general_prefix}_fill_chk(1) THEN
      #切換上下筆時不重組SQL
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
      #add-point:b_fill段long_sql_if name="b_fill.long_sql_if"
      {<point name="b_fill.long_sql_if"/>}
      #end add-point
      THEN
         LET g_sql = "${detail_fill_sql_pre} ${detail_reference_select_field} FROM ${detail_tbl_name}",   
                     " INNER JOIN ${master_tbl_name} ON ${master_append_wc_s} ${master_field_pk01} = ${detail_field_fk01} ",
                     #master_keys - Start -
                     " AND ${master_field_pk${key}} = ${detail_field_fk${key}} ",
                     #keys -  End  -
                     #"${detail_append_join_b_fill}",
                     ${detail_append_join_detail}
                     "${detail_append_join}",
                     #下層單身所需的join條件
                     #tables_d2 - Start - 
                     "${detail_append_join${table}} ",
                     #tables -  End  -
                     ${detail_reference_join_sql}
                     "${detail_fill_sql_post}"
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段sql_before name="b_fill.body.fill_sql"
         {<point name="b_fill.body.fill_sql"/>}
         #end add-point
         IF NOT cl_null(g_wc2_table1) THEN
            LET g_sql = g_sql CLIPPED, " AND ", g_wc2_table1 CLIPPED
         END IF
         
         #子單身的WC
         ${detail_append_detail_wc}
         
         LET g_sql = g_sql, " ORDER BY ${detail_field_order_by_tbl}"
         
         #add-point:單身填充控制 name="b_fill.sql"
         {<point name="b_fill.sql"/>}
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE ${general_prefix}_pb FROM g_sql
         DECLARE b_fill_cs CURSOR FOR ${general_prefix}_pb
      END IF
      
      LET g_cnt = l_ac
      LET l_ac = 1
      
   #  OPEN b_fill_cs USING ${master_var_append}${master_var_allkeys}   #(ver:78)
                                               
      FOREACH b_fill_cs USING ${master_var_append}${master_var_allkeys} INTO ${detail_vars_all_by_tbl}${detail_reference_fetch_field}   #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill.fill"
         {<point name="b_fill.fill"/>}
         #end add-point
      
         IF l_ac > g_max_rec THEN
            IF g_error_show = 1 THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
            EXIT FOREACH
         END IF
         
         LET l_ac = l_ac + 1
      END FOREACH
      LET g_error_show = 0
   
   END IF
    
   #tables - Start - 
   #判斷是否填充
   IF ${general_prefix}_fill_chk(${table}) THEN
      IF (g_action_choice = "query" OR cl_null(g_action_choice))
         #add-point:b_fill段long_sql_if name="b_fill.body${table}.long_sql_if"
         {<point name="b_fill.body${table}.long_sql_if"/>}
         #end add-point
      THEN
         LET g_sql = "${detail_fill_sql_pre${table}} ${detail_reference_select_field${table}} FROM ${detail_tbl_name_by_tbl${table}}",   
                     " INNER JOIN  ${master_tbl_name} ON ${master_append_wc_s} ${master_field_pk01} = ${detail_by_tbl${table}_field_fk01} ",
                     #master_keys - Start -
                     " AND ${master_field_pk${key}} = ${detail_by_tbl${table}_field_fk${key}} ",
                     #keys -  End  -
                     "${detail_append_join_b_fill${table}}",
                     ${detail_append_join_detail${table}}
                     ${detail_reference_join_sql${table}}
                     "${detail_fill_sql_post${table}}"   
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         #add-point:b_fill段fill_sql name="b_fill.body${table}.fill_sql"
         {<point name="b_fill.body${table}.fill_sql"/>}
         #end add-point
         IF NOT cl_null(g_wc2_table${table}) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table${table} CLIPPED
         END IF
         
         #子單身的WC
         ${detail_append_detail_wc${table}}
         
         LET g_sql = g_sql, " ORDER BY ${detail_field_order_by_tbl${table}}"
         
         #add-point:單身填充控制 name="b_fill.sql${table}"
         {<point name="b_fill.sql${table}"/>}
         #end add-point
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE ${general_prefix}_pb${table} FROM g_sql
         DECLARE b_fill_cs${table} CURSOR FOR ${general_prefix}_pb${table}
      END IF
    
      LET l_ac = 1
      
   #  OPEN b_fill_cs${table} USING ${master_var_append}${master_var_allkeys}   #(ver:78)
                                               
      FOREACH b_fill_cs${table} USING ${master_var_append}${master_var_allkeys} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}}   #(ver:78)
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill${table}.fill"
         {<point name="b_fill${table}.fill"/>}
         #end add-point
      
         LET l_ac = l_ac + 1
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOREACH
         END IF
         
      END FOREACH
   END IF
   #tables -  End  -
   
   #add-point:browser_fill段其他table處理 name="browser_fill.other_fill"
   {<point name="browser_fill.other_fill"/>}
   #end add-point
   
   CALL ${detail_var_title}.deleteElement(${detail_var_title}.getLength())
   #pages_m - Start -
   CALL ${detail_var_title${page}}.deleteElement(${detail_var_title${page}}.getLength())
   #pages -  End  -
   
   #tables_d - Start -
   IF ${general_prefix}_fill_chk(${table}) THEN
      LET g_sql = "${detail_fill_sql_pre${table}} ${detail_reference_select_field${table}} FROM ${detail_tbl_name_by_tbl${table}}",    
                  "${detail_append_join_b_fill${table}}",
                  ${detail_reference_join_sql${table}}
                  "${detail_fill_sql_post${table}}",
                  " AND ${detail${table}_field_pk01_by_tbl} = ? "
                  #detail_keys - Start -
                  ," AND ${detail${table}_field_pk${key}_by_tbl} = ? "
                  #keys -  End  -
      LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
      #add-point:b_fill段sql_before name="b_fill.body${table}.fill_sql"
      {<point name="b_fill.body${table}.fill_sql"/>}
      #end add-point
      IF NOT cl_null(g_wc2_table${table}) THEN
         LET g_sql = g_sql CLIPPED," AND ",g_wc2_table${table} CLIPPED
      END IF
      
      LET g_sql = g_sql, " ORDER BY  ${detail_field_order_by_tbl${table}}"
       
      LET g_sql = cl_sql_add_mask(g_sql) #遮蔽特定資料
      PREPARE ${general_prefix}_pb${table} FROM g_sql
      DECLARE b_fill_cs${table} CURSOR FOR ${general_prefix}_pb${table}
                                               
      FOR l_ac = 1 TO ${detail_link_title${table}}.getLength()
      
         OPEN b_fill_cs${table} USING ${master_var_append}${master_var_allkeys}
                                      ,${detail_link_key${table}}                                      
         #(ver:78) ---start---
         IF SQLCA.SQLCODE THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE
            LET g_errparam.popup = TRUE 
            CALL cl_err()

            INITIALIZE ${master_var_title}.* TO NULL
            CALL ${detail_var_title}.clear()
            #pages - Start -
            CALL ${detail_var_title${page}}.clear()
            #pages -  End  -

            RETURN
         END IF
         #(ver:78) --- end ---
         FETCH b_fill_cs${table} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}} 
         
         IF SQLCA.SQLCODE THEN
            IF SQLCA.SQLCODE = 100 THEN 
               ${detail_fields_default_by_tbl${table}}
               #補足缺少的資料
               #add-point:單身補足資料前 name="b_fill.before_insert"
               {<point name="b_fill.before_insert" mark="Y"/>}
               #end add-point
               INSERT INTO ${detail_name_by_table${table}}
                           (${detail_field_append_by_tbl${table}}
                            ${detail_field_fks_by_tbl${table}},
                            ${detail_field_pks_by_tbl${table}}
                            ${detail_field_others${table}}) 
                     VALUES(${detail_var_append_by_tbl${table}}
                            ${detail_var_fks},
                            ${detail_var_pks}
                            ${detail_var_others${table}})
               #(ver:78) ---start---
               IF SQLCA.SQLCODE THEN
                  INITIALIZE g_errparam TO NULL 
                  LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
                  LET g_errparam.code = SQLCA.SQLCODE
                  LET g_errparam.popup = TRUE 
                  CALL cl_err()
            
                  INITIALIZE ${master_var_title}.* TO NULL
                  CALL ${detail_var_title}.clear()
                  #pages - Start -
                  CALL ${detail_var_title${page}}.clear()
                  #pages -  End  -
            
                  RETURN
               END IF
               #(ver:78) --- end ---
               #add-point:單身填充補足資料後 name="b_fill.after_insert"
               {<point name="b_fill.after_insert"/>}
               #end add-point
            ELSE
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = ${detail_var_pk01},":",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
            END IF
         END IF
        
         #add-point:b_fill段資料填充 name="b_fill${table}.fill"
         {<point name="b_fill${table}.fill"/>}
         #end add-point
      
         IF l_ac > g_max_rec THEN
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = l_ac
            LET g_errparam.code = 9035 
            LET g_errparam.popup = TRUE 
            CALL cl_err()
            EXIT FOR
         END IF
         
      END FOR
   END IF
   #tables -  End  -
   LET l_ac = g_cnt
   LET g_cnt = 0  
   
   FREE ${general_prefix}_pb
   #tables - Start -
   FREE ${general_prefix}_pb${table}
   #tables -  End  -
   
   LET li_idx = l_ac
   
   #遮罩相關處理
   FOR l_ac = 1 TO ${detail_var_title}.getLength()
      LET ${detail_var_title}_mask_o[l_ac].* =  ${detail_var_title}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name}_mask()
      LET ${detail_var_title}_mask_n[l_ac].* =  ${detail_var_title}[l_ac].*
   END FOR
   
   #pages - Start - 
   LET ${detail_var_title${page}}_mask_o.* =  ${detail_var_title${page}}.*
   FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
      LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
      LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
   END FOR
   #pages -  End  -
   
   LET l_ac = li_idx
   
   CALL cl_ap_performance_next_end()
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.delete_b" >}
#+ 刪除單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_delete_b(ps_table,ps_keys_bak,ps_page)
   #add-point:delete_b段define(客製用) name="delete_b.define_customerization"
   {<point name="delete_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys_bak DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="delete_b.define"
   {<point name="delete_b.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="delete_b.pre_function"
   {<point name="delete_b.pre_function"/>}
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_page_group}"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete"
      {<point name="delete_b.b_delete" mark="Y"/>}
      #end add-point    
      DELETE FROM ${detail_name_by_table}
       WHERE ${detail_append_wc_by_tbl}
         ${detail_tbl_wc}
      #add-point:delete_b段刪除中 name="delete_b.m_delete"
      {<point name="delete_b.m_delete"/>}
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table1}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      LET li_idx = g_detail_idx
      ${detail_page_group_delete}
   END IF
   
   #tables - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete${table}"
      {<point name="delete_b.b_delete${table}" mark="Y"/>}
      #end add-point    
      DELETE FROM ${detail_name_by_table${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
             ${detail_tbl_wc${table}}
      #add-point:delete_b段刪除中 name="delete_b.m_delete${table}"
      {<point name="delete_b.m_delete${table}"/>}
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
      
      LET li_idx = g_detail_idx
      ${detail_page_group_delete${table}}
      #add-point:delete_b段刪除後 name="delete_b.a_delete${table}"
      {<point name="delete_b.a_delete${table}"/>}
      #end add-point    
   END IF
   #tables -  End  - 
   
   #tables_d2 - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table2
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:delete_b段刪除前 name="delete_b.b_delete${table}"
      {<point name="delete_b.b_delete${table}" mark="Y"/>}
      #end add-point    
      DELETE FROM ${detail_name_by_table${table}}
       WHERE ${detail_append_wc_by_tbl${table}}
             ${detail_tbl_wc${table}}
      #add-point:delete_b段刪除中 name="delete_b.m_delete${table}"
      {<point name="delete_b.m_delete${table}"/>}
      #end add-point    
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
         RETURN FALSE
      END IF
    
      LET li_idx = g_detail_idx2
      ${detail_page_group_delete${table}}
      #add-point:delete_b段刪除後 name="delete_b.a_delete${table}"
      {<point name="delete_b.a_delete${table}"/>}
      #end add-point    
   END IF
   #tables -  End  - 
   
   #add-point:delete_b段other name="delete_b.other"
   {<point name="delete_b.other"/>}
   #end add-point  
   
   RETURN TRUE
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.insert_b" >}
#+ 新增單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_insert_b(ps_table,ps_keys,ps_page)
   #add-point:insert_b段define(客製用) name="insert_b.define_customerization"
   {<point name="insert_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE ps_table    STRING
   DEFINE ps_page     STRING
   DEFINE ps_keys     DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group    STRING
   DEFINE ls_page     STRING
   DEFINE li_idx      LIKE type_t.num10
   #add-point:insert_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="insert_b.define"
   {<point name="insert_b.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="insert_b.pre_function"
   {<point name="insert_b.pre_function"/>}
   #end add-point
   
   LET g_update = TRUE  
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_page_group}"
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert"
      {<point name="insert_b.before_insert" mark="Y"/>}
      #end add-point 
      INSERT INTO ${detail_name_by_table}
                  (${detail_field_append_by_tbl}
                   ${detail_field_fks_by_tbl},
                   ${detail_field_pks_by_tbl}
                   ${detail_field_others}) 
            VALUES(${detail_var_append_by_tbl}
                   ${detail_var_ps_keys}
                   ${detail_var_others})
      #add-point:insert_b段資料新增中 name="insert_b.m_insert"
      {<point name="insert_b.m_insert"/>}
      #end add-point 
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      ${detail_page_group_insert}
      #add-point:insert_b段資料新增後 name="insert_b.after_insert"
      {<point name="insert_b.after_insert"/>}
      #end add-point 
   END IF
   
   #tables - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert${table}"
      {<point name="insert_b.before_insert${table}" mark="Y"/>}
      #end add-point 
      INSERT INTO ${detail_name_by_table${table}}
                  (${detail_field_append_by_tbl${table}}
                   ${detail_field_fks_by_tbl${table}},
                   ${detail_field_pks_by_tbl${table}}
                   ${detail_field_others${table}}) 
            VALUES(${detail_var_append_by_tbl${table}}
                   ${detail_var_ps_keys${table}}
                   ${detail_var_others${table}})
      #add-point:insert_b段資料新增中 name="insert_b.m_insert${table}"
      {<point name="insert_b.m_insert${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx
      ${detail_page_group_insert${table}}
      #add-point:insert_b段資料新增後 name="insert_b.after_insert${table}"
      {<point name="insert_b.after_insert${table}"/>}
      #end add-point
   END IF
   #tables -  End  - 
   
   #tables_d2 - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      #add-point:insert_b段資料新增前 name="insert_b.before_insert${table}"
      {<point name="insert_b.before_insert${table}" mark="Y"/>}
      #end add-point 
      INSERT INTO ${detail_name_by_table${table}}
                  (${detail_field_append_by_tbl${table}}
                   ${detail_field_fks_by_tbl${table}},
                   ${detail_field_pks_by_tbl${table}}
                   ${detail_field_others${table}}) 
            VALUES(${detail_var_append_by_tbl${table}}
                   ${detail_var_ps_keys${table}}
                   ${detail_var_others${table}})
      #add-point:insert_b段資料新增中 name="insert_b.m_insert${table}"
      {<point name="insert_b.m_insert${table}"/>}
      #end add-point
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = FALSE 
         CALL cl_err()
      END IF
      
      LET li_idx = g_detail_idx2
      ${detail_page_group_insert${table}}
      #add-point:insert_b段資料新增後 name="insert_b.after_insert${table}"
      {<point name="insert_b.after_insert${table}"/>}
      #end add-point
   END IF
   #tables -  End  - 
   
   #add-point:insert_b段other name="insert_b.other"
   {<point name="insert_b.other"/>}
   #end add-point     
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.update_b" >}
#+ 修改單身後其他table連動
PRIVATE FUNCTION ${general_prefix}_update_b(ps_table,ps_keys,ps_keys_bak,ps_page)
   #add-point:update_b段define(客製用) name="update_b.define_customerization"
   {<point name="update_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   DEFINE ps_table         STRING
   DEFINE ps_page          STRING
   DEFINE ps_keys          DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_keys_bak      DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ls_group         STRING
   DEFINE li_idx           LIKE type_t.num10 
   DEFINE lb_chk           BOOLEAN
   DEFINE l_new_key        DYNAMIC ARRAY OF STRING
   DEFINE l_old_key        DYNAMIC ARRAY OF STRING
   DEFINE l_field_key      DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="update_b.define"
   {<point name="update_b.define"/>} 
   #end add-point   
   
   #add-point:Function前置處理  name="update_b.pre_function"
   {<point name="update_b.pre_function"/>}
   #end add-point
   
   LET g_update = TRUE   
   
   #判斷key是否有改變
   LET lb_chk = TRUE
   FOR li_idx = 1 TO ps_keys.getLength()
      IF ps_keys[li_idx] <> ps_keys_bak[li_idx] THEN
         LET lb_chk = FALSE
         EXIT FOR
      END IF
   END FOR
   
   #不需要做處理
   IF lb_chk THEN
      RETURN
   END IF
   
   #判斷是否是同一群組的table
   LET ls_group = "${detail_page_group}"
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "${detail_name_by_table}" THEN
      #add-point:update_b段修改前 name="update_b.before_update"
      {<point name="update_b.before_update" mark="Y"/>}
      #end add-point 
      
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table}_mask_restore('restore_mask_o')
               
      UPDATE ${detail_name_by_table} 
         SET (${detail_field_fks_by_tbl},
              ${detail_field_pks_by_tbl}
              ${detail_field_others}) 
              = 
             (${detail_var_ps_keys}
              ${detail_var_others}) 
         WHERE ${detail_append_wc_by_tbl} ${detail_tbl_wc}
      #add-point:update_b段修改中 name="update_b.m_update"
      {<point name="update_b.m_update"/>}
      #end add-point   
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE

      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table}_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update"
      {<point name="update_b.after_update"/>}
      #end add-point  
   END IF
   
   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      ${detail_append_pk_upd_by_tbl}
   END IF
   
   
   #tables - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "${detail_name_by_table${table}}" THEN
      #add-point:update_b段修改前 name="update_b.before_update${table}"
      {<point name="update_b.before_update${table}" mark="Y"/>}
      #end add-point  
      
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_o')
               
      UPDATE ${detail_name_by_table${table}} 
         SET (${detail_field_fks_by_tbl${table}},
              ${detail_field_pks_by_tbl${table}}
              ${detail_field_others${table}}) 
              = 
             (${detail_var_ps_keys${table}}
              ${detail_var_others${table}}) 
         WHERE ${detail_append_wc_by_tbl${table}} ${detail_tbl_wc${table}}
      #add-point:update_b段修改中 name="update_b.m_update${table}"
      {<point name="update_b.m_update${table}"/>}
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
          
      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_n')
 
      #add-point:update_b段修改後 name="update_b.after_update${table}"
      {<point name="update_b.after_update${table}"/>}
      #end add-point  
   END IF

   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      ${detail_append_pk_upd_by_tbl${table}}
   END IF
   #tables -  End  - 
   
   #tables_d2 - Start - 
   LET ls_group = "${detail_page_group${table}}"
   #判斷是否是同一群組的table
   IF ls_group.getIndexOf(ps_page,1) > 0 AND ps_table <> "${detail_name_by_table${table}}" THEN
      #add-point:update_b段修改前 name="update_b.before_update${table}"
      {<point name="update_b.before_update${table}" mark="Y"/>}
      #end add-point
      
      #將遮罩欄位還原
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_o')
               
      UPDATE ${detail_name_by_table${table}} 
         SET (${detail_field_fks_by_tbl${table}},
              ${detail_field_pks_by_tbl${table}}
              ${detail_field_others${table}}) 
              = 
             (${detail_var_ps_keys${table}}
              ${detail_var_others${table}}) 
         WHERE ${detail_append_wc_by_tbl${table}} ${detail_tbl_wc${table}}
      #add-point:update_b段修改中 name="update_b.m_update${table}"
      {<point name="update_b.m_update${table}"/>}
      #end add-point  
      CASE
         WHEN SQLCA.sqlerrd[3] = 0  #更新不到的處理
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}" 
            LET g_errparam.code = "std-00009" 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE

      END CASE
      
      #將遮罩欄位進行遮蔽
      CALL ${general_prefix}_${detail_name_by_table${table}}_mask_restore('restore_mask_n')
               
      #add-point:update_b段修改後 name="update_b.after_update${table}"
      {<point name="update_b.after_update${table}"/>}
      #end add-point  
   END IF

   #子表處理
   IF ls_group.getIndexOf(ps_page,1) > 0 THEN
      ${detail_append_pk_upd_by_tbl${table}}
   END IF
   #tables -  End  - 
   
   #add-point:update_b段other name="update_b.other"
   {<point name="update_b.other"/>}
   #end add-point  
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.key_update_b" >}
#+ 上層單身key欄位變動後, 連帶修正下層單身key欄位
PRIVATE FUNCTION ${general_prefix}_key_update_b(ps_keys_bak,ps_table)
   #add-point:update_b段define(客製用) name="key_update_b.define_customerization"
   {<point name="key_update_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_key       DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:update_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_update_b.define"
   {<point name="key_update_b.define"/>} 
   #end add-point
   
   #add-point:Function前置處理  name="key_update_b.pre_function"
   {<point name="key_update_b.pre_function"/>}
   #end add-point
   
   #tables_d2 - Start - 
   #如果是上層單身則進行update
   IF ps_table = '${detail_master_name${table}}' THEN
      #add-point:update_b段修改前 name="key_update_b.before_update${table}"
      {<point name="key_update_b.before_update${table}" mark="Y"/>}
      #end add-point
      
      UPDATE ${detail_name_by_table${table}} 
         SET (${detail_field_fks_by_tbl${table}}) 
              = 
             (${detail_var_fks_by_tbl${table}}) 
         WHERE ${detail_append_wc_by_tbl${table}}
               ${detail_tbl_wc_by_body${table}}
 
      #add-point:update_b段修改中 name="key_update_b.m_update${table}"
      {<point name="key_update_b.m_update${table}"/>}
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            
         OTHERWISE
            #若有多語言table資料一同更新
            ${detail_append_pk_upd_all_by_tbl${table}}
      END CASE
      
      #add-point:update_b段修改後 name="key_update_b.after_update${table}"
      {<point name="key_update_b.after_update${table}"/>}
      #end add-point
   END IF
   #tables -  End  -
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.key_delete_b" >}
#+ 上層單身刪除後, 連帶刪除下層單身key欄位
PRIVATE FUNCTION ${general_prefix}_key_delete_b(ps_keys_bak,ps_table)
   #add-point:delete_b段define(客製用) name="key_delete_b.define_customerization"
   {<point name="key_delete_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ps_keys_bak       DYNAMIC ARRAY OF VARCHAR(500)
   DEFINE ps_table          STRING
   DEFINE l_field_keys      DYNAMIC ARRAY OF STRING
   DEFINE l_var_keys_bak    DYNAMIC ARRAY OF STRING
   DEFINE l_new_key         DYNAMIC ARRAY OF STRING
   DEFINE l_old_key         DYNAMIC ARRAY OF STRING
   #add-point:delete_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="key_delete_b.define"
   {<point name="key_delete_b.define"/>} 
   #end add-point
   
   #add-point:Function前置處理  name="key_delete_b.pre_function"
   {<point name="key_delete_b.pre_function"/>}
   #end add-point
   
   #tables_d2 - Start - 
   #如果是上層單身則進行delete
   IF ps_table = '${detail_master_name${table}}' THEN
      #add-point:delete_b段修改前 name="key_delete_b.before_delete${table}"
      {<point name="key_delete_b.before_delete${table}" mark="Y"/>}
      #end add-point
      
      DELETE FROM ${detail_name_by_table${table}} 
            WHERE ${detail_append_wc_by_tbl${table}}
                  ${detail_tbl_wc_by_body${table}}
 
      #add-point:delete_b段修改中 name="key_delete_b.m_delete${table}"
      {<point name="key_delete_b.m_delete${table}"/>}
      #end add-point
              
      CASE
         WHEN SQLCA.SQLCODE #其他錯誤
            INITIALIZE g_errparam TO NULL 
            LET g_errparam.extend = "${detail_name_by_table${table}}:",SQLERRMESSAGE 
            LET g_errparam.code = SQLCA.SQLCODE 
            LET g_errparam.popup = TRUE 
            ${general_c03a_mark}CALL s_transaction_end('N','0')
            CALL cl_err()
            RETURN FALSE
         OTHERWISE
      END CASE
 
      ${detail_append_pk_del_all_by_tbl${table}} 
 
      #add-point:delete_b段修改後 name="key_delete_b.after_delete${table}"
      {<point name="key_delete_b.after_delete${table}"/>}
      #end add-point
   END IF
   #tables -  End  -
   
   RETURN TRUE
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.lock_b" >}
#+ 連動lock其他單身table資料
PRIVATE FUNCTION ${general_prefix}_lock_b(ps_table,ps_page)
   #add-point:lock_b段define(客製用) name="lock_b.define_customerization"
   {<point name="lock_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:lock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="lock_b.define"
   {<point name="lock_b.define"/>} 
   #end add-point   
   
   #add-point:Function前置處理  name="lock_b.pre_function"
   {<point name="lock_b.pre_function"/>}
   #end add-point
    
   #先刷新資料
   #CALL ${general_prefix}_b_fill()
   
   #鎖定整組table
   #LET ls_group = "${detail_page_group}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name}"
   
   IF ls_group.getIndexOf(ps_table,1) THEN
      OPEN ${general_prefix}_bcl USING ${detail_var_append}
                                       ${detail_var_fks_by_tbl},${detail_by_tbl_var_pks}     
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${general_prefix}_bcl:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
                                    
   #tables - Start -
   #鎖定整組table
   #LET ls_group = "${detail_page_group${table}}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name_by_tbl${table}}"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN ${detail_table_bcl${table}} USING ${detail_var_append_by_tbl${table}}
                                             ${detail_var_fks_by_tbl${table}},${detail_by_tbl_var_pks${table}}
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_table_bcl${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #tables -  End  -
   
   #tables_d2 - Start -
   #鎖定整組table
   #LET ls_group = "${detail_page_group${table}}"
   #僅鎖定自身table
   LET ls_group = "${detail_tbl_name_by_tbl${table}}"
   IF ls_group.getIndexOf(ps_table,1) THEN
   
      OPEN ${detail_table_bcl${table}} USING ${detail_var_append_by_tbl${table}}
                                             ${detail_var_fks_by_tbl${table}},
                                             ${detail_by_tbl_var_pks${table}}
      IF SQLCA.SQLCODE THEN
         INITIALIZE g_errparam TO NULL 
         LET g_errparam.extend = "${detail_table_bcl${table}}:",SQLERRMESSAGE 
         LET g_errparam.code = SQLCA.SQLCODE 
         LET g_errparam.popup = TRUE 
         CALL cl_err()
         RETURN FALSE
      END IF
   END IF
   #tables -  End  -
   
   #add-point:lock_b段other name="lock_b.other"
   {<point name="lock_b.other"/>}
   #end add-point  
   
   RETURN TRUE
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.unlock_b" >}
#+ 連動unlock其他單身table資料
PRIVATE FUNCTION ${general_prefix}_unlock_b(ps_table,ps_page)
   #add-point:unlock_b段define(客製用) name="unlock_b.define_customerization"
   {<point name="unlock_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE ps_page     STRING
   DEFINE ps_table    STRING
   DEFINE ls_group    STRING
   #add-point:unlock_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="unlock_b.define"
   {<point name="unlock_b.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理  name="unlock_b.pre_function"
   {<point name="unlock_b.pre_function"/>}
   #end add-point
    
   LET ls_group = "${detail_page_group}"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE ${general_prefix}_bcl
   END IF
   
   #tables - Start -
   LET ls_group = "${detail_page_group${table}}"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE ${detail_table_bcl${table}}
   END IF
   #tables -  End  -
   
   #tables_d2 - Start -
   LET ls_group = "${detail_page_group${table}}"
   
   IF ls_group.getIndexOf(ps_page,1) THEN
      CLOSE ${detail_table_bcl${table}}
   END IF
   #tables -  End  -
 
   #add-point:unlock_b段other name="unlock_b.other"
   {<point name="unlock_b.other"/>}
   #end add-point  
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_entry" >}
#+ 單頭欄位開啟設定
PRIVATE FUNCTION ${general_prefix}_set_entry(p_cmd)
   #add-point:set_entry段define(客製用) name="set_entry.define_customerization"
   {<point name="set_entry.define_customerization" edit="c" mark="Y"/>}
   #end add-point       
   DEFINE p_cmd   LIKE type_t.chr1  
   #add-point:set_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry.define"
   {<point name="set_entry.define"/>} 
   #end add-point       
   
   #add-point:Function前置處理  name="set_entry.pre_function"
   {<point name="set_entry.pre_function"/>}
   #end add-point
   
   CALL cl_set_comp_entry("${master_no_entry_anyway}",TRUE)
   
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("${master_entry_fields}",TRUE)
      CALL cl_set_comp_entry("${master_no_entry_docdt}",TRUE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,TRUE)
      END IF
      #add-point:set_entry段欄位控制 name="set_entry.field_control"
      {<point name="set_entry.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry段欄位控制後 name="set_entry.after_control"
   {<point name="set_entry.after_control"/>}
   #end add-point 
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_no_entry" >}
#+ 單頭欄位關閉設定
PRIVATE FUNCTION ${general_prefix}_set_no_entry(p_cmd)
   #add-point:set_no_entry段define(客製用) name="set_no_entry.define_customerization"
   {<point name="set_no_entry.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry.define"
   {<point name="set_no_entry.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="set_no_entry.pre_function"
   {<point name="set_no_entry.pre_function"/>}
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("${master_no_entry_fields}",FALSE)
      #根據azzi850使用者身分開關特定欄位
      IF NOT cl_null(g_no_entry) THEN
         CALL cl_set_comp_entry(g_no_entry,FALSE)
      END IF
      #add-point:set_no_entry段欄位控制 name="set_no_entry.field_control"
      {<point name="set_no_entry.field_control"/>}
      #end add-point 
   END IF 
   
   IF p_cmd = 'u' THEN  #docno,ld欄位確認是絕對關閉
      CALL cl_set_comp_entry("${master_no_entry_anyway}",FALSE)
   END IF 
 
#  IF p_cmd = 'u' THEN  #docdt欄位依照設定關閉(FALSE則為設定不同意修正) #(ver:78)
      IF NOT cl_chk_update_docdt() THEN
         CALL cl_set_comp_entry("${master_no_entry_docdt}",FALSE)
      END IF
#  END IF 
   
   #add-point:set_no_entry段欄位控制後 name="set_no_entry.after_control"
   {<point name="set_no_entry.after_control"/>}
   #end add-point 
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_entry_b" >}
#+ 單身欄位開啟設定
PRIVATE FUNCTION ${general_prefix}_set_entry_b(p_cmd)
   #add-point:set_entry_b段define(客製用) name="set_entry_b.define_customerization"
   {<point name="set_entry_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point     
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_entry_b.define"
   {<point name="set_entry_b.define"/>} 
   #end add-point     
   
   #add-point:Function前置處理  name="set_entry_b.pre_function"
   {<point name="set_entry_b.pre_function"/>}
   #end add-point
    
   IF p_cmd = 'a' THEN
      CALL cl_set_comp_entry("${detail_entry_fields}",TRUE)
      #add-point:set_entry段欄位控制 name="set_entry_b.field_control"
      {<point name="set_entry_b.field_control"/>}
      #end add-point  
   END IF
   
   #add-point:set_entry_b段 name="set_entry_b.set_entry_b"
   {<point name="set_entry_b.set_entry_b"/>}
   #end add-point  
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_no_entry_b" >}
#+ 單身欄位關閉設定
PRIVATE FUNCTION ${general_prefix}_set_no_entry_b(p_cmd)
   #add-point:set_no_entry_b段define(客製用) name="set_no_entry_b.define_customerization"
   {<point name="set_no_entry_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point    
   DEFINE p_cmd   LIKE type_t.chr1   
   #add-point:set_no_entry_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_no_entry_b.define"
   {<point name="set_no_entry_b.define"/>} 
   #end add-point    
   
   #add-point:Function前置處理  name="set_no_entry_b.pre_function"
   {<point name="set_no_entry_b.pre_function"/>}
   #end add-point
   
   IF p_cmd = 'u' AND g_chkey = 'N' THEN
      CALL cl_set_comp_entry("${detail_no_entry_fields}",FALSE)
      #add-point:set_no_entry_b段欄位控制 name="set_no_entry_b.field_control"
      {<point name="set_no_entry_b.field_control"/>}
      #end add-point 
   END IF 
   
   #add-point:set_no_entry_b段 name="set_no_entry_b.set_no_entry_b"
   {<point name="set_no_entry_b.set_no_entry_b"/>}
   #end add-point     
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_act_visible" >}
#+ 單頭權限開啟
PRIVATE FUNCTION ${general_prefix}_set_act_visible()
   #add-point:set_act_visible段define(客製用) name="set_act_visible.define_customerization"
   {<point name="set_act_visible.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:set_act_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible.define"
   {<point name="set_act_visible.define"/>} 
   #end add-point   
   #add-point:set_act_visible段 name="set_act_visible.set_act_visible"
   {<point name="set_act_visible.set_act_visible"/>}
   #end add-point   
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_act_no_visible" >}
#+ 單頭權限關閉
PRIVATE FUNCTION ${general_prefix}_set_act_no_visible()
   #add-point:set_act_no_visible段define(客製用) name="set_act_no_visible.define_customerization"
   {<point name="set_act_no_visible.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:set_act_no_visible段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible.define"
   {<point name="set_act_no_visible.define"/>} 
   #end add-point   
   #add-point:set_act_no_visible段 name="set_act_no_visible.set_act_no_visible"
   {<point name="set_act_no_visible.set_act_no_visible"/>}
   #end add-point   
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_act_visible_b" >}
#+ 單身權限開啟
PRIVATE FUNCTION ${general_prefix}_set_act_visible_b()
   #add-point:set_act_visible_b段define(客製用) name="set_act_visible_b.define_customerization"
   {<point name="set_act_visible_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:set_act_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_visible_b.define"
   {<point name="set_act_visible_b.define"/>} 
   #end add-point   
   #add-point:set_act_visible_b段 name="set_act_visible_b.set_act_visible_b"
   {<point name="set_act_visible_b.set_act_visible_b"/>}
   #end add-point   
END FUNCTION
{</section>}
 
{<section id="${app_id}.set_act_no_visible_b" >}
#+ 單身權限關閉
PRIVATE FUNCTION ${general_prefix}_set_act_no_visible_b()
   #add-point:set_act_no_visible_b段define(客製用) name="set_act_no_visible_b.define_customerization"
   {<point name="set_act_no_visible_b.define_customerization" edit="c" mark="Y"/>}
   #end add-point   
   #add-point:set_act_no_visible_b段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="set_act_no_visible_b.define"
   {<point name="set_act_no_visible_b.define"/>} 
   #end add-point   
   #add-point:set_act_no_visible_b段 name="set_act_no_visible_b.set_act_no_visible_b"
   {<point name="set_act_no_visible_b.set_act_no_visible_b"/>}
   #end add-point   
END FUNCTION
{</section>}
 
{<section id="${app_id}.default_search" >}
#+ 外部參數搜尋
PRIVATE FUNCTION ${general_prefix}_default_search()
   #add-point:default_search段define(客製用) name="default_search.define_customerization"
   {<point name="default_search.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   DEFINE li_idx     LIKE type_t.num10
   DEFINE li_cnt     LIKE type_t.num10
   DEFINE ls_wc      STRING
   DEFINE la_wc      DYNAMIC ARRAY OF RECORD
          tableid    STRING,
          wc         STRING
          END RECORD
   DEFINE ls_where   STRING
   #add-point:default_search段define(請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="default_search.define"
   {<point name="default_search.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理 name="default_search.before"
   {<point name="default_search.before"/>}
   #end add-point  
   
   LET g_pagestart = 1
   
   IF cl_null(g_order) THEN
      LET g_order = "ASC"
   END IF
   
   IF NOT cl_null(g_argv[${general_para01}]) THEN
      LET ls_wc = ls_wc, " ${master_field_pk01} = '", g_argv[${general_para01}], "' AND "
   END IF
   
   #master_keys - Start -
   IF NOT cl_null(g_argv[${general_para${key}}]) THEN
      LET ls_wc = ls_wc, " ${master_field_pk${key}} = '", g_argv[${general_para${key}}], "' AND "
   END IF
   #keys -  End  -
   
   #add-point:default_search段after sql name="default_search.after_sql"
   {<point name="default_search.after_sql"/>}
   #end add-point  
   
   IF NOT cl_null(ls_wc) THEN
      LET g_wc = ls_wc.subString(1,ls_wc.getLength()-5)
      LET g_default = TRUE
   ELSE
      #若無外部參數則預設為1=2
      LET g_default = FALSE
      
      #預設查詢條件
      CALL cl_qbe_get_default_qryplan() RETURNING ls_where
      IF NOT cl_null(ls_where) THEN
         CALL util.JSON.parse(ls_where, la_wc)
         INITIALIZE g_wc, g_wc2,g_wc2_table1,g_wc2_extend TO NULL
         #tables - Start -
         INITIALIZE g_wc2_table${table} TO NULL
         #tables -  End  -
         FOR li_idx = 1 TO la_wc.getLength()
            CASE
               WHEN la_wc[li_idx].tableid = "${master_tbl_name}" 
                  LET g_wc = la_wc[li_idx].wc
               WHEN la_wc[li_idx].tableid = "${detail_tbl_name}" 
                  LET g_wc2_table1 = la_wc[li_idx].wc
               #tables - Start -
               WHEN la_wc[li_idx].tableid = "${detail_tbl_name_by_tbl${table}}" 
                  LET g_wc2_table${table} = la_wc[li_idx].wc
               #tables -  End  -
               WHEN la_wc[li_idx].tableid = "EXTENDWC"
                  LET g_wc2_extend = la_wc[li_idx].wc
            END CASE
         END FOR
         IF NOT cl_null(g_wc) OR NOT cl_null(g_wc2_table1) 
            #tables - Start -
            OR NOT cl_null(g_wc2_table${table})
            #tables -  End  -
            OR NOT cl_null(g_wc2_extend)
            THEN
            #組合g_wc2
            IF g_wc2_table1 <> " 1=1" AND NOT cl_null(g_wc2_table1) THEN
               LET g_wc2 = g_wc2_table1
            END IF
            #tables - Start -
            IF g_wc2_table${table} <> " 1=1" AND NOT cl_null(g_wc2_table${table}) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_table${table}
            END IF
            #tables -  End  -
            IF g_wc2_extend <> " 1=1" AND NOT cl_null(g_wc2_extend) THEN
               LET g_wc2 = g_wc2 ," AND ", g_wc2_extend
            END IF
         
            IF g_wc2.subString(1,5) = " AND " THEN
               LET g_wc2 = g_wc2.subString(6,g_wc2.getLength())
            END IF
         END IF
      END IF
    
      IF cl_null(g_wc) AND cl_null(g_wc2) THEN
         LET g_wc = " 1=2"
      END IF
   END IF
   
   #add-point:default_search段結束前 name="default_search.after"
   {<point name="default_search.after"/>}
   #end add-point  
 
   IF g_wc.getIndexOf(" 1=2", 1) THEN
      LET g_default = TRUE
   END IF
 
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.state_change" >}
   ${general_state_change}
{</section>}
 
{<section id="${app_id}.idx_chk" >}
#+ 顯示正確的單身資料筆數
PRIVATE FUNCTION ${general_prefix}_idx_chk()
   #add-point:idx_chk段define(客製用) name="idx_chk.define_customerization"
   {<point name="idx_chk.define_customerization" edit="c" mark="Y"/>}
   #end add-point  
   #add-point:idx_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="idx_chk.define"
   {<point name="idx_chk.define"/>} 
   #end add-point  
   
   #add-point:Function前置處理  name="idx_chk.pre_function"
   {<point name="idx_chk.pre_function"/>}
   #end add-point
   
   IF g_current_page = 1 THEN
      LET g_detail_idx = g_curr_diag.getCurrentRow("${sr_name}")
      IF g_detail_idx > ${detail_var_title}.getLength() THEN
         LET g_detail_idx = ${detail_var_title}.getLength()
      END IF
      IF g_detail_idx = 0 AND ${detail_var_title}.getLength() <> 0 THEN
         LET g_detail_idx = 1
      END IF
      DISPLAY g_detail_idx TO FORMONLY.idx
      DISPLAY ${detail_var_title}.getLength() TO FORMONLY.cnt
   END IF
   
   #pages - Start -
   IF g_current_page = ${page} THEN
      LET g_detail_idx${general_page_idx${page}} = g_curr_diag.getCurrentRow("${sr_name${page}}")
      IF g_detail_idx${general_page_idx${page}} > ${detail_var_title${page}}.getLength() THEN
         LET g_detail_idx${general_page_idx${page}} = ${detail_var_title${page}}.getLength()
      END IF
      IF g_detail_idx${general_page_idx${page}} = 0 AND ${detail_var_title${page}}.getLength() <> 0 THEN
         LET g_detail_idx${general_page_idx${page}} = 1
      END IF
      DISPLAY g_detail_idx${general_page_idx${page}} TO FORMONLY.idx
      DISPLAY ${detail_var_title${page}}.getLength() TO FORMONLY.cnt
   END IF
   #pages -  End  -
   
   #add-point:idx_chk段other name="idx_chk.other"
   {<point name="idx_chk.other"/>}
   #end add-point  
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.b_fill2" >}
#+ 單身陣列填充2
PRIVATE FUNCTION ${general_prefix}_b_fill2(pi_idx)
   #add-point:b_fill2段define(客製用) name="b_fill2.define_customerization"
   {<point name="b_fill2.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE pi_idx                 LIKE type_t.num10
   DEFINE li_ac                  LIKE type_t.num10
   DEFINE li_detail_idx_tmp      LIKE type_t.num10
   DEFINE ls_chk                 LIKE type_t.chr1
   #add-point:b_fill2段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="b_fill2.define"
   {<point name="b_fill2.define"/>} 
   #end add-point
   
   #add-point:Function前置處理  name="b_fill2.pre_function"
   {<point name="b_fill2.pre_function"/>}
   #end add-point
   
   LET li_ac = l_ac 
   
   IF g_detail_idx <= 0 THEN
      RETURN
   END IF
   
   LET li_detail_idx_tmp = g_detail_idx
   
   #tables_d2 - Start -
   IF ${general_prefix}_fill_chk(${table}) THEN
      IF (pi_idx = ${table} OR pi_idx = 0 ) AND ${detail_master_first_page_by_tbl${table}}.getLength() > 0 THEN
         ${detail_page_clear_by_tbl${table}}
         
         #取得該單身上階單身的idx
         LET g_detail_idx = g_detail_idx_list[${detail_master_first_page_num_by_tbl${table}}]
         
         LET g_sql = "${detail_fill_sql_pre${table}} ${detail_reference_select_field${table}} FROM ${detail_tbl_name_by_tbl${table}}",    
                     "${detail_append_join_b_fill_2${table}}",
                     ${detail_reference_join_sql${table}}
                     "${detail_fill_sql_post${table}}"
         
         IF NOT cl_null(g_wc2_table${table}) THEN
            LET g_sql = g_sql CLIPPED," AND ",g_wc2_table${table} CLIPPED
         END IF
         
         LET g_sql = g_sql, " ORDER BY  ${detail_field_order_by_tbl${table}}" 
                            
         #add-point:單身填充前 name="b_fill2.before_fill${table}"
         {<point name="b_fill2.before_fill${table}" />}
         #end add-point
         
         #先清空資料
         ${detail_page_clear_by_tbl${table}}
         
         LET g_sql = cl_sql_add_mask(g_sql)              #遮蔽特定資料
         PREPARE ${general_prefix}_pb${table} FROM g_sql
         DECLARE b_fill_curs${table} CURSOR FOR ${general_prefix}_pb${table}
         
      #  OPEN b_fill_curs${table} USING ${detail_var_append}${detail_var_fk_by_tbl${table}}   #(ver:78)
         LET l_ac = 1
         FOREACH b_fill_curs${table} USING ${detail_var_append}${detail_var_fk_by_tbl${table}} INTO ${detail_vars_all_by_tbl${table}}${detail_reference_fetch_field${table}}   #(ver:78)
            IF SQLCA.SQLCODE THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = "FOREACH:",SQLERRMESSAGE 
               LET g_errparam.code = SQLCA.SQLCODE 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            #add-point:b_fill段資料填充 name="b_fill2.fill${table}"
            {<point name="b_fill2.fill${table}"/>}
            #end add-point
           
            IF l_ac > g_max_rec THEN
               INITIALIZE g_errparam TO NULL 
               LET g_errparam.extend = l_ac
               LET g_errparam.code = 9035 
               LET g_errparam.popup = TRUE 
               CALL cl_err()
               EXIT FOREACH
            END IF
            
            LET l_ac = l_ac + 1
            
         END FOREACH
         ${detail_page_delete_by_tbl${table}}
      END IF
   END IF
   #tables -  End  -
      
   #pages_d - Start - 
   LET ${detail_var_title${page}}_mask_o.* =  ${detail_var_title${page}}.*
   FOR l_ac = 1 TO ${detail_var_title${page}}.getLength()
      LET ${detail_var_title${page}}_mask_o[l_ac].* =  ${detail_var_title${page}}[l_ac].*
      CALL ${general_prefix}_${detail_tbl_name${page}}_mask()
      LET ${detail_var_title${page}}_mask_n[l_ac].* =  ${detail_var_title${page}}[l_ac].*
   END FOR
   #pages -  End  -
      
   #add-point:單身填充後 name="b_fill2.after_fill"
   {<point name="b_fill2.after_fill" />}
   #end add-point
    
   LET l_ac = li_ac
   
   CALL ${general_prefix}_detail_show()
   
   LET g_detail_idx = li_detail_idx_tmp
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.fill_chk" >}
#+ 單身填充確認
PRIVATE FUNCTION ${general_prefix}_fill_chk(ps_idx)
   #add-point:fill_chk段define(客製用) name="fill_chk.define_customerization"
   {<point name="fill_chk.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   DEFINE ps_idx        LIKE type_t.chr10
   #add-point:fill_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="fill_chk.define"
   {<point name="fill_chk.define"/>} 
   #end add-point
   
   #add-point:Function前置處理 name="fill_chk.before_chk"
   {<point name="fill_chk.before_chk"/>}
   #end add-point
   
   #此funtion功能暫時停用(2015/1/12)
   #無論傳入值為何皆回傳true(代表要填充該單身)
 
   #全部為1=1 or null時回傳true
   IF ${detail_fill_chk_all} THEN
      #add-point:fill_chk段other_chk name="fill_chk.other_chk"
      {<point name="fill_chk.other_chk"/>}
      #end add-point
      RETURN TRUE
   END IF
   
   #add-point:fill_chk段after_chk name="fill_chk.after_chk"
   {<point name="fill_chk.after_chk"/>}
   #end add-point
   
   RETURN TRUE
 
END FUNCTION
{</section>}
 
{<section id="${app_id}.status_show" >}
PRIVATE FUNCTION ${general_prefix}_status_show()
   #add-point:status_show段define(客製用) name="status_show.define_customerization"
   {<point name="status_show.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   #add-point:status_show段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="status_show.define"
   {<point name="status_show.define"/>} 
   #end add-point
   
   #add-point:status_show段status_show name="status_show.status_show"
   {<point name="status_show.status_show"/>}
   #end add-point
END FUNCTION
{</section>}
 
{<section id="${app_id}.mask_functions" >}
${general_mask_funcs}
{</section>}
 
{<section id="${app_id}.signature" >}
   ${general_func_signature}
{</section>}
 
{<section id="${app_id}.set_pk_array" >}
   ${master_set_pk_array}
{</section>}
 
{<section id="${app_id}.other_dialog" readonly="Y" >}
   ${general_other_dialog}
{</section>}
 
{<section id="${app_id}.msgcentre_notify" >}
${general_msgcentre_notify}
{</section>}
 
{<section id="${app_id}.action_chk" >}
#+ 修改/刪除前行為檢查(是否可允許此動作), 若有其他行為須管控也可透過此段落
PRIVATE FUNCTION ${general_prefix}_action_chk()
   #add-point:action_chk段define(客製用) name="action_chk.define_customerization"
   {<point name="action_chk.define_customerization" edit="c" mark="Y"/>}
   #end add-point
   #add-point:action_chk段define (請盡量不要在客製環境修改此段落內容, 否則將後續patch的調整需人工處理) name="action_chk.define"
   {<point name="action_chk.define"/>} 
   #end add-point
   
   #add-point:action_chk段action_chk name="action_chk.action_chk"
   {<point name="action_chk.action_chk"/>}
   #end add-point
      
   RETURN TRUE
   
END FUNCTION
{</section>}
 
{<section id="${app_id}.other_function" readonly="Y" >}
{<point name="other.function"/>}
{</section>}


